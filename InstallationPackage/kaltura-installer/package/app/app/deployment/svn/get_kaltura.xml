<?xml version="1.0"?>
<project name="CheckOutAll" default="run" basedir=".">
 
    <!-- load the Subversion details we defined earlier -->
    <property file="subversion.properties" />
 
    <property name="rootdir" value="/opt/dev/kaltura"/>
	<property name="architecture" value="64bit"/>
	<property name="adminPassword" value="admin"/>
	
    <target name="deleterootdir">
        <delete dir="${rootdir}" includeemptydirs="true"
                verbose="false" failonerror="true" />
    </target>
 
    <target name="createrootdir" depends="deleterootdir">
        <mkdir dir="${rootdir}" />
    </target>
 
 
    <target name="checkoutSource">
		<foreach list="${svn.repositories.list}" param="repository.name" target="checkoutFromRepository"/>
    </target>
	
	<target name="checkoutBinaries">
		<foreach list="${svn.repositories.binaries.list}" param="repository.name" target="checkoutFromRepository"/>
    </target>
	
	<target name="checkoutFromRepository">
		<echo>checkout from ${svn.${repository.name}.base} repository</echo>
		<mkdir dir="${rootdir}/${svn.${repository.name}.dest}"/>
		<svncheckout
					svnpath="${svn.path}"
					username="${svn.username}"
					password="${svn.password}"
					force="true"
					nocache="true"
					repositoryurl="${svn.base}${svn.${repository.name}.base}"
					todir="${rootdir}/${svn.${repository.name}.dest}" />
	</target>
	
	<target name="createDirs">
		<mkdir dir="${rootdir}/cache"/>
		<mkdir dir="${rootdir}/cache/content"/>
		<mkdir dir="${rootdir}/cache/response"/>
		<mkdir dir="${rootdir}/log"/>
		<mkdir dir="${rootdir}/log/batch"/>
		<mkdir dir="${rootdir}/log/sphinx"/>
		<mkdir dir="${rootdir}/sphinx"/>
		<mkdir dir="${rootdir}/tmp"/>
		<mkdir dir="${rootdir}/tmp/convert"/>
		<mkdir dir="${rootdir}/emailIngestion"/>
		<mkdir dir="${rootdir}/imports"/>
		<mkdir dir="${rootdir}/thumb"/>
		<mkdir dir="${rootdir}/web"/>
		<mkdir dir="${rootdir}/web/content"/>
		<mkdir dir="${rootdir}/web/content/cacheswf"/>
		<mkdir dir="${rootdir}/web/content/entry"/>
		<mkdir dir="${rootdir}/web/content/generatedUiConf"/>
		<mkdir dir="${rootdir}/web/content/uploads"/>
		<mkdir dir="${rootdir}/web/content/webcome"/>
	</target>
	
	<target name="generateSecret"
        description="==>test AdhocTask ">
		
		<adhoc-task name="generate"><![CDATA[
			class Secret extends Task {
			
				private $name;

				function setName($name) {
					$this->name = $name;
				}
				
				function main() {
					$charset = "abcdefghijklmnopqrstuvwxyz";
					$charset .= "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
					$charset .= "0123456789";
					$length = mt_rand (5, 10);
					$key = "";
					for ($i=0; $i<$length; $i++) $key .= $charset[(mt_rand(0,(strlen($charset)-1)))];
					echo $this->name.' secret: '. md5($key).PHP_EOL;
				}
			}
		]]></adhoc-task>
	
		<generate name="admin console (partner -2)"/>
		<generate name="admin console admin (partner -2)"/>
		<generate name="partner 0"/>
		<generate name="partner 0 admin"/>
		<generate name="batch (partner -1)"/>
		<generate name="batch (partner -1)"/>
		
	</target>
	
	<target name="generateSha1Salt"
        description="==>generate sha1 and salt values based on admin console password ">
		
		<adhoc-task name="generates"><![CDATA[
			class Sha1Salt extends Task {
			
				private $password;

				function setPassword($password) {
					$this->password = $password;
				}
				
				function main() {
					$salt = md5(rand(100000, 999999).$this->password); 
					$sha1 = sha1($salt.$this->password);  
					echo 'salt for admin console passwword: '.$salt.PHP_EOL;
					echo 'sha1 for admin console passwword: '.$sha1.PHP_EOL;
				}
			}
		]]></adhoc-task>
	
		<generates password="${adminPassword}"/> 
		
	</target>
	
 
    <!-- ...more tasks to follow... -->
 
    <target name="run" depends="checkoutSource, checkoutBinaries, createDirs, generateSecret, generateSha1Salt" />
	
</project>