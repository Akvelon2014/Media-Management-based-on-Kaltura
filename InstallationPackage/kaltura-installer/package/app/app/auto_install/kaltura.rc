#set -x
verify_user_input()
{
for VAL in HTTPD_BIN PHP_BIN TIME_ZONE BASE_DIR KALT_VER PENTAHO_DIR PENTAHO_VER PENTAHO_URL COMMON_DEPS KALTURA_FULL_VIRTUAL_HOST_NAME ADMIN_CONSOLE_ADMIN_MAIL ADMIN_CONSOLE_PASSWORD DB1_HOST DB1_PORT DB1_NAME DB1_USER DB1_PASS KALT_USER KALT_GROUP TEST_PARTNER_EMAIL TEST_PARTNER_PASSWD DB1_CREATE_NEW_DB ; do
	if [ -z "${!VAL}" ];then
		echo "I need $VAL in user_input.ini"
		exit 1
	fi
done
}

setup_rpm_forge_repo()
{
	wget $RPMFORGE_RELEASE_RPM -O /tmp/rpmforge-release.rpm
	rpm --import http://apt.sw.be/RPM-GPG-KEY.dag.txt
	rpm -K /tmp/rpmforge-release.rpm
	rpm -i /tmp/rpmforge-release.rpm --force
}
check_port_connectivity()
{
	set +e
	echo "Checking $KALTURA_FULL_VIRTUAL_HOST_NAME on port 80.."
	nc -z $KALTURA_FULL_VIRTUAL_HOST_NAME 80 -w2	
	if [ $? -ne 0 ];then echo "Connection to $KALTURA_FULL_VIRTUAL_HOST_NAME on port 80 [tcp/http] failed!";echo;fi
	echo "Checking $NFS_SERVER on port 2049.."
	nc -z $NFS_SERVER 2049 -w2
	if [ $? -ne 0 ];then echo "Connection to $NFS_SERVER on port 2049 [tcp/nfs] failed!";echo;fi
	echo "Checking $NFS_SERVER on port 2049.."
	nc -z -u $NFS_SERVER 2049 -w2
	if [ $? -ne 0 ];then echo "Connection to $NFS_SERVER on port 2049 [udp/nfs] failed!";echo;fi
	echo "Checking $DB1_HOST on port $DB1_PORT.."
	nc -z $DB1_HOST $DB1_PORT -w2
	if [ $? -ne 0 ];then echo "Connection to $DB1_HOST on port $DB1_PORT [tcp/mysql] failed!";echo;fi
	echo "Checking $SPHINX_DB_HOST on port 9312.."
	nc -z $SPHINX_DB_HOST 9312 -w2
	if [ $? -ne 0 ];then echo "Connection to $SPHINX_DB_HOST on port 9312 [tcp/sphinxapi] failed!";echo;fi
	echo "Checking $KALTURA_FULL_VIRTUAL_HOST_NAME on port 443.."
	nc -z $KALTURA_FULL_VIRTUAL_HOST_NAME 443 -w2
	if [ $? -ne 0 ];then echo "Connection to $KALTURA_FULL_VIRTUAL_HOST_NAME on port 443 [tcp/https] failed!";fi
	echo
	set -e
}
install_deps()
{
	# this looks a bit strange but the idea is this:
	# if the repo is already enabled, just install monit, otherwise, set it up, install monit and disable it again because we may not want it for anything else for fear of somebody installing stuff from there by mistake.
	#if ! yum repolist enabled|grep -q rpmforge;then
	#	setup_rpm_forge_repo
	#	yum -y install monit
	#	mv /etc/yum.repos.d/rpmforge.repo /etc/yum.repos.d/rpmforge.repo.dis
	#else
	#	yum -y install monit
	#fi
	yum -y install $COMMON_DEPS
	if ! rpm -q mysql-server 2>/dev/null;then
		echo "Do you plan on running MySQL DB on this instance? Note that it is not advised in cluster mode [y/N]"
		read YESNO
		if [ "$YESNO" = 'y' ];then
			yum -y install mysql-server
			/etc/init.d/mysqld restart
			mysql_secure_installation
		fi
	fi
	if [ "$DB1_HOST" = 'localhost' -o "$DB1_HOST" = '127.0.0.1' -o "$DB1_HOST" = `hostname` ];then
		MY_CNF=/etc/my.cnf
		sed -i '/^lower_case_table_names = 1$/d' $MY_CNF
		sed -i '/^open_files_limit.*$/d' $MY_CNF
		sed -i '/^max_allowed_packet.*$/d' $MY_CNF
		echo "Setting lower_case_table_names = 1 in /etc/my.cnf.."
		sed -i 's@^\[mysqld\]$@[mysqld]\nlower_case_table_names = 1\n@' $MY_CNF
                echo "Setting open_files_limit = 20000 in /etc/my.cnf.."
                sed -i 's@^\[mysqld\]$@[mysqld]\nopen_files_limit = 20000\n@' $MY_CNF
                echo "Setting max_allowed_packet = 16M in /etc/my.cnf.."
                sed -i 's@^\[mysqld\]$@[mysqld]\nmax_allowed_packet = 16M\n@' $MY_CNF
		if rpm -qf /etc/init.d/mysqld;then /etc/init.d/mysqld restart;chkconfig mysqld on;fi
	fi
	for i in httpd memcached;do
		chkconfig $i on
	done
}
setup_pentaho()
{
	if [ -d "$PENTAHO_DIR" ];then
		echo "$PENTAHO_DIR already exists"
	else
		rm -rf "$PENTAHO_DIR" 
		set +e
		tar ztf $INSTALL_DIR/pdi-ce-$PENTAHO_VER-stable.tar.gz > /dev/null
		if [ $? -ne 0 ];then
		    echo "Archive does not exist or is corrupted."
		    rm $INSTALL_DIR/pdi-ce-$PENTAHO_VER-stable.tar.gz*
		    echo "Retrieving Pentaho.."
		    wget $PENTAHO_URL
		fi
		set -e
		echo "Extracting Pentaho archive and copying to $PENTAHO_DIR/pdi.."
		tar zxf pdi-ce-$PENTAHO_VER-stable.tar.gz
		mkdir -p $PENTAHO_DIR && mv data-integration $PENTAHO_DIR/pdi
	fi
}
create_kalt_user()
{
	echo "Creating the kaltura user.."
	KALT_USER=kaltura
	KALT_GROUP=kaltura
	getent group $KALT_GROUP >/dev/null || groupadd -r $KALT_GROUP
	getent passwd $KALT_USER >/dev/null || useradd -r  -g $KALT_GROUP -s /sbin/nologin -d $BASE_DIR -c "Kaltura" $KALT_USER
}

host_base_configure()
{
	echo "Dest host?"
	read DEST_HOST
	DEST_DIR="/tmp/$DEST_HOST"
	cd $KALT_PREFIX
	find . -name tmp -o -name log -o -name cache -o -name logs -o -name entry|sed 's/^.\///g' >/tmp/excd_lst
	rsync -avzr --exclude-from /tmp/excd_lst . $DEST_DIR
	mkdir -p "$DEST_DIR"
	CURR_NODE_NAME=`grep cdn_host $KALT_PREFIX/app/configurations/local.ini -m1|awk -F '=' '{print $2}'|sed 's/\s*//g'`
	if [ -n "$CURR_NODE_NAME" ];then
		echo "We believe in the hostname in your curr installation is: $CURR_NODE_NAME. Do you wish to alter? [Y/n]"
		read ANS
	else
		echo "We could not find the hostname in your conf, would you like to input one manually? [Y/n]"
		read ANS
	fi
	if [ "$ANS" = 'Y' ];then
		echo "Input hostname: "
		read CURR_NODE_NAME
	fi
	if [ -z "$CURR_NODE_NAME" ];then
		echo "Come on guys, I need to know what host I should look for in the current config :("
		exit 1
	fi
	for i in `find $KALT_PREFIX/app -name "*template*ini"`;do 
		CONF=`echo $i|sed 's/_template//;s/.template//'` 
		if [ -r $CONF ];then 
			sed  "s@$CURR_NODE_NAME@$DEST_HOST@g" $CONF>  $APP_CONF_DIR/`basename $CONF`
		fi
	done
	fix_hostname_values
	cd $DEST_DIR
}

probe_for_garbage()
{
	if [ -d $BASE_DIR ];then
		echo "$BASE_DIR already exists. Remove and re-run me."
		exit 1
	fi
	KALT_PIDS=`ps fax|grep "$BASE_DIR"|grep -v grep |awk -F " " '{print $1}'|xargs`
	if [ -n "$KALT_PIDS" ];then
		echo -e "Following PIDs of old Kaltura proces are running: $KALT_PIDS\nKill them and re-run me.\n"
		exit 1
	fi
}

install_all_in_one()
{
	$DIR_NAME/auto_inst_falcon_centos.sh	
	cp $DIR_NAME/package/app/crontab/kaltura_crontab $BASE_DIR/crontab/kaltura_crontab.templ
	echo "Configured `hostname` as an all in 1 server on `date`">> $MANIFEST_FILE
	echo "single" > $ROLE_FILE
}
	
create_common_runme()
{
cat >>runme.sh << EOF
echo "Creating the kaltura user.."
getent group kaltura >/dev/null || groupadd -r kaltura
getent passwd kaltura >/dev/null || useradd -r  -g kaltura -s /sbin/nologin -d $KALT_PREFIX -c "Kaltura" kaltura
EOF
echo "yum install -y $COMMON_DEPS" >>runme.sh

}
prompt_for_mysql_dsn()
{
	if [ "$DB1_HOST" = 'localhost' -o "$DB1_HOST" = '127.0.0.1' -o "$DB1_HOST" = `hostname` ];then
		echo "You are installing batch and you stated in $DIR_NAME/user_input.ini that your DB to be on the same machine, are you REALLY sure you mean this?"
		read ANS
		if [ "$ANS" != 'y' ];then
			echo "Your DB host?"
			read DB_HOSTNAME
			sed  -i "s@\(DB1_HOST\)=.*@\1=$DB_HOSTNAME@g" $DIR_NAME/user_input.ini
			echo "Your DB user? [$DB1_USER]"
			read DB_USER
			if [ -n "$DB_USER" ];then
				sed  -i "s@\(DB1_USER\)=.*@\1=$DB_USER@g" $DIR_NAME/user_input.ini
			fi
			echo "Your DB passwd? [$DB1_PASS]"
			read DB_PASSWD
			if [ -n "$DB_PASSWD" ];then
				sed  -i "s@\(DB1_PASS\)=.*@\1=$DB_USER@g" $DIR_NAME/user_input.ini
			fi
			echo "Your DB port? [$DB1_PORT]"
			read DB_PORT
			if [ -n "$DB_PORT" ];then
				sed  -i "s@\(DB1_PORT\)=.*@\1=$DB_PORT@g" $DIR_NAME/user_input.ini
			fi
			sed -i 's@\(DB1_CREATE_NEW_DB\)=y@\1=n@g' $DIR_NAME/user_input.ini
			. $DIR_NAME/user_input.ini
			
		fi
	fi
}

install_batch()
{
	cd $BASE_DIR
	rm /etc/cron.d/dwh_crontab||true
	cp crontab/kaltura_crontab crontab/kaltura_crontab.bak.`date +%d_%m_%y`
	cp crontab/kaltura_crontab.templ crontab/kaltura_crontab
	sed -i "s%@BASE_DIR@%$BASE_DIR%g;s%@APP_DIR@%$BASE_DIR/app%g;s%@PHP_BIN@%$PHP_BIN%g;s%@LOG_DIR@%$BASE_DIR/log%g" crontab/kaltura_crontab
	for i in reportUsageTrackingIfOptIn.php watch.populate.sh dwh_plays_views_sync.sh send-usage-report.php;do  
		sed -i "s@\(.*$i.*\)@#commented out by $0 when configuring batch: \1@g" crontab/kaltura_crontab; 
	done
	for i in sphinx_watch.sh;do
		/etc/init.d/$i stop
		chkconfig $i off
	done 
	if [ "$DB1_HOST" != "localhost" ];then
		/etc/init.d/mysqld stop
		chkconfig mysqld off
	fi
	echo "I also need a scheduler ID?"           
	read SCD_ID                    
	sed -i "s@^\(id\s*=\s*\)1\$@\1 $SCD_ID@" $APP_CONF_DIR/batch.ini
	rm /etc/httpd/conf.d/my_kaltura.conf||true
	sed -i "1iUser $KALT_USER\nGroup $KALT_GROUP\n" $BASE_DIR/app/configurations/apache/my_kaltura_apiv3.conf
	ln -sf $APP_CONF_DIR/apache/my_kaltura_apiv3.conf /etc/httpd/conf.d/
	/etc/init.d/httpd restart
	/etc/init.d/serviceBatchMgr.sh restart
	echo "Configured `hostname` as a batch instance on `date`">> $MANIFEST_FILE
	echo "batch" > $ROLE_FILE

}

install_sphinx()
{
	cd $BASE_DIR
	rm /etc/cron.d/dwh_crontab || true
	cp crontab/kaltura_crontab crontab/kaltura_crontab.bak.`date +%d_%m_%y`
	cp crontab/kaltura_crontab.templ crontab/kaltura_crontab
	sed -i "s%@BASE_DIR@%$BASE_DIR%g;s%@APP_DIR@%$BASE_DIR/app%g;s%@PHP_BIN@%$PHP_BIN%g;s%@LOG_DIR@%$BASE_DIR/log%g" crontab/kaltura_crontab
	for i in reportUsageTrackingIfOptIn.php watch.batchMgr.sh dwh_plays_views_sync.sh send-usage-report.php;do  
		sed -i "s@\(.*$i.*\)@#commented out by $0 when configuring sphinx: \1@g" crontab/kaltura_crontab; 
	done
	for i in serviceBatchMgr.sh httpd;do
		/etc/init.d/$i stop
		chkconfig $i off
	done
	if [ "$DB1_HOST" != "localhost" ];then
		/etc/init.d/mysqld stop
		chkconfig mysqld off
	fi
	/etc/init.d/sphinx_watch.sh restart
	clear_host_from_scheduler
	php $BASE_DIR/app/deployment/base/scripts/populateSphinxEntries.php >>$BASE_DIR/log/populateSphinxEntries.log
	echo "Configured `hostname` as a Sphinx instance on `date`">> $MANIFEST_FILE
	echo "Sphinx" > $ROLE_FILE
}

install_api()
{
	#install_all_in_one
	cd $BASE_DIR
	rm /etc/cron.d/dwh_crontab || true
	cp crontab/kaltura_crontab crontab/kaltura_crontab.bak.`date +%d_%m_%y`
	cp crontab/kaltura_crontab.templ crontab/kaltura_crontab
	sed -i "s%@BASE_DIR@%$BASE_DIR%g;s%@APP_DIR@%$BASE_DIR/app%g;s%@PHP_BIN@%$PHP_BIN%g;s%@LOG_DIR@%$BASE_DIR/log%g" crontab/kaltura_crontab
	for i in reportUsageTrackingIfOptIn.php watch.batchMgr.sh dwh_plays_views_sync.sh send-usage-report.php;do  
		sed -i "s@\(.*$i.*\)@#commented out by $0 when configuring api: \1@g" crontab/kaltura_crontab; 
	done
	for i in serviceBatchMgr.sh sphinx_watch.sh;do
		/etc/init.d/$i stop
		chkconfig $i off
	done
	if [ "$DB1_HOST" != "localhost" ];then
		/etc/init.d/mysqld stop
		chkconfig mysqld off
	fi
	if [ "$SPHINX_DB_HOST" != "localhost" ];then
		/etc/init.d/sphinx_watch.sh stop
		chkconfig sphinx_watch.sh off
	fi
	clear_host_from_scheduler
	echo "Configured `hostname` as an API instance on `date`">> $MANIFEST_FILE
	echo "API" > $ROLE_FILE

}

clear_host_from_scheduler()
{
	SQL="delete from $DB1_NAME.scheduler where host='$KALTURA_FULL_VIRTUAL_HOST_NAME';"
	echo "$SQL"|mysql -h$DB1_HOST -u$DB1_USER -P$DB1_PORT -p$DB1_PASS

}

fix_hostname_values()
{
	if [ -n "$1" ];then
		BASE=$1
	else
		echo "Please provide the base dir for the Kaltura install:"
		read_BASE
	fi
	echo -e "We will now go through a set of questions to determine which hostname values need to be replaced on this node\nIf you do not wish to replace a certain role, just hit enter w/o inputting a value."
	echo "Who is our batch host for this machine?"
	read BATCH_NODENAME
	if [ -n "$BATCH_NODENAME" ];then
		echo "Setting batch hostname in configs to $BATCH_NODENAME.."
		echo "I also need a scheduler ID?"           
		read SCD_ID                    
		sed -i "s@^\(id\s*=\s*\)1\$@\1 $SCD_ID@" $APP_CONF_DIR/batch.ini
		sed -i "s@^\(hostName\s*=\).*@\1 $DEST_HOST@g" $APP_CONF_DIR/batch.ini
		sed -i "s@^\(serviceUrl\s*=\).*@\1 http://$DEST_HOST@g" $APP_CONF_DIR/batch.ini
	fi
	echo "Who is our Sphinx host for this machine?"
	read SPHINX_NODENAME
	if [ -n "$SPHINX_NODENAME" ];then
		echo "Setting Sphinx hostname in configs to $SPHINX_NODENAME.."
	fi
	echo "Who is our MySQL host for this machine?"
	read MYSQL_NODENAME
	if [ -n "$MYSQL_NODENAME" ];then
		echo "Setting MySQL hostname in configs to $MYSQL_NODENAME.."
	fi

}

# THIS SHOULD BE RUN AS PART OF THE PACKAGING PROCESS, BUT FOR NOW...
remove_exec_bit()
{
	for i in "*.xml" "*.template" "*.ttf" "*.xsl" "*.xsd" "*.yml" "*.smil" "*.srt" "*.sql" "*.orig" "*.patch" "*.po" "*.pdf" "*.otf" "*.txt" "*.php" "*.phtml" "*.project" "*.png" "*.properties" "*.sample" "*.swf" "*.sf" "*.swz" "*.uad" "*.prefs" "*.psd" "*.rvmrc" "*.sln" "*.ini" "*.log" ;do
		find $KALT_PREFIX -iname "$i" -exec chmod 644 {} \;
	done 
}

set_selinux_permissive()
{
        STATUS=`getenforce`
        if [ $STATUS = 'Enforcing' ];then
                echo "Setting SELinux to permissive mode.."
                setenforce Permissive
                sed -i 's@SELINUX=enforcing@SELINUX=permissive@' /etc/selinux/config
        fi
}


set_php_ini()
{
	echo "Setting request_order = CGP in php.ini"
	# if we have a scandir
	if [ -d /etc/php.d ];then
		INI_FILE=/etc/php.d/zzkaltura.ini
		echo 'request_order = "CGP"' > $INI_FILE
		echo "apc.shm_size=256M" >> $INI_FILE
		echo "date.timezone=$TIME_ZONE" >> $INI_FILE
	else
		INI_FILE=/etc/php.ini
		sed -i 's@request_order\s*=\s*.*@request_order = "CGP"@' $INI_FILE
		echo "apc.shm_size=256M" >> $INI_FILE
	fi
	echo "upload_tmp_dir = $BASE_DIR/web/tmp" >> $INI_FILE
}
fix_permissions()
{
	echo "Changing file permissions.."
	find $BASE_DIR -type d -perm 777 -exec chmod 755 {} \;
	find $BASE_DIR -name "cache" -exec chown -R $KALT_USER.$KALT_GROUP {} \;
	find $BASE_DIR -name "tmp" -exec chown -R $KALT_USER.$KALT_GROUP {} \;
	# this log is initally written to by root and then by the $KALT_USER, so we create in advance and set proper perms on it.
	touch $BASE_DIR/log/cron.log
	find $BASE_DIR -name "log" -exec chown -R $KALT_USER.$KALT_GROUP {} \;
	chown root.$KALT_GROUP $BASE_DIR/app/configurations/admin.ini $BASE_DIR/app/configurations/local.ini $BASE_DIR/app/infra/kConf.php
	find $BASE_DIR/app/configurations -name "*.ini" -exec chown root.$KALT_GROUP {} \;
	find $BASE_DIR/app/configurations -name "*.ini" -o -name "*.conf" -exec chmod 640 {} \;
	mkdir -p $PENTAHO_DIR/pdi/plugins $BASE_DIR/web/content $BASE_DIR/web/conversions $BASE_DIR/app/batch
	chown -R $KALT_USER.$KALT_GROUP /usr/local/pentaho/pdi/plugins $BASE_DIR/web/content $BASE_DIR/web/conversions $BASE_DIR/app/batch
	sed -i 's@ root @ kaltura @' $BASE_DIR/crontab/kaltura_crontab
	sed -i 's@kaltura /usr/sbin/logrotate@root /usr/sbin/logrotate@' $BASE_DIR/crontab/kaltura_crontab
}

configure_apache()
{
	echo "Configing Apache to run as the kaltura user.."
	sed -i "s@^User@#User@" /etc/httpd/conf/httpd.conf
	sed -i "s@^Group@#Group@" /etc/httpd/conf/httpd.conf
	sed -i "1iUser $KALT_USER\nGroup $KALT_GROUP\n" $BASE_DIR/app/configurations/apache/my_kaltura.conf
	if [ -d /var/lib/php/session ];then chown -R $KALT_USER.$KALT_GROUP /var/lib/php/session;fi
	echo "Linking $BASE_DIR/app/configurations/apache/my_kaltura.conf to /etc/httpd/conf.d.."
	rm /etc/httpd/conf.d/my_kaltura.conf 2>/dev/null||true
	ln -s $BASE_DIR/app/configurations/apache/my_kaltura.conf /etc/httpd/conf.d/
	/etc/init.d/httpd restart
}

set_serial()
{
	sed -i 's@^kaltura_activation_key\s*=\s*@kaltura_activation_key = YjI2MzgwMmUyMDA0ZTA1ODg1MWFjYWJiNDExMTEzNWV8MXxuZXZlcnww@' $BASE_DIR/app/configurations/local.ini
}

configure_dwh()
{
	echo "Configuring DWH.."
	mkdir -p $BASE_DIR/web/logs
	KETTLE_CONF=$BASE_DIR/dwh/.kettle/kettle.properties
	sed -i "s@EventsLogsDir\s*=\s*.*@EventsLogsDir = $BASE_DIR/web/logs@" $KETTLE_CONF
	sed -i "s@EventsWildcard\s*=\s*.*@EventsWildcard = .*-kaltura.*_apache_access.log-.*@" $KETTLE_CONF
	#if [ ! -r mysql-connector-java-$MYSQL_JAVA_CONNECTOR_VER/mysql-connector-java-$MYSQL_JAVA_CONNECTOR-bin.jar ];then
	#	wget $MYSQL_JAVA_CONNECTOR
	#	tar zxf mysql-connector-java-$MYSQL_JAVA_CONNECTOR_VER.tar.gz 
	#fi
	#cp mysql-connector-java-$MYSQL_JAVA_CONNECTOR_VER/mysql-connector-java-$MYSQL_JAVA_CONNECTOR_VER-bin.jar $PENTAHO_DIR/pdi/libext/JDBC
	# fix paths in the DWH tree. There are many so listing all files explicitely is annoying. This should be fixed for Gemini.
	#find $BASE_DIR/dwh/ -type f -exec sed -i 's@/usr/local/pentaho@/opt/kaltura/dwh/pentaho@g' {} \;
}

create_partner()
{
	echo "Creating test partner.."
	SPHINX_DSN=`grep datasources.sphinx.connection.dsn "$APP_CONF_DIR/db.ini"|awk -F "= " '{print $2}'`
	SPHINX_BOX=`echo $SPHINX_DSN |sed 's/.*host=\(.*\);port=.*/\1/'`
	SPHINX_PORT=`echo $SPHINX_DSN |sed 's/.*host=.*;port=\(.*\);"/\1/'`
	sleep 7 
	set +e
	exec 3<>/dev/tcp/$SPHINX_BOX/$SPHINX_PORT
	if [ $? -ne 0 ];then
	    echo "Waiting for 15 seconds, giving Sphinx [$SPHINX_BOX] a chance to open a listener on $SPHINX_PORT.."
	    sleep 15
	fi
	exec 3<>/dev/tcp/$SPHINX_BOX/$SPHINX_PORT
	if [ $? -eq 0 ];then
	    ADMIN_SECRET=`echo "select admin_secret from partner where id=-2;" |mysql -u"$DB1_USER" -p"$DB1_PASS" -P$DB1_PORT $DB1_NAME |sed '1,1d'`
	    TEST_PARTNER_ID=`php $DIR_NAME/create_partner.php $ADMIN_SECRET $TEST_PARTNER_EMAIL $TEST_PARTNER_PASSWD `
	else
	    echo "Sphinx seems to be down :( I will not create a partner."
	fi
	set -e
	echo $TEST_PARTNER_ID
}

upload_assets()
{
	if [ -z "$1" ];then
		echo "Didn't get a partner ID :( returning."
		return 0;
	fi
	TEST_PARTNER_ID=$1
    	echo 'Uploading sample content.';
	SPHINX_DSN=`grep datasources.sphinx.connection.dsn "$APP_CONF_DIR/db.ini"|awk -F "= " '{print $2}'`
	SPHINX_BOX=`echo $SPHINX_DSN |sed 's/.*host=\(.*\);port=.*/\1/'`
	SPHINX_PORT=`echo $SPHINX_DSN |sed 's/.*host=.*;port=\(.*\);"/\1/'`
	sleep 7
	set +e
	exec 3<>/dev/tcp/$SPHINX_BOX/$SPHINX_PORT
	if [ $? -ne 0 ];then
	    echo "Waiting for 15 seconds, giving Sphinx [$SPHINX_BOX] a chance to open a listener on $SPHINX_PORT.."
	    sleep 15
	fi
	exec 3<>/dev/tcp/$SPHINX_BOX/$SPHINX_PORT
	if [ $? -eq 0 ];then
	    php $DIR_NAME/upload_csv.php $TEST_PARTNER_ID 'http://localhost' `echo "select admin_secret from partner where id=$TEST_PARTNER_ID;" |mysql -u"$DB1_USER" -p"$DB1_PASS" -P$DB1_PORT $DB1_NAME |sed '1,1d'` $TEST_PARTNER_EMAIL 
	else
	    echo "Sphinx seems to be down :( I will not create a partner."
	fi
	set -e
	

}
create_mysql_user()
{
	SQL="select user from mysql.user where user='$KALT_USER';"
	KALT_USER_EXISTS=`echo $SQL|mysql --skip-column-names -h$DB1_HOST -u$DB1_USER -P$DB1_PORT -p$DB1_PASS`
	if [ -n "$KALT_USER_EXISTS" ];then
		echo "MySQL user $KALT_USER already exists, skipping creation."
		return 0
	fi
	KALT_MYSQL_PASSWD=`< /dev/urandom tr -dc A-Za-z0-9_ | head -c15`
	SQL="create user $KALT_USER@'%' identified by '$KALT_MYSQL_PASSWD';GRANT ALL PRIVILEGES ON *.* TO $KALT_USER@'%' WITH GRANT OPTION; Flush Privileges;"
	echo "$SQL"|mysql -h$DB1_HOST -u$DB1_USER -P$DB1_PORT -p$DB1_PASS
	if [ $? -eq 0 ];then
		sed -i "s@^DB1_USER\s*=\s*.*@DB1_USER=$KALT_USER@g" $DIR_NAME/user_input.ini
		sed -i "s@^DB1_PASS\s*=\s*.*@DB1_PASS=$KALT_MYSQL_PASSWD@g" $DIR_NAME/user_input.ini
		sed -i "s@^SPHINX_DB_PASS\s*=\s*.*@SPHINX_DB_PASS=$KALT_MYSQL_PASSWD@g" $DIR_NAME/user_input.ini
	fi
}

configure_red5()
{
        if [ "$RED5_INSTALL" = 'y' -o "$RED5_INSTALL" = 'yes' ];then
                UI_CONF=`echo "select conf_file_path from ui_conf where tags like '%kmc_uploadWebCam%';"|mysql -u$DB1_USER -P$DB1_PORT -p$DB1_PASS $DB1_NAME -h$DB1_HOST --skip-column-names`
                sed -i "s@{HOST_NAME}@$RED5_HOST@g" "$BASE_DIR/web/$UI_CONF"
        fi
}

export_mysql_kalt_db()
{
	if [ -z "$TMPDIR" ];then
		TMPDIR=/tmp
	fi
	$DIR_NAME/export_db.sh $DB1_NAME $DB1_USER $DB1_PASS $DB1_PORT $TMPDIR/${DB1_NAME}_`date +%d%m%y_%H%M`
	$DIR_NAME/export_db.sh mysql $DB1_USER $DB1_PASS $DB1_PORT $TMPDIR/mysql_`date +%d%m%y_%H%M`
	$DIR_NAME/export_db.sh $DWH_DATABASE_NAME $DWH_USER $DWH_PASS $DWH_PORT $TMPDIR/${DWH_DATABASE_NAME}_`date +%d%m%y_%H%M`
}

disable_monitoring_tab()
{
    sed -i 's@^access.monitoring = SYSTEM_ADMIN_SYSTEM_MONITOR@;access.monitoring = SYSTEM_ADMIN_SYSTEM_MONITOR@g' "$BASE_DIR/app/configurations/admin.ini" 
}


set_mysqldb_host()
{
	for VAL in DWH_HOST DWH_USER DWH_PASS DWH_PORT DWH_DATABASE_NAME SPHINX_DB_HOST SPHINX_DB_NAME SPHINX_DB_USER SPHINX_DB_PASS SPHINX_DB_PORT;do
		if [ -z "${!VAL}" ];then
			echo "I need $VAL in user_input.ini"
			exit 1
		fi
	done
	echo "Creating backup $APP_CONF_DIR/db.ini in $APP_CONF_DIR/db.ini.`date +%d_%m_%y`"
	mv $APP_CONF_DIR/db.ini $APP_CONF_DIR/db.ini.`date +%d_%m_%y`
	cp $APP_CONF_DIR/db.template.ini $APP_CONF_DIR/db.ini
	sed "s#@DB[0-3]_HOST@#$DB1_HOST#g" -i $APP_CONF_DIR/db.ini
	sed "s#@DB[0-3]_USER@#$DB1_USER#g" -i $APP_CONF_DIR/db.ini
	sed "s#@DB[0-3]_PASS@#$DB1_PASS#g" -i $APP_CONF_DIR/db.ini
	sed "s#@DB[0-3]_PORT@#$DB1_PORT#g" -i $APP_CONF_DIR/db.ini
	sed "s#@DB[0-3]_NAME@#$DB1_NAME#g" -i $APP_CONF_DIR/db.ini
	
	sed "s#@DWH_HOST@#$DWH_HOST#g" -i $APP_CONF_DIR/db.ini
	sed "s#@DWH_USER@#$DWH_USER#g" -i $APP_CONF_DIR/db.ini
	sed "s#@DWH_PASS@#$DWH_PASS#g" -i $APP_CONF_DIR/db.ini
	sed "s#@DWH_PORT@#$DWH_PORT#g" -i $APP_CONF_DIR/db.ini
	sed "s#@DWH_DATABASE_NAME@#$DWH_DATABASE_NAME#g" -i $APP_CONF_DIR/db.ini
	 #these are called 'SPHINX.*' but it is not for Sphinx but rather, for kaltura_sphinx_log which is a DB hosted in the operational MySQL server. Confusing? very much.
	sed "s#@SPHINX_DB_NAME@#kaltura_sphinx_log#g" -i $APP_CONF_DIR/db.ini
	sed "s#@SPHINX_DB_USER@#$SPHINX_DB_USER#g" -i $APP_CONF_DIR/db.ini
	sed "s#@SPHINX_DB_PASS@#$SPHINX_DB_PASS#g" -i $APP_CONF_DIR/db.ini
	sed "s#@SPHINX_DB_PORT@#$SPHINX_DB_PORT#g" -i $APP_CONF_DIR/db.ini
	# this means the Sphinx [not MySQL] host:
	sed "s#@SPHINX_DB_HOST@#$SPHINX_DB_HOST#g" -i $APP_CONF_DIR/db.ini
	
	cp $BASE_DIR/dwh/.kettle/kettle.properties $BASE_DIR/dwh/.kettle/kettle.properties.`date +%d_%m_%y`
	sed "s@\(^Db*HostName\)\s*=.*\$@\1=$DWH_HOST@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^Db*Port\)\s*=.*\$@\1=$DWH_PORT@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^Db*User\)\s*=.*\$@\1=$DWH_USER@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^Db*Password\)\s*=.*\$@\1=$DWH_PASS@g" -i $BASE_DIR/dwh/.kettle/kettle.properties

	sed "s@DbUser = .*@DbUser=$DWH_USER@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^DbPassword\)\s*=.*\$@\1=$DWH_PASS@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^DbHostName\)\s*=.*\$@\1=$DWH_HOST@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^DbPort\)\s*=.*\$@\1=$DWH_PORT@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@OpDbUser = .*@OpDbUser=$DWH_USER@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^OpDbPassword\)\s*=.*\$@\1=$DWH_PASS@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^OpDbHostName\)\s*=.*\$@\1=$DB1_HOST@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^OpDbPort\)\s*=.*\$@\1=$DB1_PORT@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@OpDbUser = .*@OpDbUser=$DWH_USER@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^OpWritableDbPassword\)\s*=.*\$@\1=$DWH_PASS@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^OpWritableDbHostName\)\s*=.*\$@\1=$DB1_HOST@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^OpWritableDbPort\)\s*=.*\$@\1=$DB1_PORT@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@OpDWritablebUser = .*@OpWritableDbUser=$DWH_USER@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^OpDbPassword\)\s*=.*\$@\1=$DWH_PASS@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^OpDbPassword\)\s*=.*\$@\1=$DWH_PASS@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^DbReadHostName\)\s*=.*\$@\1=$DWH_HOST@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^DbReadPort\)\s*=.*\$@\1=$DWH_PORT@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^DbReadUser\)\s*=.*\$@\1=$DWH_USER@g" -i $BASE_DIR/dwh/.kettle/kettle.properties
	sed "s@\(^DbReadPassword\)\s*=.*\$@\1=$DWH_PASS@g" -i $BASE_DIR/dwh/.kettle/kettle.properties

	echo "Done reconfiguring MySQL operational and DWH DB and Sphinx :)"
	echo "Reconfigured `hostname`'s operational and DWH DB and Sphinx on `date`">> $MANIFEST_FILE
}

create_kaltura_profile()
{
	PROF_FILE=/etc/profile.d/kaltura.sh
	touch $PROF_FILE
	if ! grep -q HISTTIMEFORMAT $PROF_FILE;then
		echo "HISTTIMEFORMAT='%F %T '" >> $PROF_FILE
		echo "export HISTTIMEFORMAT" >> $PROF_FILE
	fi
	. $PROF_FILE
}
copy_install_files_to_kalt_dir()
{
	mkdir -p $BASE_DIR/etc/auto_inst
	MANIFEST_FILE=$BASE_DIR/etc/auto_inst/`basename $0`.manifest
	ROLE_FILE=$BASE_DIR/etc/auto_inst/role
}

clear_all_roles()
{
	set +e
	rm $ROLE_FILE
	for i in serviceBatchMgr.sh sphinx_watch.sh httpd;do
		/etc/init.d/$i stop
		chkconfig $i off
	done
	rm /etc/cron.d/kaltura_crontab||true
	set -e
}
configure_batch()
{
	echo "I also need a scheduler ID?"           
	read SCD_ID                    
	sed -i "s@^\(id\s*=\s*\)1\$@\1 $SCD_ID@" $APP_CONF_DIR/batch.ini
	rm /etc/httpd/conf.d/my_kaltura.conf||true
	sed -i "1iUser $KALT_USER\nGroup $KALT_GROUP\n" $BASE_DIR/app/configurations/apache/my_kaltura_apiv3.conf
	ln -sf $APP_CONF_DIR/apache/my_kaltura_apiv3.conf /etc/httpd/conf.d/
	/etc/init.d/httpd restart
	/etc/init.d/serviceBatchMgr.sh restart
	if [ "$DB1_HOST" != "localhost" ];then
		/etc/init.d/mysqld stop
		chkconfig mysqld off
	fi
	for i in httpd serviceBatchMgr.sh;do
		chkconfig $i on
	done
	ln -sf $BASE_DIR/crontab/kaltura_batch /etc/cron.d
	echo "Configured `hostname` as a batch instance on `date`">> $MANIFEST_FILE
	echo "batch" >> $ROLE_FILE

}

configure_sphinx()
{

	if [ "$DB1_HOST" != "localhost" ];then
		/etc/init.d/mysqld stop
		chkconfig mysqld off
	fi
	/etc/init.d/sphinx_watch.sh restart
	clear_host_from_scheduler
	chkconfig sphinx_watch.sh on
	ln -sf $BASE_DIR/crontab/kaltura_sphinx /etc/cron.d/ 
	php $BASE_DIR/app/deployment/base/scripts/populateSphinxEntries.php >>$BASE_DIR/log/populateSphinxEntries.log
	echo "Configured `hostname` as a Sphinx instance on `date`">> $MANIFEST_FILE
	echo "Sphinx" >> $ROLE_FILE

}

configure_api()
{
	if [ "$DB1_HOST" != "localhost" ];then
		/etc/init.d/mysqld stop
		chkconfig mysqld off
	fi
	clear_host_from_scheduler
	chkconfig httpd on
	rm /etc/httpd/conf.d/my_kaltura_apiv3.conf 2>/dev/null||true
	sed -i "1iUser $KALT_USER\nGroup $KALT_GROUP\n" $BASE_DIR/app/configurations/apache/my_kaltura.conf
	ln -sf $APP_CONF_DIR/apache/my_kaltura.conf /etc/httpd/conf.d/
	/etc/init.d/httpd restart
	echo "Configured `hostname` as an API instance on `date`">> $MANIFEST_FILE
	echo "API" >> $ROLE_FILE

}
reconfigure_roles()
{
	ROLES="$1"
	echo "Clearing all role assignments.."
	clear_all_roles
	ln -sf $BASE_DIR/crontab/kaltura_rotate /etc/cron.d/
	for ROLE in $ROLES;do
		if [ $ROLE = 1 ];then
			configure_batch
		elif [ $ROLE = 2 ];then
			configure_sphinx
		elif [ $ROLE = 3 ];then  
	                configure_api
		fi
	done
}
DIR_NAME=`dirname $0`
if [ -z "$DIR_NAME" ];then
    DIR_NAME='.'
fi
USER_INI_PATH=$DIR_NAME/user_input.ini
if [ -r "$USER_INI_PATH" ];then
	. "$USER_INI_PATH"
else
	echo "Couldn't read $USER_INI_PATH, make sure its there :("
	exit 1
fi
 
verify_user_input
APP_CONF_DIR="$BASE_DIR/app/configurations"
if [ -n "$BASE_DIR" ];then
	KALT_PREFIX=$BASE_DIR
else
	KALT_PREFIX=/opt/kaltura
fi
