<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" height="40" width="100%"
		 creationComplete="creationCompleteHandler(event)" styleName="pagerTopBox">

	<mx:Metadata>
		
		[Style(name="pagerFirstBtn",type="String")]
		[Style(name="pagerLastBtn",type="String")]
		[Style(name="pagerPrevBtn",type="String")]
		[Style(name="pagerNextBtn",type="String")]
		[Style(name="pagerBtn",type="String")]
		[Style(name="pagerBox",type="String")]
		[Style(name="pagerTopBox",type="String")]
		[Style(name="selectRowsLable",type="String")]
		
		[Event(name="change",type="flash.events.Event")]
		[Event(name="nextPage", type="com.kaltura.events.PagingEvent")]
		[Event(name="prvPage", type="com.kaltura.events.PagingEvent")]
		[Event(name="firstPage", type="com.kaltura.events.PagingEvent")]
		[Event(name="lastPage", type="com.kaltura.events.PagingEvent")]
		[Event(name="getPageNum", type="com.kaltura.events.PagingEvent")]
		[Event(name="rowsInPageChange", type="com.kaltura.events.PagingEvent")]
		
		[ResourceBundle("windows")]
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import com.kaltura.controls.pagingClasses.IPagingBehavior;
			import com.kaltura.controls.pagingClasses.MissingTotalPaging;
			import com.kaltura.controls.pagingClasses.PagingBehaviorEvent;
			import com.kaltura.controls.pagingClasses.PlaceHolderPagingBehavior;
			import com.kaltura.controls.pagingClasses.StandardPaging;
			import com.kaltura.events.PagingEvent;
			import com.kaltura.vo.KalturaFilterPager;
			
			import mx.controls.Button;
			import mx.controls.LinkButton;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.resources.IResourceManager;
			import mx.resources.ResourceManager;

			// locale for end/start button 
			public var prevString:String;

			[Bindable]
			public var rowsComboLabel:String;
			
			[Bindable]
			private var _outOfText:String;
			

			private var _showFirstLast:Boolean = false;

			/**
			 * If the 1st or last items are selected - to show them with enable false or to
			 * hide them
			 */
			public var disableSideButtons:Boolean = false; // TODO implement


			/**
			 * Total items count. The division of _totalCount with _pageSize will output the _totalPageCount
			 */
			protected var _totalCount:int= int.MIN_VALUE + 1;
		
		
			/**
			 * How many pages to show from each side of the selected page.
			 * IE value 2 with selected page 4 will show 2 3 4 5 6, 2 item in each side
			 */
			protected var _sideLinkCount:int = 2;
			
			/**
			 * in case of page 1 and last page, to show only half of the list or full
			 * IE  doubleEnd = true with selected 1 would show 12345 and with false 123
			 */
			public var doubleEnd:Boolean = true;

			[Bindable]
			public var kalturaFilterPager:KalturaFilterPager;
			
			[Bindable]
			public var rowsInPage:Array = [25, 50, 100, 250, 500];
			
			[Bindable]
			public var showRowsInPage:Boolean = true;
			
			public var defaultPageSize:int = 25;
			[Bindable]
			private var _behavior:IPagingBehavior = new PlaceHolderPagingBehavior();


			[Bindable]
			public function get selectedPage():int {
				return _behavior.selectedPage;
			}

			public function set selectedPage(value:int):void {
				_behavior.selectedPage = value;
				onSelectedPageChanged();
			}

			[Bindable]
			/**
			 * the total count of the entries that the pager represent
			 * */
			public function get totalCount():int {
				return _totalCount;
			}

			public function set totalCount(value:int):void {
				if (_totalCount == value)
					return;

				_totalCount = value;
				
				changeBehavior();
	
				updatePaging();
			}
			
			private function changeBehavior():void{
				
				// Saving last behavior properties
				setBehaviorListeners(false);
				var currPage:int = _behavior.selectedPage;
				var currRows:int = _behavior.currRowsInPage;
				var currSize:int = _behavior.pageSize;
				
				// Creating the new behavior according to the circumstances
				if (_totalCount > 0 || currRows == 0){
					_behavior = new StandardPaging(_totalCount, _showFirstLast, doubleEnd, sideLinkCount);
				} else {
					_behavior = new MissingTotalPaging();
				}
				
				// Initializing the behavior with view containers
				_behavior.init(pagingContainer, labelContainer);
				
				// Transferring data from old behavior
				_behavior.selectedPage = currPage;
				_behavior.currRowsInPage = currRows;
				_behavior.pageSize = currSize;
				
				setBehaviorListeners(true);
			}

			private function setBehaviorListeners(doAdd:Boolean):void{
				var selectedAction:String = doAdd ? "addEventListener" : "removeEventListener";
				_behavior[selectedAction](PagingEvent.FIRST_PAGE, onBehaviorPagingEvent);
				_behavior[selectedAction](PagingEvent.GET_PAGE_NUM, onBehaviorPagingEvent);
				_behavior[selectedAction](PagingEvent.LAST_PAGE, onBehaviorPagingEvent);
				_behavior[selectedAction](PagingEvent.NEXT_PAGE, onBehaviorPagingEvent);
				_behavior[selectedAction](PagingEvent.PRV_PAGE, onBehaviorPagingEvent);
				_behavior[selectedAction](PagingEvent.ROWS_IN_PAGE_CHANGE, onBehaviorPagingEvent);
				_behavior[selectedAction](PagingBehaviorEvent.SELECTED_PAGE_CHANGED, onSelectedPageChanged);
			}
			
			private function onSelectedPageChanged(evt:PagingBehaviorEvent = null):void{
				kalturaFilterPager.pageIndex = _behavior.selectedPage;
				updatePaging();
				
				dispatchEvent(new Event(Event.CHANGE));
			}
			
			private function onBehaviorPagingEvent(evt:PagingEvent):void{
				dispatchEvent(evt);
			}

			/**
			 * @copy _pageSize
			 */
			[Bindable]
			public function get pageSize():int {
				return _behavior.pageSize;
			}


			/**
			 * @copy _pageSize
			 */
			public function set pageSize(value:int):void {
				_behavior.pageSize = value;
				kalturaFilterPager.pageSize = value;
				updatePaging();
			}

			/**
			 * @copy _sideLinkCount
			 */
			[Bindable]
			public function get sideLinkCount():int {
				return _sideLinkCount;
			}

			/**
			 * @copy _sideLinkCount
			 */
			public function set sideLinkCount(value:int):void {
				_sideLinkCount = value;
			}

			/**
			 * This is the function that builds the paging UI.
			 */
			protected function updatePaging():void {
				pagingContainer.removeAllChildren();
				labelContainer.removeAllChildren();
				var btn:LinkButton;
				
				_behavior.createPrePrevButtons();
				
				if (_behavior.selectedPage > 1) {
					//add previous button
					btn = new LinkButton();
					btn.label = prevString;
					btn.styleName = "pagerPrevBtn";
					btn.addEventListener(MouseEvent.CLICK, previous);
					pagingContainer.addChild(btn);
				}
				_behavior.createMiddleButtons();
				_behavior.createNextButtons();
				_behavior.createLabelIndicators();
			}


			/**
			 * change the page size - dispatches an event PagingEvent.ROWS_IN_PAGE_CHANGE
			 * @ListEvent
			 */
			protected function resultSizeChange(event:ListEvent = null):void {
				var kmcSO:SharedObject = SharedObject.getLocal("kmcSO");
				pageSize = int(rowInPageCb.selectedItem);
				kmcSO.data.rowInPage = pageSize;
				kmcSO.flush();
				selectedPage = 1;

				//only if not manually executed dispatch it
				if (event)
					dispatchEvent(new PagingEvent(PagingEvent.ROWS_IN_PAGE_CHANGE));
			}

			/**
			 * user clicked on previous button
			 * @mouseEvent
			 */
			public function previous(event:MouseEvent = null):void {
				if (_behavior.selectedPage > 1) {
					selectedPage = _behavior.selectedPage - 1;
					dispatchEvent(new PagingEvent(PagingEvent.PRV_PAGE));
				}
			}

			protected function creationCompleteHandler(event:FlexEvent):void {
				// pager:
				kalturaFilterPager = new KalturaFilterPager();
				kalturaFilterPager.pageIndex = 1;
				kalturaFilterPager.pageSize = pageSize;
				
				// texts:
				prevString = resourceManager.getString('windows', 'prv');
				rowsComboLabel = resourceManager.getString('windows', 'rowsInPage');

				// page size
				var selectedFromSO:Boolean = true;
				var defaultInd:int = 0;
				// if page size selection available, used saved value:
				if (showRowsInPage) {
					var kmcSO:SharedObject = SharedObject.getLocal("kmcSO");
					var soRowInPage:int = kmcSO.data.rowInPage;
					
					if (soRowInPage != rowInPageCb.selectedItem) {
						selectedFromSO = false;
						for (var i:int = 0; i < rowsInPage.length; i++) {
							if (rowsInPage[i] == soRowInPage) {
								rowInPageCb.selectedIndex = i;
								selectedFromSO = true;
								resultSizeChange();
							}
							//will be used in case we have no saved value in the SO
							else if (rowsInPage[i] == defaultPageSize) {
								defaultInd = i;
							}
						}
					}
				}
				if (!selectedFromSO) {
					rowInPageCb.selectedIndex = defaultInd;
					resultSizeChange();
				}
				
			}

			/**
			 * Show the last & first buttons
			 */
			public function get showFirstLast():Boolean
			{
				return _showFirstLast;
			}

			/**
			 * @private
			 */
			public function set showFirstLast(value:Boolean):void
			{
				_showFirstLast = value;
			}
			
			public function set currRowsInPage(value:int):void{
				if (_behavior.currRowsInPage == value){
					return;
				}
				_behavior.currRowsInPage = value;
				
				changeBehavior();
			}
			
			public function get currRowsInPage():int{
				return _behavior.currRowsInPage;
			}

		]]>
	</mx:Script>
	<mx:Spacer width="100%" />
	<mx:HBox id="pagingContainer" height="100%" styleName="pagerBox"/>
	
	<!-- out of -->
	<mx:HBox id="labelContainer" styleName="pagerBox"/>
	<!--<mx:Label text="{_outOfText}" styleName="selectRowsLable"/>-->
	<mx:Spacer width="100%" />
	<!-- rows in page -->
	<mx:HBox visible="{_behavior.visible}" includeInLayout="{_behavior.visible}" verticalAlign="middle" paddingRight="5">
		<mx:Label id="rowInPageLbl" text="{rowsComboLabel}" visible="{showRowsInPage}" styleName="selectRowsLable"/>
		<mx:ComboBox id="rowInPageCb" visible="{showRowsInPage}" includeInLayout="{showRowsInPage}" styleName="boldComboText"
					 dataProvider="{rowsInPage}" rowCount="{rowsInPage.length}" change="{resultSizeChange(event)}"/>
	</mx:HBox>
</mx:HBox>
