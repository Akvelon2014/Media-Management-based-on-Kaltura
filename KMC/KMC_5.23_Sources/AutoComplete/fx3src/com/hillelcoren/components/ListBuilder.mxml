<?xml version="1.0" encoding="utf-8"?>
<mx:HBox
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:components="com.hillelcoren.components.*"
	initialize="init()">
	
	<mx:Metadata>
		[Event("change")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ListCollectionView;
			import com.hillelcoren.utils.StringUtils;
			import com.hillelcoren.utils.ArrayCollectionUtils;
			import mx.events.CollectionEvent;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			import mx.collections.IList;
			import mx.events.DragEvent;
			import mx.collections.ArrayCollection;
			import com.hillelcoren.components.AutoComplete;
			
			[Bindable]
			protected var _dataProvider:ListCollectionView;
			protected var _dataProviderChanged:Boolean;
						
			[Bindable]
			protected var _selectedItems:ArrayCollection; 
			
			protected var _filterFunction:Function;
			
			[Bindable]
			protected var _labelFunction:Function;
			
			[Bindable]
			protected var _labelField:String;
			
			protected var _showOrderButtons:Boolean;
			protected var _showOrderButtonsChanged:Boolean;
			
			protected var _isChanged:Boolean;
			
			protected function init():void
			{
				if (_labelFunction == null)
				{
					labelFunction = defaultLabelFunction;
				}

				if (_filterFunction == null)
				{
					filterFunction = defaultFilterFunction;
				}				
				
				if (_selectedItems == null)
				{
					_selectedItems = new ArrayCollection();
					_selectedItems.addEventListener( CollectionEvent.COLLECTION_CHANGE, handleSelectedItemsChange );
				}
			}
			
			public function set selectedItems( value:Array ):void
			{
				// we're going to copy the data so the user has to click
				// ok for the items to be copied over
				_selectedItems = new ArrayCollection( value.slice() );
				_selectedItems.addEventListener( CollectionEvent.COLLECTION_CHANGE, handleSelectedItemsChange );				
			}
			
			public function set dataProvider( value:ListCollectionView ):void
			{
				_dataProvider = value;
				_dataProviderChanged = true;
				
				invalidateProperties();
			}
			
			[Inspectable(enumeration="false,true")]
			public function set showOrderButtons( value:Boolean ):void
			{
				_showOrderButtons = value;
				_showOrderButtonsChanged = true;
				
				invalidateProperties();
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (_dataProviderChanged)
				{
					_dataProviderChanged = false;
					
					_dataProvider.filterFunction = leftFilterFunctionWrapper;
					_dataProvider.refresh();
				}		
				
				if (_showOrderButtonsChanged)
				{
					_showOrderButtonsChanged = false;
					
					orderingButtons.visible = _showOrderButtons;
					orderingButtons.includeInLayout = _showOrderButtons;
				}										
			}
			
			public function set filterFunction( value:Function ):void
			{
				_filterFunction = value;
			}
			
			public function set labelFunction( value:Function ):void
			{
				_labelFunction = value;
			}
			
			public function set labelField( value:String ):void
			{
				_labelField = value;
			}
			
			[Bindable(event="change")]
			public function get selectedItems():Array
			{
				return _selectedItems.toArray();
			}
			
			public function get isChanged():Boolean
			{
				return _isChanged;
			}
			
			protected function rightFilterFunctionWrapper( item:Object ):Boolean
			{
				return _filterFunction( item, rightTextInput.text );
			}
			
			protected function leftFilterFunctionWrapper( item:Object ):Boolean
			{
				if (_selectedItems.source.indexOf( item ) >= 0 )
				{
					return false;	
				}
				
				return _filterFunction( item, leftTextInput.text ); 
			}
			
			protected function defaultFilterFunction( item:Object, searchStr:String ):Boolean
			{
				if (searchStr.length == 0)
				{
					return true;
				}
				
				var str:String = _labelFunction( item );
				
				return StringUtils.beginsWith( str, searchStr );
			}						
					
			protected function defaultLabelFunction( item:Object ):String
			{
				if (_labelField && item.hasOwnProperty( _labelField ))
				{
					return item[ _labelField ];
				}
				else
				{
					return item.toString();
				}
			}
						
			protected function handleLeftSearchChange():void
			{
				_dataProvider.refresh();
			}
			
			protected function handleRightSearchChange():void
			{
				 _selectedItems.filterFunction = rightFilterFunctionWrapper; 
				 _selectedItems.refresh()
			}
			
			// this will remove any selected items from the list on the left
			protected function handleSelectedItemsChange( event:Event ):void
			{
				_dataProvider.refresh();
				_isChanged = true;
				dispatchEvent( new Event( Event.CHANGE ) );
			}
			
			protected function handleLeftDrop( event:DragEvent ):void
			{
				event.preventDefault();
				event.currentTarget.hideDropFeedback(event);
					
				// this means we're just reordering the list
				// also, check if they're trying to do a move-copy
				if (event.dragInitiator == leftList || event.ctrlKey)
				{
					return;
				}
				
				if (event.dragSource.hasFormat( "items" ))
				{
					var itemsArray:Array = event.dragSource.dataForFormat('items') as Array;
					
					for each (var item:Object in itemsArray)
					{
						var index:uint = _selectedItems.getItemIndex( item );
						
						if (index >= 0)
						{
							_selectedItems.removeItemAt( index );
						}
					}										
				}
				
				rightTextInput.text = null;
				
				_selectedItems.refresh();
				_dataProvider.refresh();
			}
			
			protected function handleRightDrop( event:DragEvent ):void
			{
				// this means we're just reordering the list
				if (event.dragInitiator == rightList)
				{
					return;
				}
				
				event.preventDefault();
				event.currentTarget.hideDropFeedback(event);
				
				// check if they're doing a move-copy
				if (event.ctrlKey)
				{
					return;
				}
				
				if (event.dragSource.hasFormat( "items" ))
				{
					var dropTarget:List = List( event.currentTarget );
					var dropLoc:int = dropTarget.calculateDropIndex(event);
					
					var itemsArray:Array = event.dragSource.dataForFormat('items') as Array;
					
					for each (var item:Object in itemsArray)
					{
						if (event.dragInitiator == rightList)
						{
							_selectedItems.removeItemAt( _selectedItems.getItemIndex( item ) );
						}
						
						IList( dropTarget.dataProvider ).addItemAt( item, dropLoc );											
					}													
				}
				
				leftTextInput.text = null;
				_dataProvider.refresh();
			}
			
			protected function handleAddSelectedClick():void
			{
				for each (var item:Object in leftList.selectedItems)
				{
					_selectedItems.addItemAt( item, 0 );
				}
				
				leftTextInput.text = null;
				
				_dataProvider.refresh();		
			}
	
			protected function handleLeftDoubleClick():void
			{
				handleAddSelectedClick();
			}
	
			protected function handleRightDoubleClick():void
			{
				handleRemoveSelectedClick();
			}
	
			protected function handleRemoveSelectedClick():void
			{
				for each (var item:Object in rightList.selectedItems)
				{
					var index:uint = _selectedItems.getItemIndex( item );
					_selectedItems.removeItemAt( index );
				}
				
				rightTextInput.text = null;
				
				_selectedItems.refresh();
				_dataProvider.refresh();
			}
			
			protected function moveItems( moveTo:String ):void
			{
				var tmp:Array = rightList.selectedItems;
				
				ArrayCollectionUtils.moveItems( _selectedItems, rightList.selectedIndices, moveTo );
				
				rightList.selectedItems = tmp;
			}
			
			public function set browserFields( value:Array ):void
			{
				// do nothing (just here for the IBrowser interface)
			}
			
			public function set allowMultipleSelection( value:Boolean ):void
			{
				// do nothing (just here for the IBrowser interface)
			}

			public function set searchStr( value:String ):void
			{
				// do nothing (just here for the IBrowser interface)
			}
	
		]]>
	</mx:Script>
	
	<mx:VBox width="45%" height="100%">
		<components:PromptTextInput prompt="Filter Items" id="leftTextInput" change="handleLeftSearchChange()" width="100%"/>
		<mx:List id="leftList" dataProvider="{ _dataProvider }" labelFunction="{ _labelFunction }" labelField="{ _labelField }" allowMultipleSelection="true" height="100%" width="100%"
			dragEnabled="true" dropEnabled="true" variableRowHeight="true" dragDrop="handleLeftDrop(event)" doubleClickEnabled="true" doubleClick="handleLeftDoubleClick()"/>				
	</mx:VBox>

	<mx:VBox verticalAlign="middle" height="100%">
		<mx:Button icon="@Embed(source='/com/hillelcoren/assets/icons/right.png')" width="50" click="handleAddSelectedClick()" toolTip="Add Selected"/>
		<mx:Button icon="@Embed(source='/com/hillelcoren/assets/icons/left.png')" width="50" click="handleRemoveSelectedClick()" toolTip="Remove Selected"/> 
		<mx:VBox id="orderingButtons">
			<mx:Spacer height="20"/>
			<mx:Button icon="@Embed(source='/com/hillelcoren/assets/icons/top.png')" width="50" click="{ moveItems( ArrayCollectionUtils.MOVE_TOP ) }" toolTip="Move to top"/>
			<mx:Button icon="@Embed(source='/com/hillelcoren/assets/icons/up.png')" width="50" click="{ moveItems( ArrayCollectionUtils.MOVE_UP ) }" toolTip="Move up"/>
			<mx:Button icon="@Embed(source='/com/hillelcoren/assets/icons/down.png')" width="50" click="{ moveItems( ArrayCollectionUtils.MOVE_DOWN ) }" toolTip="Move down"/>
			<mx:Button icon="@Embed(source='/com/hillelcoren/assets/icons/bottom.png')" width="50" click="{ moveItems( ArrayCollectionUtils.MOVE_BOTTOM ) }" toolTip="Move to bottom"/>	
		</mx:VBox>							
	</mx:VBox>

	<mx:VBox width="45%" height="100%">
		<components:PromptTextInput prompt="Filter Selected" id="rightTextInput" change="handleRightSearchChange()" width="100%"/>
		<mx:List id="rightList" dataProvider="{ _selectedItems }" labelFunction="{ _labelFunction }" labelField="{ _labelField }" allowMultipleSelection="true" height="100%" width="100%"
			dragEnabled="true" dropEnabled="true" dragMoveEnabled="true" variableRowHeight="true" dragDrop="handleRightDrop(event)" doubleClickEnabled="true" doubleClick="handleRightDoubleClick()"/>	
	</mx:VBox>
	
</mx:HBox>
