<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()" show="onShow()" hide="onHide()"
		 xmlns:view="com.kaltura.kmc.modules.analytics.view.*" xmlns:map="com.kaltura.kmc.modules.analytics.view.map.*"
		 xmlns:charts="com.kaltura.kmc.modules.analytics.view.charts.*"
		 xmlns:aggregateBar="com.kaltura.kmc.modules.analytics.view.aggregateBar.*"
		 xmlns:controls="com.kaltura.controls.*" xmlns:components="com.hillelcoren.components.*">

	<mx:Script>
		<![CDATA[
			import com.kaltura.kmc.business.JSGate;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.modules.analytics.control.PageEvent;
			import com.kaltura.kmc.modules.analytics.control.ReportDataEvent;
			import com.kaltura.kmc.modules.analytics.control.ReportEvent;
			import com.kaltura.kmc.modules.analytics.control.StateEvent;
			import com.kaltura.kmc.modules.analytics.model.AnalyticsModelLocator;
			import com.kaltura.kmc.modules.analytics.model.Context;
			import com.kaltura.kmc.modules.analytics.model.reportdata.ReportData;
			import com.kaltura.kmc.modules.analytics.model.reports.ReportDimension;
			import com.kaltura.kmc.modules.analytics.model.types.ScreenTypes;
			import com.kaltura.kmc.modules.analytics.utils.TimeConsts;
			import com.kaltura.kmc.modules.analytics.view.window.PreviewEntryWin;
			import com.kaltura.kmc.modules.analytics.vo.FilterVo;
			import com.kaltura.types.KalturaReportInterval;
			import com.kaltura.vo.KalturaBaseEntry;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.SWFLoader;
			import mx.formatters.NumberFormatter;
			import mx.managers.PopUpManager;
			
			import org.flexunit.internals.namespaces.classInternal;

			public static var kdp:SWFLoader;
			
			public static var pew: PreviewEntryWin;
			
			[Bindable]
			public var context:Context; //to load the kdp you must pass a context
			//////////////////////////////////////////////////////////////////////////////////

			[Bindable]
			public var tableHeaders:Array;
			[Bindable]
			public var dimCbDp:Array;
			[Bindable]
			public var aggregatedHeaders:Array;
			////////////////////////////////////////////////////////

			[Bindable]
			public var reportData:ReportData;
			[Bindable]
			public var reportType:int;
			[Bindable]
			public var screenType:int;
			[Bindable]
			public var backScreenType:int;

			public var helpUrl:String = "reportAndAnalyticsSection4";

			//SHOW & HIDE FLAGS
			[Bindable]
			public var showLineChart:Boolean = true;
			[Bindable]
			public var showColumnChart:Boolean = false;
			[Bindable]
			public var showMap:Boolean = false;
			[Bindable]
			public var showDimention:Boolean = true;
			[Bindable]
			public var showTable:Boolean = true;
			[Bindable]
			public var showKDP:Boolean = false;
			[Bindable]
			public var showMessageTip:Boolean = false;
			
			[Bindable]
			public var addGraphTotals:Boolean = false;
			[Bindable]
			public var addTableTotals:Boolean = false;
			
			/**
			 * Show or Hide the user filter UI
			 * */
			[Bindable] public var filterUsersFlag:Boolean = true;
			
			/**
			 * Show or Hide the application filter UI
			 * */
			[Bindable] public var filterApplicationsFlag:Boolean = true;
			////////////////////////////////////////////////////////

			//LOADING FLAGS
			[Bindable]
			private var _isLoading:Boolean = false;
			
			[Bindable]
			public var showChartSwitch:Boolean = false;
			
			[Bindable]
			public var disablePager:Boolean = false;


			public function set isLoading(value:Boolean):void {
				_isLoading = value;
			}
			[Bindable]
			private var _loadChart:Boolean = false;


			public function set loadChart(value:Boolean):void {
				_loadChart = value;
				_isVisibleLineChart = !value && showLineChart;
				_isVisibleColumnChart = !value && showColumnChart;
			}
			[Bindable]
			private var _loadTotal:Boolean = false;


			public function set loadTotal(value:Boolean):void {
				_loadTotal = value;
				_isVisibleTotal = !value;
			}
			[Bindable]
			private var _loadTable:Boolean = false;


			public function set loadTable(value:Boolean):void {
				_loadTable = value;
				_isVisibleTable = !value && showTable;
			}
			[Bindable]
			private var _loadEntry:Boolean = false;


			public function set loadEntry(value:Boolean):void {
				_loadEntry = value;
				_isVisibleEntry = !value && showKDP
			}
			////////////////////////////////////////////////////////

			//VISIBLE FLAGS
			[Bindable]
			private var _isVisibleTable:Boolean = false;
			[Bindable]
			private var _isVisibleLineChart:Boolean = false;
			[Bindable]
			private var _isVisibleColumnChart:Boolean = false;
			[Bindable]
			private var _isVisibleTotal:Boolean = false;
			[Bindable]
			private var _isVisibleEntry:Boolean = false;
			private var _showFlag:Boolean = false;
			private var _changeWatcher:ChangeWatcher;
			////////////////////////////////////////////////////////
			[Bindable]
			public var showDrillDownNav:Boolean = false;
			[Bindable]
			public var dateOnlyFlag:Boolean = false;
			
			[Bindable]
			public var playbackContextFlag : Boolean = false;
			
			[Bindable]
			public var isDrillDown:Boolean = false;
			[Bindable]
			public var filterVo:FilterVo;
			[Bindable]
			public var orderBy:String;
			[Bindable]
			public var showTimeUnits:Boolean = false;
			[Bindable]
			public var showSearchFilter:Boolean = true;
			[Bindable]
			public var generalBarChartFlag:Boolean = false;
//			[Bindable]
//			public var isDateBarChart:Boolean = false;
			[Bindable]
			public var isMonths:Boolean = false;
			[Bindable]
			public var isOneDay:Boolean = false;
			
			private static var playerLoadedFlag:Boolean = false;
			private static var playerReadyFlag:Boolean = false;

			[Bindable] private var _model:AnalyticsModelLocator = AnalyticsModelLocator.getInstance();


			private function init():void {
				BindingUtils.bindSetter(onReportDataChange, this, "reportData");
				BindingUtils.bindSetter(onFilterChanged, this, "filterVo");
				
				if (dimCbDp == _model.reportDimension.endUserStorage
					|| dimCbDp == _model.reportDimension.publisherStorageNBandwidth){
					dateBarChart.dataFormatFunc = roundUpValue;
					dateBarChart.dataUnits = resourceManager.getString('analytics', 'MB');
					lineChart.dataFormatFunc = roundUpValue;
					lineChart.dataUnits = resourceManager.getString('analytics', 'MB');
				}
				//BindingUtils.bindSetter( onSelectedMediaEntryChange , this.reportData , "selectedMediaEntry" );
			}
			
			
			// For table data tips
			private function roundUpValue(value:Object):String{
				var formatter:NumberFormatter  = new NumberFormatter();
				formatter.thousandsSeparatorTo = ",";
				return formatter.format(Math.ceil(Number(value)));
			}
			
			private function onFilterChanged(vo:FilterVo):void{
				handleTimeUnitChange();
			}
			
			private function handleTimeUnitChange():void{
				isMonths = showTimeUnits ? filterVo.interval == KalturaReportInterval.MONTHS : false;
				isOneDay = (filterVo.toDate.time - filterVo.fromDate.time) <= TimeConsts.DAY;
				
				// QC 3885 - Changing from "Date" to "Month" in the table headers.
				if (tableHeaders && tableHeaders.length > 1){
					if (isMonths && tableHeaders[0] == "date_id"){
						tableHeaders[0] = "month_id";
					} else if (! isMonths && tableHeaders[0] == "month_id"){
						tableHeaders[0] = "date_id";
					}
				}
				
				ktable.headerDataProvider = tableHeaders;
			}

			private function onSelectedMediaEntryChange(selectdEntry:KalturaBaseEntry):void {
				if (reportData && reportData.selectedMediaEntry && reportData.selectedMediaEntry.id) {
					if (showKDP) {
						addKDP();
					}
				}
			}


			/**
			 * triggered when tab is shown.
			 * */
			public function onShow():void {
//				trace(this.id, "onShow");
				// work around that in some case the show called twice
				if (_showFlag)
					return;

				_showFlag = true;
				_changeWatcher = BindingUtils.bindSetter(onSelectedMediaEntryChange, this.reportData, "selectedMediaEntry");
				filter.filterVo = filterVo;
				
				getReports();
			}


			/**
			 * triggered when tab is hidden
			 * */
			public function onHide():void {
				_showFlag = false;
				if (_changeWatcher) {
					_changeWatcher.unwatch();
				}
				// work around to hide the old thumbnail until the kdp is ready
				if (kdp)
					kdp.visible = false;

				// Clean the KDP content if exist
				if (kdp && kdp.content)
					kdp.content["sendNotification"]('cleanMedia');
			}


			private function set3rdLvlSelection():void {
				filter.basicDetails.setStyle('textDecoration', 'underline');
				filter.dropoff.setStyle('textDecoration', 'underline');
				filter.interactions.setStyle('textDecoration', 'underline');
				filter.basicDetails.buttonMode = true;
				filter.dropoff.buttonMode = true;
				filter.interactions.buttonMode = true;

				if (showKDP) {
					if (reportType == ScreenTypes.TOP_CONTENT) {
						filter.basicDetails.setStyle('textDecoration', 'none');
						filter.basicDetails.buttonMode = false;
					}
					else if (reportType == ScreenTypes.CONTENT_DROPOFF) {
						filter.dropoff.setStyle('textDecoration', 'none');
						filter.dropoff.buttonMode = false;
					}
					else if (reportType == ScreenTypes.CONTENT_INTERACTIONS) {
						filter.interactions.setStyle('textDecoration', 'none');
						filter.interactions.buttonMode = false;
					}
				}
			}


			/**
			 * populate screen with the new data
			 * */
			protected function onReportDataChange(rdtc:ReportData):void {
				if (rdtc && this.visible) {
//					populateFilter( rdtc );

					if (showLineChart){
						if (isMonths || isOneDay){
							dateBarChart.dataProvider = rdtc.chartDp;
						} else {
							lineChart.dataProvider = rdtc.chartDp;
						}
					} else if (showColumnChart){
						columnChart.dataProvider = rdtc.chartDp;
					}
					

					if (showTable){
						paging.totalCount = rdtc.totalCount;
						paging.currRowsInPage = rdtc.tableDp ? rdtc.tableDp.length : 0;
						paging.pageSize = rdtc.pager ? rdtc.pager.pageSize : paging.pageSize;
					}

//					if(rdtc.selectedMediaEntry)
//						drillDownObjectName.text = rdtc.selectedMediaEntry.name; 

					//drillDownObjectName.text = rdtc.objectName;

//					// set all the reportData parameters form the current report view:
//					rdtc.title = this.label;
//					rdtc.type = this.reportType;
//					rdtc.totalHeaders = aggregatedHeaders;
//					rdtc.tableHeaders = tableHeaders;
//
//					if (filterVo && filterVo.keywords) {
//						if (filterVo.searchInTags && filterVo.searchInAdminTags)
//							rdtc.filterMessage = resourceManager.getString('analytics', 'filterAllMessage', [filterVo.keywords]);
//						else if (filterVo.searchInTags)
//							rdtc.filterMessage = resourceManager.getString('analytics', 'filterTagsOnlyMessage', [filterVo.keywords]);
//						else if (filterVo.searchInAdminTags)
//							rdtc.filterMessage = resourceManager.getString('analytics', 'filterAdminOnlyMessage', [filterVo.keywords]);
//					}
//					else {
//						rdtc.filterMessage = '';
//					}

					set3rdLvlSelection();

					if (ktable && showTable) {
						ktable.height = 295 + (paging.pageSize - 10) * 27;
					}

				}
			}


			/**
			 * ask for needed reports
			 * */
			private function getReports(event:Event = null):void {
				handleTimeUnitChange();
				
				var reportSetDataEvent:ReportDataEvent = new ReportDataEvent(ReportDataEvent.SET_REPORT_DATA, reportType, screenType,  label, aggregatedHeaders, tableHeaders, paging.pageSize);
				reportSetDataEvent.dispatch();
				
				var reportTotalEvent:ReportEvent = new ReportEvent(ReportEvent.GET_TOTAL, reportType, screenType);
				reportTotalEvent.dispatch();

				if (showTable) {
					var reportTableEvent:ReportEvent = new ReportEvent(ReportEvent.GET_TABLE, reportType , screenType, ktable.orderBy, true, true, true, false, addTableTotals);
					reportTableEvent.dispatch();
				}

				if (showLineChart || showColumnChart) {
					var reportGraphEvent:ReportEvent = new ReportEvent(ReportEvent.GET_GRAPH, reportType, screenType, '', true, true, true, true, false, addGraphTotals);
					reportGraphEvent.dispatch();
				}
				
				if (addGraphTotals || addTableTotals){
					var reportBaseTotalsEvent:ReportEvent = new ReportEvent(ReportEvent.GET_BASE_TOTALS, reportType, screenType);
					reportBaseTotalsEvent.dispatch();
				}
			}


			/**
			 * ask for data for the displayed page
			 * */
			private function onPageChange():void {
				var pageEvent:PageEvent = new PageEvent(PageEvent.PAGE_CHANGE, paging.selectedPage, paging.pageSize, reportType);
				pageEvent.dispatch();
			}



			/**
			 * add KDP to the stage
			 * */
			private function addKDP():void {
				if (!kdp) {
					kdp = new SWFLoader();
					kdp.width = 350;
					kdp.height = 292.6;
					kdp.loaderContext = new LoaderContext(false, new ApplicationDomain(), SecurityDomain.currentDomain);
					kdp.addEventListener(Event.INIT, onKDP3Loaded);
					var kdpUrl:String = context.protocol + context.rootUrl + "/index.php/kwidget/wid/_" + context.partnerId + "/uiconf_id/" + _model.kdpUiConf + "/nowrapper/1/";
					kdp.source = kdpUrl;
					kdp.scaleContent = false;
					kdpSection.addChildAt(kdp, 0);
				}
				else if (!kdpSection.contains(kdp)) {
					kdpSection.addChildAt(kdp, 0);
					kdp.content["sendNotification"]('changeMedia', {entryId: reportData.selectedMediaEntry.id});
				}
				else {
					kdp.content["sendNotification"]('changeMedia', {entryId: reportData.selectedMediaEntry.id});
				}
			}


			/**
			 * show player.
			 * */
			private function showKdp(event:Event):void {
				//we hide it as a workaround to hide the old loaded entry
				kdp.visible = true;
			}


			/**
			 * Kdp loaded
			 */
			private function onKDP3Loaded(event:Event):void {
				kdp.content.addEventListener("kdpReady", showKdp); 
				kdp.content.addEventListener("entryReady", showKdp); 

				var params:Object = new Object();
				params.cdnHost = context.cdnHost;
				params.host = context.hostName;
				params.autoPlay = "false";
				params.loop = "false";
				params.autoRewind = "false";
				params.sourceType = "entryId";
				params.partnerId = context.partnerId;
				params.widgetId = "_" + context.partnerId;
				params.subpId = context.subpId;
				params.uiConfId = _model.kdpUiConf;
				params.ks = context.ks;
				params.entryId = reportData.selectedMediaEntry.id;
				params.allowCookies = true;

				if (context.debugMode)
					params.debugMode = "true";

				// set flashvars
				event.target.content["flashvars"] = params;

				// start the loading sqeunce of the kdp 
				event.target.content["init"]();
			}


			/**
			 * dispatch help event for the KMC.
			 * */
			private function help():void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, helpUrl));
			}
			
			private function changeToColChart():void{
				showColumnChart = true;
				showLineChart = false;
			}
			
			private function changeToLineChart():void{
				showColumnChart = false;
				showLineChart = true;
			}


			//open entry preview
			protected function searchNote_linkHandler(event:TextEvent):void
			{
				pew = new PreviewEntryWin();
				pew.context = _model.context;
				pew.uiconfId = _model.kdpUiConf;
				pew.entry = _model.selectedReportData.selectedMediaEntry;
				
				PopUpManager.addPopUp( pew , this, true );
				PopUpManager.centerPopUp( pew );
				JSGate.maskHeader(false);
			}
			
//			private function get isMonthGraph():Boolean{
//				return showTimeUnits ? filterVo.interval == KalturaReportInterval.MONTHS : false;
//			}
//			
//			[Bindable]
//			private function set isMonthGraph(value:Boolean):void{
//				
//			}
				

		]]>
	</mx:Script>

	<mx:Metadata>
		[Event(name="drillDown",type="flash.events.Event")]
	</mx:Metadata>

	<!-- breadcrumps -->
	<mx:HBox width="100%" horizontalGap="0" visible="{isDrillDown}" includeInLayout="{isDrillDown}">
		<mx:LinkButton label="{this.label}" buttonMode="true"
					   click="{(new StateEvent( StateEvent.STATE_CHANGE, backScreenType )).dispatch(); }"/>
		<mx:Label id="drillDownArrow" text=">>" paddingTop="2"/>
		<mx:Label id="drillDownObjectName" paddingTop="2" text="{_model.drillDownName}"/>
	</mx:HBox>

	<!-- report title -->
	<mx:HBox width="100%">
		<mx:Label id="reportTitle" text="{this.label}" styleName="pageTitle2"/>
	</mx:HBox>
 
	<mx:Spacer height="5"/>

	<!-- report filter -->
	<mx:VBox width="100%" >
		<!-- entry filter -->
		<view:Filter id="filter" filterVo="{filterVo}" width="100%" apply="{getReports(event)}"
					 applicationsList="{_model.applicationsList}" 
					 playbackContextFlag="{playbackContextFlag}"
					 drillDownName="{_model.drillDownName}"
					 filterUsersFlag="{filterUsersFlag}" filterApplicationsFlag="{filterApplicationsFlag}"
					 dateOnlyFlag="{dateOnlyFlag}" objectIds="{reportData.objectIds}" 
					 kc="{_model.kc}" showTimeUnits="{showTimeUnits}" showSearchFilter="{showSearchFilter}"
					 showDrillDownNav="{showDrillDownNav}" isLoading="{_isLoading}"/>
	</mx:VBox>
	
	<!-- chart switch -->
	<mx:HBox width="100%" horizontalAlign="left" includeInLayout="{showChartSwitch}" visible="{showChartSwitch}">
		<mx:Button styleName="barChartIcon" click="changeToColChart()" buttonMode="true" useHandCursor="true" toolTip="Show Bar Chart"/>
		<mx:Button  styleName="lineChartIcon" click="changeToLineChart()" buttonMode="true" useHandCursor="true"  toolTip="Show Line Chart"/>
	</mx:HBox>
	
	<mx:Spacer height="5"/>
	<mx:HRule width="100%"/>
	<mx:Spacer height="5"/>
	
	<!-- graph dimension -->
	<mx:HBox width="100%">
		<view:DimComboBox id="dimCb" width="310" dataProvider="{dimCbDp}" visible="{showDimention}"
						  includeInLayout="{showDimention}"  enabled="{!_isLoading}"/>
		<mx:Spacer width="100%"/>
		<mx:LinkButton label="{resourceManager.getString('analytics','exportToExcel')}"
					   click="{ var reportEvent : ReportEvent = new ReportEvent(ReportEvent.EXPORT_TO_EXCEL , reportType); reportEvent.dispatch();}"
					   enabled="{!_isLoading}"/>
	</mx:HBox>

	<!-- charts -->
	<map:KMap id="kmap" width="100%" visible="{showMap}" includeInLayout="{showMap}"/>

	<charts:KColumnChart id="columnChart" width="100%" enabled="{_isVisibleColumnChart}" visible="{showColumnChart}"
						 includeInLayout="{showColumnChart}" createColumnsFromDp="{generalBarChartFlag}"/>

	<charts:KLineChart id="lineChart" width="100%" enabled="{_isVisibleLineChart}" includeInLayout="{showLineChart &amp;&amp; ! (isOneDay || isMonths)}"
					   visible="{showLineChart &amp;&amp; ! (isOneDay || isMonths)}" minHAxisDate="{filterVo.fromDate}" maxHAxisDate="{filterVo.toDate}"/>
	<charts:KDateColumnChart id="dateBarChart" dimName="{dimCb.selectedItem.label}" width="100%" oneDayDate="{isOneDay &amp;&amp; ! isMonths ? filterVo.fromDate : null}" 
							 includeInLayout="{showLineChart &amp;&amp; (isOneDay || isMonths)}" visible="{showLineChart &amp;&amp; (isOneDay || isMonths)}" />

	<!-- loader -->
	<mx:VBox width="{this.width-150}" height="200" paddingTop="-150" horizontalAlign="center" clipContent="false"
			 includeInLayout="false" visible="{_loadChart}">
		<!-- <view:ProgressPanel title="Loading Chart" isLoading="{_loadChart}" halfSecCycles="50"/> -->
		<mx:SWFLoader source="@Embed(source='assets/loader.swf', symbol='MyLoader')"/>
	</mx:VBox>

	<mx:Spacer height="10"/>
	<mx:HBox width="100%">
		<mx:Text id="searchNote" htmlText="{reportData.message}" link="searchNote_linkHandler(event)" styleName="pageTitle2"/> 
		<mx:Button id="ttBtn" styleName="toolTipHelp" visible="{showMessageTip}" includeInLayout="{showMessageTip}"
				   toolTip="{resourceManager.getString('analytics', 'sinceUserReports')}" />
	</mx:HBox>
	<mx:Text width="100%" height="15" styleName="pageTitle3" text="{reportData.filterMessage}"/>
	<mx:Spacer height="10"/>

	<!-- totals -->
	<mx:Label text="{resourceManager.getString('analytics', 'totalsTitle')}" styleName="pageTitle2" />
	<aggregateBar:AggregateBar id="aggregateBar" width="100%" headerDataProvider="{aggregatedHeaders}"
							   enabled="{_isVisibleTotal}" dataProvider="{reportData.aggregatedDataArrCol}"/>

	<!-- loader -->
	<mx:VBox width="{this.width-150}" paddingTop="-35" horizontalAlign="center" visible="{_loadTotal}"
			 includeInLayout="false" clipContent="false">
		<!-- <view:ProgressPanel title="Loading Total Bar" isLoading="{_loadTotal}" halfSecCycles="30" /> -->
		<mx:SWFLoader source="@Embed(source='assets/loader.swf', symbol='MyLoader')"/>
	</mx:VBox>
	<mx:Spacer height="5"/>


	<mx:HBox id="kdpSection" width="100%" enabled="{_isVisibleEntry}" visible="{showKDP}" includeInLayout="{showKDP}">
		<view:EntryDetails height="292.6" width="100%" styleName="blueBox" data="{reportData.selectedMediaEntry}"/>
	</mx:HBox>
	
	<!-- table -->
	<mx:Label text="{resourceManager.getString('analytics', 'tableTitle')}" styleName="pageTitle2" 
			  includeInLayout="{showTable}" visible="{showTable}"/>
	<view:KTable id="ktable" width="100%" height="295" rowHeight="27" orderBy="{orderBy}" 
				 supportDrillDown="{_model.tableSupportDrillDown}"
				 includeInLayout="{showTable}" visible="{showTable}" headerDataProvider="{tableHeaders}"
				 reportType="{reportType}" reportData="{ reportData }"/> <!-- enabled="{_isVisibleTable}"-->

	<!-- paging -->
	<!--pageSize="{reportData &amp;&amp; reportData.pager ? reportData.pager.pageSize : paging.pageSize}"-->
	<controls:Paging id="paging" width="100%" visible="{showTable &amp;&amp; ! disablePager}" includeInLayout="{showTable &amp;&amp; ! disablePager}"
					 rowsInPageChange="onPageChange()" nextPage="onPageChange()" prvPage="onPageChange()"
					 getPageNum="onPageChange()" showRowsInPage="true" 
					 totalCount="{reportData.totalCount}" currRowsInPage="{reportData.tableDp ? reportData.tableDp.length : 0}" 
					 selectedPage="{reportData.pager.pageIndex}"/>

	<mx:VBox width="{this.width-150}" paddingTop="-130" horizontalAlign="center" includeInLayout="false"
			 visible="{_loadEntry}" clipContent="false">
		<mx:SWFLoader source="@Embed(source='assets/loader.swf', symbol='MyLoader')"/>
		<!-- <view:ProgressPanel title="Loading Entry" isLoading="{_loadEntry}" /> -->
	</mx:VBox>
	<mx:VBox width="{this.width-150}" paddingTop="-130" horizontalAlign="center" includeInLayout="false"
			 visible="{_loadTable}" clipContent="false">
		<mx:SWFLoader source="@Embed(source='assets/loader.swf', symbol='MyLoader')"/>
		<!-- <view:ProgressPanel title="Loading Table" isLoading="{_loadTable}" /> -->
	</mx:VBox>

</mx:VBox>
