<?xml version="1.0" encoding="utf-8"?>
<!---
	 "Manage" part of the content viewstack.
	 lists all entries, allows filtering, preview and drill-down to entry details.
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:controls="com.kaltura.controls.*"
		 implements="com.kaltura.kmc.modules.content.business.IContentPanel,com.kaltura.edw.business.IDataOwner"
		 creationComplete="creationCompleteHandler(event)" 
		 xmlns:view="com.kaltura.kmc.modules.content.view.*"
		 xmlns:business="com.kaltura.kmc.modules.content.business.*"
		 xmlns:et="com.kaltura.edw.components.et.*" 
		 xmlns:fltr="com.kaltura.edw.components.fltr.*" 
		 xmlns:indicators="com.kaltura.edw.components.fltr.indicators.*" 
		 xmlns:bulkactions="com.kaltura.kmc.modules.content.view.controls.bulkactions.*">

	<mx:Script>
		<![CDATA[
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.components.et.EntryTableColumns;
			import com.kaltura.edw.control.KedController;
			import com.kaltura.edw.control.events.KedEntryEvent;
			import com.kaltura.edw.control.events.LoadEvent;
			import com.kaltura.edw.model.FilterModel;
			import com.kaltura.edw.model.datapacks.ContextDataPack;
			import com.kaltura.edw.model.datapacks.DistributionDataPack;
			import com.kaltura.edw.model.datapacks.EntryDataPack;
			import com.kaltura.edw.model.types.WindowsStates;
			import com.kaltura.edw.vo.ListableVo;
			import com.kaltura.events.FileUploadEvent;
			import com.kaltura.kmc.modules.content.events.CategoryEvent;
			import com.kaltura.kmc.modules.content.events.EntriesEvent;
			import com.kaltura.kmc.modules.content.events.KMCSearchEvent;
			import com.kaltura.kmc.modules.content.events.PartnerEvent;
			import com.kaltura.kmc.modules.content.events.SelectionEvent;
			import com.kaltura.kmc.modules.content.events.SetListableEvent;
			import com.kaltura.kmc.modules.content.events.SetPlaylistTypeEvent;
			import com.kaltura.kmc.modules.content.events.WindowEvent;
			import com.kaltura.kmvc.control.KMvCEvent;
			import com.kaltura.kmvc.model.KMvCModel;
			import com.kaltura.managers.FileUploadManager;
			import com.kaltura.types.KalturaMediaEntryOrderBy;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.vo.KalturaBaseEntryFilter;
			import com.kaltura.vo.KalturaMediaEntryFilter;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;

			[Bindable]
			/**
			 * show embed option in "publish" column
			 * */
			public var showEmbed:Boolean = true;


			[Bindable]
			private var _listableVo:ListableVo;

			/**
			 * data ordering
			 * */
			private var _orderBy:String = KalturaMediaEntryOrderBy.CREATED_AT_DESC;

			[Bindable]
			/**
			 * filtering data
			 * */
			public var filterModel:FilterModel;

			[Bindable]
			/**
			 * entries-related data
			 * */
			public var entryDetailsModel:KMvCModel;

			/**
			 * current window state
			 * */
			public var windowState:String;


			public function onRequestedDataLoaded():void {
				loadEntries();
			}


			/**
			 * initialize the panel.
			 * @param initFilter	filter for initial entry loading.
			 * */
			public function init(initFilter:KalturaBaseEntryFilter = null):void {
				paging.selectedPage = 1;
				paging.pageSize = paging.rowInPageCb.value as int;
				
				if (initFilter && initFilter is KalturaMediaEntryFilter) {
					filter.kalturaFilter = initFilter as KalturaMediaEntryFilter;
				}
				
				//When one click on switch tab and get back if the accordion filter is not the first child 
				//everything looked curapted. This will resolve the issue when one swith tabs
				/////////////////////////////////////////////////////////////////////////////////
				if(filter && filter.accordion)
					filter.accordion.selectedIndex = 0;
				/////////////////////////////////////////////////////////////////////////////////
				
				// load all the data the filter needs
				var fe:LoadEvent = new LoadEvent(LoadEvent.LOAD_FILTER_DATA, this, filterModel);
				KedController.getInstance().dispatch(fe);

				// get partner info
				var getPartnerInfoEvent:PartnerEvent = new PartnerEvent(PartnerEvent.GET_PARTNER_INFO);
				getPartnerInfoEvent.dispatch();

			}



			public function loadEntries():void {
				if (!searchBox.validateSearchText(true)) {
					return;
				}

				_listableVo = new ListableVo(filter.kalturaFilter, paging, null);
				// set the order-by to the filter
				if (_orderBy) {
					_listableVo.filterVo.orderBy = _orderBy;
				}
				var cgEvent:CairngormEvent = new SetListableEvent(SetListableEvent.SET_NEW_LIST_TO_MODEL, _listableVo);
				cgEvent.dispatch();
				cgEvent = new KMCSearchEvent(KMCSearchEvent.DO_SEARCH_ENTRIES, _listableVo);
				cgEvent.dispatch();
			}




			private function removeColums(event:Event):void {
				var ar:Array = [EntryTableColumns.THUMBNAIL, EntryTableColumns.ID, EntryTableColumns.NAME, 
					EntryTableColumns.MEDIA_TYPE, EntryTableColumns.PLAYS, EntryTableColumns.CREATE_AT,
					EntryTableColumns.DURATION, EntryTableColumns.STATUS, EntryTableColumns.ACTIONS];
				entryTable.showColumns(ar);
				// we always remove the thumbnail column, RnP will add it if required

				entryTable.updateDefaultSortColumn();
			}


			/**
			 * This is a new search called by an action on the filter vo
			 */
			private function newSearchFromFilter():void {
				paging.selectedPage = 1;
				loadEntries();
			}



			/**
			 * Create a new manual based playlist based on current selection
			 */
			private function onNewManualPlaylist():void {

				if (entryTable.selectedItems.length == 0) {
					Alert.show(resourceManager.getString('cms', 'pleaseSelectEntriesFirst'));
					return;
				}
				var kEvent:KMvCEvent = new KedEntryEvent(KedEntryEvent.SET_SELECTED_ENTRY, null);
				KedController.getInstance().dispatch(kEvent);

				// add the selected items to the model 
				var cgEvent:CairngormEvent = new EntriesEvent(EntriesEvent.SET_SELECTED_ENTRIES,
					new ArrayCollection(entryTable.selectedItems));
				cgEvent.dispatch();

				//tell the model that this is not a regular playlist - but a playlist with pre-defined entries
				var cgEvent2:CairngormEvent = new SetPlaylistTypeEvent(SetPlaylistTypeEvent.MANUAL_PLAYLIST);
				cgEvent2.dispatch();

				//open a new manual playlist window to edit this 
				cgEvent2 = new WindowEvent(WindowEvent.OPEN, WindowsStates.PLAYLIST_MANUAL_WINDOW);
				cgEvent2.dispatch();

			}

			/**
			 * Create a new category based on current entries selection
			 */
			private function onNewCategory():void {

				if (entryTable.selectedItems.length == 0) {
					Alert.show(resourceManager.getString('cms', 'pleaseSelectEntriesFirst'));
					return;
				}
				
				var cgEvent:CairngormEvent = new EntriesEvent(EntriesEvent.SET_SELECTED_ENTRIES_FOR_CATEGORY);
				cgEvent.dispatch();
				
				cgEvent = new CategoryEvent(CategoryEvent.SET_SELECTED_CATEGORY);
				cgEvent.data = Categories.createCategoryObject();
				cgEvent.dispatch();
				
				cgEvent = new WindowEvent(WindowEvent.OPEN, WindowsStates.CATEGORY_DETAILS_WINDOW);
				cgEvent.dispatch();

			}



			/**
			 * Entry table dispatched an order-by changing
			 */
			private function onOrderByChanged():void {
				_orderBy = entryTable.orderBy;
				loadEntries();
			}


			private function changeRows():void {
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.GO_TO_PAGE, GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE,
					"content>Show Rows");
				loadEntries();
			}


			private function nxtPage():void {
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.NEXT_PAGE, GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE,
					"content>NextPage/Page" + paging.selectedPage);
				loadEntries();
			}


			private function prvPage():void {
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.PREV_PAGE, GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE,
					"content>PrevPage/Page" + paging.selectedPage);
				loadEntries();
			}


			private function gotoPageNum():void {
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.GO_TO_PAGE_NUM, GoogleAnalyticsConsts.CONTENT);
				KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_CONTENT_GO_TO_PAGE,
					"content>GoToPage/Page" + paging.selectedPage);
				loadEntries();
			}


			protected function creationCompleteHandler(event:FlexEvent):void {
				PermissionManager.getInstance().applyAllAttributes(this, this.id);
				FileUploadManager.getInstance().addEventListener(FileUploadEvent.GROUP_UPLOAD_STARTED, onGroupUploadStarted);
			}


			/**
			 * if a replacement process begun, refresh the entries to be updated
			 * */
			private function onGroupUploadStarted(event:Event):void {
				//refresh only when entryDetailsWin is closed, to avoid null selected entry
				if ((windowState == WindowsStates.REPLACEMENT_ENTRY_DETAILS_WINDOW) || (windowState == WindowsStates.ENTRY_DETAILS_WINDOW_NEW_ENTRY) || (windowState == WindowsStates.ENTRY_DETAILS_WINDOW_CLOSED_ONE) || (windowState == WindowsStates.ENTRY_DETAILS_WINDOW)) {
					//refresh the open entry
					var edp:EntryDataPack = entryDetailsModel.getDataPack(EntryDataPack) as EntryDataPack;
					var getSelectedEntry:KedEntryEvent = new KedEntryEvent(KedEntryEvent.UPDATE_SELECTED_ENTRY_REPLACEMENT_STATUS, null, edp.selectedEntry.id);
					KedController.getInstance().dispatch(getSelectedEntry);
				}
				else
					loadEntries();
			}

		]]>
	</mx:Script>
	<business:EntryTableActionsManager id="actionsManager" />
	<mx:HBox width="100%" verticalAlign="middle">
		<mx:Label id="pageLabel" text="{resourceManager.getString('cms', 'entriesTitle')}" styleName="filterTitleHeader" 
				  width="{filter.width}"/>
		<fltr:FreeTextSearch id="searchBox" styleName="searchHBox" width="{245}" height="{pageLabel.height}"
							 attribute="freeText" defaultText="{resourceManager.getString('filter', 'searchEntries')}"/>
		<indicators:Indicators id="indicators" width="100%" height="60"
							   dataProvider="{filter.indicators}"
							   boxClicked="filter.removeFilter(event.data)"/>
		<mx:VBox styleName="noPadding">
			<mx:LinkButton click="loadEntries()" label="{resourceManager.getString('cms','refresh')}"
						   styleName="recycleIcon"/>
			<mx:Label text="{resourceManager.getString('filter', 'indicatorsLabel', [indicators.numExceeded])}" 
					  visible="{indicators.numExceeded > 0}" styleName="indicatorsLabel"/>
		</mx:VBox>
			
	</mx:HBox>
	<!--<mx:Spacer height="15" />-->
	<mx:HDividedBox id="topContainer" width="100%" height="100%">
		<fltr:EntriesFilter id="filter" height="100%" width="245" 
							freeTextSearch="{searchBox}" metadataProfiles="{filterModel.metadataProfiles}"
							context="{entryDetailsModel.getDataPack(ContextDataPack) as ContextDataPack}"
							distributionProfiles="{entryDetailsModel.getDataPack(DistributionDataPack)['distributionInfo'].distributionProfiles}"
							filterModel="{filterModel}" categoriesTreeSelectionAttribute="selectedEntriesScreen"
							categoriesRoot="{filterModel.categoriesForEntries}" allCategories="{filterModel.categoriesMapForEntries}"
							filterChanged="newSearchFromFilter()"/>

		<mx:VBox id="entryTableContainer" height="100%" width="100%" styleName="entriesTablePagerAndButtonsVbox">
			<et:EntryTable id="entryTable" width="100%" height="100%"
						   selectionChanged="actionsManager.itemClickHandler(event)"
						   showDetails="actionsManager.showEntryDetailsHandler(event)" 
						   openPreview="actionsManager.preview(event)"
						   deleteEntry="actionsManager.deleteEntries(event)"
						   dataProvider="{_listableVo.arrayCollection}" 
						   creationComplete="removeColums(event)"
						   selectedEntry="{(entryDetailsModel.getDataPack(EntryDataPack) as EntryDataPack).selectedEntry}"
						   showEmbed="{showEmbed}" orderByChanged="{onOrderByChanged()}"/>

			<mx:HBox width="100%" styleName="noPadding" horizontalGap="0">
				
				<bulkactions:BulkEntryActionsMenu id="bulkActions" height="{paging.height}"
											 createNewManualPlaylist="onNewManualPlaylist()"
											 createNewCategory="onNewCategory()"/>
				
				<controls:Paging id="paging" width="100%" styleName="paging"
								 rowsInPageChange="changeRows()" nextPage="{nxtPage()}" prvPage="{prvPage()}"
								 getPageNum="gotoPageNum()" showRowsInPage="true" defaultPageSize="50"/>
			</mx:HBox>
		</mx:VBox>
	</mx:HDividedBox>
</mx:VBox>
