<?xml version="1.0" encoding="utf-8"?>
<mx:DataGrid xmlns:mx="http://www.adobe.com/2006/mxml" height="100%" verticalScrollPolicy="auto"
			 allowMultipleSelection="true" rowHeight="36" dropEnabled="true" dragMoveEnabled="false"
			 itemClick="setSelection(event);" creationComplete="creationCompleteHandler(event)"
			 xmlns:renderers="com.kaltura.kmc.modules.admin.view.renderers.*">
	<mx:Metadata>
		[Event(name="drillDown", type="flash.events.Event")] 
		[Event(name="deleteUser", type="flash.events.Event")] 
		[Event(name="toggleBlock", type="flash.events.Event")] 
		[Event(name="selectUser", type="flash.events.Event")] 
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import com.kaltura.kmc.events.KmcEvent;
			import com.kaltura.types.KalturaUserStatus;
			import com.kaltura.vo.KalturaUser;
			import com.kaltura.vo.KalturaUserRole;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.ComboBox;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.resources.ResourceManager;

			// ==================================================================
			// constants
			// ==================================================================

			/**
			 * defines the value of the type property for the <code>drillDown</code> event.
			 * */
			public static const DRILL_DOWN:String = "drillDown";

			/**
			 * defines the value of the type property for the <code>delete</code> event.
			 * */
			public static const DELETE_USER:String = "deleteUser";

			/**
			 * defines the value of the type property for the <code>toggleBlock</code> event.
			 * */
			public static const TOGGLE_BLOCK:String = "toggleBlock";

			/**
			 * defines the value of the type property for the <code>selectUser</code> event.
			 * */
			public static const SELECT_USER:String = "selectUser";
			
			

			// ==================================================================
			// members
			// ==================================================================
			
			[Bindable]
			/**
			 * dataprovider for the combobox 
			 */
			public var comboDataProvider:ArrayCollection;
			
			[Bindable]
			/**
			 * dp for current user and account administrator, only "edit" action.
			 * */
			private var crippledComboDataProvider:ArrayCollection;
			
			[ArrayElementType("String")]
			private var _crippledUsersIds:Array;
			
			
			
			[ArrayElementType("KalturaUserRole")]
			/**
			 * @copy #roles
			 * */
			private var _roles:ArrayCollection;
			
			[Bindable]
			public var enableActionDropdown : Boolean = true;
			
			
			// ==================================================================
			// methods
			// ==================================================================

			override public function set dataProvider(value:Object):void {
				var ac:ArrayCollection = value as ArrayCollection;
				for each (var o:Object in ac) {
					// add the "enabled" property
					o.enableActionDropdown = enableActionDropdown;
					// add the actions arrays
					o.comboDataProvider = comboDataProvider;
					o.crippledComboDataProvider = crippledComboDataProvider;
					// add the crippled users ids
					o.crippledUsersIds = crippledUsersIds;
				}
				
				super.dataProvider = value;
			}

			/**
			 * selection or deselection was made
			 */
			public function setSelection(event:ListEvent):void {
				if (event.itemRenderer.data) {
					dispatchEvent(new Event(UsersTable.SELECT_USER));
				}
			}


			/**
			 * open the entry drilldown popup
			 * */
			private function editEntry():void {
				dispatchEvent(new Event(UsersTable.DRILL_DOWN));
			}


			/**
			 * show delete confirmation box
			 * */
			private function confirmDelete():void {
				Alert.show(ResourceManager.getInstance().getString('admin', 'confirm_delete', [selectedUser.fullName]), ResourceManager.getInstance().getString('admin', 'confirm_delete_title'), Alert.OK | Alert.CANCEL, null, deleteEntry);

			}


			/**
			 * delete the selected entry
			 * */
			private function deleteEntry(e:CloseEvent):void {
				if (e.detail == Alert.OK) {
					// request to delete the entry
					dispatchEvent(new Event(UsersTable.DELETE_USER));
				}
			}


			/**
			 * show block toggle confirmation box
			 * */
			private function confirmBlock():void {
				var key:String = "confirm_unblock";
				if ((selectedItem as KalturaUser).status == KalturaUserStatus.ACTIVE) {
					key = "confirm_block";
				}
				Alert.show(ResourceManager.getInstance().getString('admin', key, [selectedUser.fullName]), ResourceManager.getInstance().getString('admin', key + '_title'), Alert.OK | Alert.CANCEL, null, toggleBlockEntry);
			}


			/**
			 * toggle block / unblock on the selected entry
			 * */
			private function toggleBlockEntry(e:CloseEvent):void {
				if (e.detail == Alert.OK) {
					// request to toggle user block status
					dispatchEvent(new Event(UsersTable.TOGGLE_BLOCK));
				}
			}
			
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				comboDataProvider = new ArrayCollection();
				//build the dataprovider items list :
				comboDataProvider.addItem({label:resourceManager.getString('admin','edit'),id:'edit'});
				comboDataProvider.addItem({label:resourceManager.getString('admin','un_block'),id:'unblock'});
				comboDataProvider.addItem({label:resourceManager.getString('admin','delete'),id:'delete'});
				
				crippledComboDataProvider = new ArrayCollection();
				crippledComboDataProvider.addItem({label:resourceManager.getString('admin','edit'),id:'edit'});
				addEventListener("actionSelected", onActionSelected, false, 0, true);
			}


			// ==================================================================
			// item-renderer functions
			// ==================================================================

			public function getActionsDP(data:Object):ArrayCollection {
				var res:ArrayCollection;
				var usr:KalturaUser = data as KalturaUser;
				for each (var uid:String in crippledUsersIds) {
					if (uid == usr.id) {
						res = crippledComboDataProvider;
						break;
					}
				} 
				if (!res) {
					res = comboDataProvider;
				}
				return res;
			}
			

			/**
			 * Remove single item from the combobox dataprovider by its id
			 * @param id	the name of the id to remove 
			 */
			private function removeItemById(id:String):void
			{
				//find the index of the item
				for (var i:uint=0;i<comboDataProvider.length;i++)
				{
					if(comboDataProvider.getItemAt(i).id == id)
						break;
				}
				//protect from an ID it did not find - check if this is the last item 
				// and if it has not the same id  
				if(i==comboDataProvider.length && comboDataProvider.getItemAt(i-1) != id )
					return;
				//remove the item
				comboDataProvider.removeItemAt(i); 
				if (comboDataProvider.length == 0)
				{
					enableActionDropdown = false;
				}
			}

			/**
			 * perform selected action on selected entry
			 * */
			public function onActionSelected(event:KmcEvent):void {
				switch (event.data) {
					case 'edit':
						editEntry();
						break;
					case 'unblock':
						confirmBlock();
						break;
					case 'delete':
						confirmDelete();
						break;
				}
			}
			
			// ==================================================================
			// getters / setters
			// ==================================================================

			public function get selectedUser():KalturaUser {
				return selectedItem as KalturaUser;
			}
			
			/**
			 * Hide the Edit action from the data provider. 
			 * @param value
			 */
			public function set enableEdit(value:Boolean):void
			{
				removeItemById('edit');
			}
			/**
			 * @private 
			 * PermissionsManager has to read the value to know the attribute type
			 */
			public function get enableEdit():Boolean 
			{
				return true;
			}
			/**
			 * Hide the Block/Unblock action from the data provider. 
			 * @param value
			 */
			public function set enableBlock(value:Boolean):void
			{
				removeItemById('unblock');
			}
			/**
			 * @private 
			 * PermissionsManager has to read the value to know the attribute type
			 */
			public function get enableBlock():Boolean
			{
				return true;
			}
			
			/**
			 * Hide the Delete action from the data provider. 
			 * @param value
			 */
			public function set enableDelete(value:Boolean):void
			{
				removeItemById('delete');
			}
			/**
			 * @private 
			 * PermissionsManager has to read the value to know the attribute type
			 */
			public function get enableDelete():Boolean
			{
				return true;
			}

			/**
			 * list of all the roles associated with the current partner
			 * (KalturaUserRole objects)
			 * */
			public function set roles(value:ArrayCollection):void {
				_roles = value;
				dataProvider = dataProvider;
			}
			
			/**
			 * translate role id to role name
			 * */
			public function getUserRole(item:Object):String {
				if (!_roles) return '';
				// need to scan all partner's roles list and get the correct one.
				for (var i:int = 0; i<_roles.length; i++) {
					if ((_roles.getItemAt(i) as KalturaUserRole).id == item.roleIds) {
						return (_roles.getItemAt(i) as KalturaUserRole).name;
					}
				}
				return item.roleIds;
			}

			/**
			 * ids of users who should get the cripled actions DP
			 * */
			public function get crippledUsersIds():Array
			{
				return _crippledUsersIds;
			}

			/**
			 * @private
			 */
			public function set crippledUsersIds(value:Array):void
			{
				_crippledUsersIds = value;
				// re-trigger the itemrenderers' data setter,  
				// so the list will actually be used
				if (dataProvider) {
					(dataProvider as ArrayCollection).refresh();
					dataProvider = dataProvider;
				}
			}


		]]>
	</mx:Script>

	<mx:columns>
		<mx:DataGridColumn itemRenderer="com.kaltura.kmc.modules.admin.view.renderers.UserStatusItemRenderer"
						   dataField="status" width="55"
						   headerText="{resourceManager.getString('admin', 'user_status')}"
						   headerStyleName="adminTableColumn" />
		<mx:DataGridColumn itemRenderer="com.kaltura.kmc.modules.admin.view.renderers.UserNameItemRenderer" dataField="fullName"
						   headerText="{resourceManager.getString('admin', 'user_name')}"
						   headerStyleName="adminTableColumn"/>
		<mx:DataGridColumn itemRenderer="com.kaltura.kmc.modules.admin.view.renderers.UserIdItemRenderer" dataField="id"
						   headerText="{resourceManager.getString('admin', 'id')}"
						   headerStyleName="adminTableColumn"/>
		<mx:DataGridColumn itemRenderer="com.kaltura.kmc.modules.admin.view.renderers.UserEmailItemRenderer" dataField="email"
						   headerText="{resourceManager.getString('admin', 'user_email')}"
						   headerStyleName="adminTableColumn"/>
		<mx:DataGridColumn dataField="roleIds"
						   headerText="{resourceManager.getString('admin', 'role')}"
						   headerStyleName="adminTableColumn">
			<mx:itemRenderer>
				<mx:Component>
					<renderers:UserBaseItemRenderer width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
						<mx:Label text="{outerDocument.getUserRole(data)}" toolTip="{outerDocument.getUserRole(data)}"/>
					</renderers:UserBaseItemRenderer>
				</mx:Component>
			</mx:itemRenderer>
		</mx:DataGridColumn>
		<mx:DataGridColumn itemRenderer="com.kaltura.kmc.modules.admin.view.renderers.UserLastLoginItemRenderer" dataField="lastLoginTime"
						   headerText="{resourceManager.getString('admin', 'user_last_login')}"
						   headerStyleName="adminTableColumn"/>
		<mx:DataGridColumn headerText="{resourceManager.getString('admin', 'user_actions')}"
						   headerStyleName="adminTableCenteredColumn" width="140"
						   itemRenderer="com.kaltura.kmc.modules.admin.view.renderers.UserActionItemRenderer" >
		</mx:DataGridColumn>
	</mx:columns>
</mx:DataGrid>
