<?xml version="1.0" encoding="utf-8"?>
<containers:HelpTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:containers="com.kaltura.containers.*"
							width="594" height="514" help="{onHelp()}" showCloseButton="true" close="closeHandler(event)"
							creationComplete="creationCompleteHandler(event)" enabled="{!isLoading}">
	<mx:Metadata>
		[Event(name="udd_save", type="flash.events.Event")] 
		[Event(name="udd_close", type="flash.events.Event")] 
		[Event(name="udd_addRole", type="flash.events.Event")] 
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.modules.admin.model.DrilldownMode;
			import com.kaltura.utils.ObjectUtil;
			import com.kaltura.vo.KalturaUser;
			import com.kaltura.vo.KalturaUserRole;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.resources.ResourceManager;
			import mx.validators.ValidationResult;


			
			private var _isLoading:Boolean;
			/**
			 * value of the type property for the <code>udd_save</code> event
			 * */
			public static const SAVE:String = "udd_save";

			/**
			 * value of the type property for the <code>udd_close</code> event
			 * */
			public static const CLOSE:String = "udd_close";

			/**
			 * value of the type property for the <code>udd_addRole</code> event
			 * */
			public static const ADD_ROLE:String = "udd_addRole";


			private const _lblWidth:int = 120;

			/**
			 * creationComplete event occured in the past?
			 * */
			private var _ready:Boolean;

			/**
			 * this is the original user entry. after being set it is not touched.
			 * all changes are being made on <code>_undoUser</code>, which is a
			 * copy of this object.
			 * */
			private var _user:KalturaUser;

			[Bindable]
			/**
			 * make changes to this user, so we can revert easily.
			 * */
			private var _undoUser:KalturaUser;

			/**
			 * @copy #mode
			 * */
			private var _mode:String = DrilldownMode.ADD;

			[Bindable]
			/**
			 * list of partner roles
			 * */
			protected var _roles:ArrayCollection;
			
			
			/**
			 * whether the user's role can be chagned
			 * */
			protected var _allowSetRole:Boolean;
			

			/**
			 * a flag indicating the puser_id was defined automatically.
			 * if false, puser_id was defined by user.
			 * this flag is only relevant when creating new users.
			 * */
			protected var _isAutoPuserId:Boolean;

			[Bindable]
			public function get isLoading():Boolean
			{
				return _isLoading;
			}

			public function set isLoading(value:Boolean):void
			{
				_isLoading = value;
			}

			/**
			 * pass initial data.
			 * since setting a role for edit requires roles
			 * data to be set first, we use this method.
			 * @param roles	optional roles 
			 * @param user	the user to edit
			 * @param mode	add / edit
			 * @param allowSetRole	if the user's role can be chagned
			 * */
			public function init(roles:ArrayCollection, user:KalturaUser, mode:String, allowSetRole:Boolean):void {
				_roles = roles;
				_allowSetRole = allowSetRole;
				// the following intentionaly use setters. 
				setUser(user);
				setMode(mode);
			}


			/**
			 * dispatch help event with relevant anchor
			 * */
			private function onHelp():void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, 'section_user_drilldown'));
			}


			/**
			 * open "new role" window
			 * */
			protected function openRoleWindow():void {
				dispatchEvent(new Event(UserDrilldown.ADD_ROLE));
			}


			/**
			 * update <code>_undoUser</code> with data from the form
			 * */
			protected function setUserDataFromForm(event:MouseEvent):void {
				if (_mode == DrilldownMode.ADD) {
					// also update first part
					_undoUser.email = emailTi.text;
					_undoUser.firstName = firstNameTi.text;
					_undoUser.lastName = lastNameTi.text;
					
					// if there is value in puserid TF
					if (idTi.text) {
						// if this value was auto generated, update it
						if (_isAutoPuserId) {
							_undoUser.id = emailTi.text;
						}
						// other use existing value
						else {
							_undoUser.id = idTi.text;		
						}
					}
					// if no value in puserid TF, use login mail
					else {
						_isAutoPuserId = true;
						_undoUser.id = emailTi.text;
					}
				}
				else {
					// update mode
					if (idTi.text) {
						_undoUser.id = idTi.text;		
					}
					else {
						_undoUser.id = emailTi.text;
					}
				}
//				if (idTi.text && !_isUserDefinedPuserId) {
//					_isUserDefinedPuserId = true;
//					_undoUser.id = idTi.text;
//				}
//				else {
//					_undoUser.id = emailTi.text;
//				}
				_undoUser.roleIds = (roleCb.selectedItem as KalturaUserRole).id.toString();
				
				if (validateInput()) {
					requestSave();
				}
			}
			
			/**
			 * validate required fields
			 * */
			protected function validateInput():Boolean {
				var isOk:Boolean = true;
				// email
				validator.source = emailTi;
				var vre:ValidationResultEvent = validator.validate();
				if (vre.results != null && vre.results.length > 0) {
					isOk = !(vre.results[0] as ValidationResult).isError;
				}
				// first name
				validator.source = firstNameTi;
				vre = validator.validate();
				if (vre.results != null && vre.results.length > 0) {
					isOk &&= !(vre.results[0] as ValidationResult).isError;
				}
				// last name
				validator.source = lastNameTi;
				vre = validator.validate();
				if (vre.results != null && vre.results.length > 0) {
					isOk &&= !(vre.results[0] as ValidationResult).isError;
				}
				// puserid
				
				
				
				return isOk;
			}


			/**
			 * check if any updates were made.
			 * if so, ask to save new data.
			 * */
			protected function requestSave():void {
				var needSave:Boolean = !ObjectUtil.compareObjects(_user, _undoUser);
				if (needSave) {
					dispatchEvent(new Event(UserDrilldown.SAVE));
				}
				else {
					requestClose();
				}
			}


			/**
			 * dispatch close event
			 * */
			protected function requestClose():void {
				dispatchEvent(new Event(UserDrilldown.CLOSE));
			}


			/**
			 * "x" botton clicked, confirm no changes and close.
			 * */
			protected function closeHandler(event:Event):void {
				var needSave:Boolean = !ObjectUtil.compareObjects(_user, _undoUser);
				if (needSave) {
					Alert.show(ResourceManager.getInstance().getString('admin', 'discard_changes'), ResourceManager.getInstance().getString('admin', 'discard_changes_title'), Alert.YES | Alert.NO, null, messageReleaseHandler);
				}
				else {
					requestClose();
				}
			}


			protected function creationCompleteHandler(event:FlexEvent):void {
				_ready = true;
				// re-trigger the mode setter
				setMode(_mode);
				if (_mode == DrilldownMode.ADD) {
					PermissionManager.getInstance().applyAllAttributes(this, "userDrilldown_add");
				}
				else {
					PermissionManager.getInstance().applyAllAttributes(this, "userDrilldown_edit");
				}
			}


			/**
			 * close window and discard changes or leave window open
			 * */
			protected function messageReleaseHandler(e:CloseEvent):void {
				if (e.detail == Alert.YES) {
					requestClose();
				}
			}


			/**
			 * get the item matching the user's roleId
			 * */
			protected function findSelectedRole():KalturaUserRole {
				var lst:Array = _roles.source;
				var res:KalturaUserRole;
				for (var i:int = 0; i < lst.length; i++) {
					if ((lst[i] as KalturaUserRole).id.toString() == _undoUser.roleIds) {
						res = (lst[i] as KalturaUserRole);
						break;
					}
				}
				return res;
			}


			/**
			 * set role for the curerent user. if the requested role isn't
			 * found in the roles list, the previous role is restored.
			 * @param roleId	id of desired role.
			 * */
			public function setUserRole(roleId:String):void {
				var t:String = _undoUser.roleIds;
				_undoUser.roleIds = roleId;
				var kr:KalturaUserRole = findSelectedRole();
				if (kr) {
					roleCb.selectedItem = kr;
				}
				else {
					_undoUser.roleIds = t;
				}
			}


			/**
			 * set window mode.
			 * optional values are listed in <code>DrilldownMode</code>.
			 * */
			protected function setMode(newMode:String):void {
				_mode = newMode;
				if (_ready) {
					switch (newMode) {
						case DrilldownMode.ADD:
							title = ResourceManager.getInstance().getString('admin', 'add_user_title');
							changesLbl.visible = false;
							break;
						case DrilldownMode.EDIT:
							_isAutoPuserId = true;
							title = ResourceManager.getInstance().getString('admin', 'edit_user_title');
							emailTi.enabled = false;
							firstNameTi.enabled = false;
							lastNameTi.enabled = false;
							roleCb.selectedItem = findSelectedRole();
							if (!_allowSetRole) {
								roleCb.enabled = false;
								addRoleBtn.visible = false;
							}
							break;
					}
				}
			}


			/**
			 * @private
			 * NOTE: when setting this attribute a new User is created and used,
			 * so when getting this attribute the NEW entity is returned.
			 */
			protected function setUser(value:KalturaUser):void {
				_user = value;
				// create working copy
				_undoUser = new KalturaUser();
				var atts:Array = ObjectUtil.getObjectAllKeys(value);
				for (var i:int = 0; i < atts.length; i++) {
					_undoUser[atts[i]] = value[atts[i]];
				}
			}


			/**
			 * optional roles for the user
			 * */
			public function set roles(value:ArrayCollection):void {
				_roles = value;
				setUserRole(_undoUser.roleIds);
			}


			/**
			 * current window mode.
			 * optional values are listed in <code>DrilldownMode</code> class
			 * */
			public function get mode():String {
				return _mode;
			}


			/**
			 * user data shown in the window
			 * */
			public function get user():KalturaUser {
				return _undoUser;
			}
		]]>
	</mx:Script>
	<mx:StringValidator id='validator' property="text" required="true"
						requiredFieldError="{resourceManager.getString('admin', 'mandatoryField')}"/>
	<mx:VBox width="100%">
		<mx:HBox styleName="adminFormInnerTitle" width="100%" >
			<mx:Label text="{ResourceManager.getInstance().getString('admin', 'personal_details')}"
					  styleName="acpPopUpTitleLabel"/>
		</mx:HBox>

		<mx:HBox width="100%" paddingTop="9" styleName="TextInput">
			<mx:Label text="{ResourceManager.getInstance().getString('admin', 'udd_email')}" width="{_lblWidth}"/>
			<mx:TextInput id='emailTi' width="100%" text="{_undoUser.email}"/>
		</mx:HBox>
		<mx:HBox width="100%" paddingTop="9">
			<mx:Label text="{ResourceManager.getInstance().getString('admin', 'first_name')}" width="{_lblWidth}"/>
			<mx:TextInput id='firstNameTi' width="100%"
						  text="{(_undoUser.firstName ? _undoUser.firstName : _undoUser.fullName)}"/>
		</mx:HBox>
		<mx:HBox width="100%" paddingTop="9">
			<mx:Label text="{ResourceManager.getInstance().getString('admin', 'last_name')}" width="{_lblWidth}"/>
			<mx:TextInput id='lastNameTi' width="100%" text="{_undoUser.lastName}"/>
		</mx:HBox>

		<mx:HBox styleName="adminFormInnerTitle" width="100%" paddingTop="24">
			<mx:Label text="{ResourceManager.getInstance().getString('admin', 'account_details')}" styleName="acpPopUpTitleLabel"/>
		</mx:HBox>
		<mx:HBox width="100%" paddingTop="9">
			<mx:Text text="{ResourceManager.getInstance().getString('admin', 'user_id')}" width="{_lblWidth}"/>
			<mx:TextInput id='idTi' width="100%" text="{_undoUser.id}"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{ResourceManager.getInstance().getString('admin', 'user_role')}" width="{_lblWidth}" />
			<mx:ComboBox id="roleCb" dataProvider="{_roles}" labelField="name"/>
			<mx:LinkButton id="addRoleBtn" click="openRoleWindow()" styleName="multiComponentAddButton"
						   label="{ResourceManager.getInstance().getString('admin', 'add_role')}"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{ResourceManager.getInstance().getString('admin', 'udd_description')}" width="{_lblWidth}"/>
			<mx:Text id='descriptionTxt' width="100%" text="{roleCb.selectedItem.description}"/>
		</mx:HBox>
		<mx:Spacer height="100%" />
		<mx:HBox>
			<mx:Label id="changesLbl" text="{ResourceManager.getInstance().getString('admin', 'user_changes')}" />
		</mx:HBox>

	</mx:VBox>
	<mx:ControlBar>
		<mx:Button id="saveBtn" click="setUserDataFromForm(event)"
				   label="{ResourceManager.getInstance().getString('admin', 'save')}"/>
	</mx:ControlBar>
</containers:HelpTitleWindow>
