<?xml version="1.0" encoding="utf-8"?>
<!---
	 This is the window in which you add a new syndication.
-->
<HelpTitleWindow xmlns="com.kaltura.containers.*" xmlns:mx="http://www.adobe.com/2006/mxml"
				 xmlns:exts="com.kaltura.kmc.modules.content.view.window.externalsyndication.popupwindows.externalsyndicationsections.*"
				 xmlns:validators="com.kaltura.validators.*" width="620" height="570" verticalScrollPolicy="off"
				 paddingTop="20" title="{resourceManager.getString('cms','addNewFeedTitle')}" showCloseButton="true"
				 help="onHelp()" creationComplete="setData()" close="closeWindow(event)" initialize="{init()}">
	<states>
		<mx:State name="editFeedSate">
			<mx:SetProperty name="title" value="{resourceManager.getString('cms','editFeedTitle')}"/>
			<mx:SetProperty target="{submitBtn}" name="label"
							value="{resourceManager.getString('cms','saveChangesBtn')}"/>
			<mx:SetProperty target="{feedTypeComboBox}" name="enabled" value="false"/>
		</mx:State>
	</states>
	<mx:Script>
		<![CDATA[
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.modules.content.events.ExternalSyndicationEvent;
			import com.kaltura.edw.control.events.SearchEvent;
			import com.kaltura.kmc.modules.content.events.UIConfEvent;
			import com.kaltura.kmc.modules.content.model.ExtSynModel;
			import com.kaltura.kmc.modules.content.view.interfaces.IExternalSyndicationFeed;
			import com.kaltura.kmc.modules.content.vo.ExternalSyndicationVO;
			import com.kaltura.types.KalturaSyndicationFeedType;
			import com.kaltura.types.KalturaUiConfObjType;
			import com.kaltura.vo.KalturaBaseSyndicationFeed;
			import com.kaltura.vo.KalturaPlaylist;
			import com.kaltura.vo.KalturaUiConfFilter;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			import mx.utils.StringUtil;
			import mx.validators.ValidationResult;

			private const LABEL_WIDTH:int = 180;
			
			
			[Bindable]
			/**
			 * edited feed settings
			 * */
			public var selectedExSynVo:ExternalSyndicationVO = null;

			/**
			 * optional syndication feed types
			 * */
			[ArrayElementType("Object")]
			private const FEED_TYPES:Array = [{label: 'Google', code: KalturaSyndicationFeedType.GOOGLE_VIDEO}, 
				{label: 'Yahoo!', code: KalturaSyndicationFeedType.YAHOO}, {label: 'ITunes', code: KalturaSyndicationFeedType.ITUNES}, 
				{label: 'TubeMogul', code: KalturaSyndicationFeedType.TUBE_MOGUL}, {label: ResourceManager.getInstance().getString('cms','flexibleFormatFeed'), code: KalturaSyndicationFeedType.KALTURA_XSLT}];

			[Bindable]
			public var flavorParams:ArrayCollection;
			[Bindable]
			public var _playlistsProvider:ArrayCollection;
	
			private var _extSynModel:ExtSynModel;

			/**
			 * address of the server the application is running with
			 * */
			public var rootUrl:String;


			[Bindable]
			public function get extSynModel():ExtSynModel
			{
				return _extSynModel;
			}

			public function set extSynModel(value:ExtSynModel):void
			{
				_extSynModel = value;
				_playlistsProvider = _extSynModel.generalPlayListdata;
			}

			/**
			 * server calls to config the syndications filters
			 * */
			private function init():void {
				//server calls to config the syndications filters
//				var listPlayList:SearchEvent = new SearchEvent(SearchEvent.SEARCH_PLAYLIST, null);
//				listPlayList.dispatch();

				var filter:KalturaUiConfFilter = new KalturaUiConfFilter();
				filter.objTypeEqual = KalturaUiConfObjType.PLAYER;
				filter.tagsMultiLikeAnd = 'player';

				var listUIConfEvent:UIConfEvent = new UIConfEvent(UIConfEvent.LIST_UI_CONFS, filter);
				listUIConfEvent.dispatch();
			}


			/**
			 * open help page
			 * */
			private function onHelp():void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, 'section_ExternalSyndicationPopup'));
			}


			/**
			 * set selected feed data
			 * */
			private function setData():void {
				if (selectedExSynVo) {
					// content:
					setFeedContent();
					// feed type:
					if (selectedExSynVo.kSyndicationFeed.type == KalturaSyndicationFeedType.KALTURA_XSLT)
						feedTypeComboBox.selectedIndex = selectedExSynVo.kSyndicationFeed.type - 2;
					else
						feedTypeComboBox.selectedIndex = selectedExSynVo.kSyndicationFeed.type - 1;
					currentState = "editFeedSate";
					// feed data:
					var syndicationFeedTemplate:IExternalSyndicationFeed = syndicationTypeOptions.selectedChild as IExternalSyndicationFeed;
					syndicationFeedTemplate.syndication = selectedExSynVo.kSyndicationFeed;
				}
				if (currentState == "editFeedSate") {
					PermissionManager.getInstance().applyAllAttributes(this, "externalSyndicationDrilldown_edit");
				}
				else {
					PermissionManager.getInstance().applyAllAttributes(this, "externalSyndicationDrilldown_add");
				}
				generalFeedNameTextInput.setFocus();
			}


			/**
			 * something with playlists and feed content
			 * */
			private function setFeedContent():void {
				var plId:String = selectedExSynVo.kSyndicationFeed.playlistId;
				// select content radio button:
				if ((plId == null) || (plId == '')) {
					// not playlist 
					allcontentRadioBtn.selected = true;
				}
				else {
					playlistsRadioBtn.selected = true;
					var index:uint;
					// select the correct playlist from the playlist combobox
					for each (var pl:KalturaPlaylist in _playlistsProvider) {
						if (pl && plId == pl.id) {		
							playListComboBox.selectedIndex = index;
							return;
						}
						index++;
					}
				}
			}

			private function closeWindow(event:Event = null):void {
				PopUpManager.removePopUp(this);
			}


			private function onSubmit(event:Event):void {
				if (validateFeed()) {
					if (!selectedExSynVo)
						addNewFeed();
					else
						saveFeedChanges();

					closeWindow();
				}
				else {
					Alert.show(resourceManager.getString('cms', 'feedInvalidInputMsg'), resourceManager.getString('cms', 'error'));
				}
			}


			private function validateFeed():Boolean {
				var isOk:Boolean = true;
				var nameValidateResultEvent:ValidationResultEvent = feedNameValidator.validate();
				if ((nameValidateResultEvent.results != null) && (nameValidateResultEvent.results.length > 0)) {
					isOk = !(nameValidateResultEvent.results[0] as ValidationResult).isError;
				}

				if (isOk) {
					var syndicationFeedTemplate:IExternalSyndicationFeed = syndicationTypeOptions.selectedChild as IExternalSyndicationFeed;
					isOk = syndicationFeedTemplate.validate();
				}

				return isOk;
			}


			private function addNewFeed():void {
				var syndicationFeedTemplate:IExternalSyndicationFeed = syndicationTypeOptions.selectedChild as IExternalSyndicationFeed;
				var newFeed:KalturaBaseSyndicationFeed = syndicationFeedTemplate.syndication;
				newFeed.name = StringUtil.trim(generalFeedNameTextInput.text);
				newFeed.playlistId = getPlaylistID();

				var addNewFeedEvent:ExternalSyndicationEvent = new ExternalSyndicationEvent(ExternalSyndicationEvent.ADD_NEW_EXTERNAL_SYNDICATION);
				addNewFeedEvent.data = newFeed;
				addNewFeedEvent.dispatch();
			}



			private function getPlaylistID():String {
				return allcontentRadioBtn.selected ? '' : (playListComboBox.selectedItem as KalturaPlaylist).id + '';
			}


			private function saveFeedChanges():void {
				var syndicationFeedTemplate:IExternalSyndicationFeed = syndicationTypeOptions.selectedChild as IExternalSyndicationFeed;
				var editedFeed:KalturaBaseSyndicationFeed = syndicationFeedTemplate.syndication;
				editedFeed.name = StringUtil.trim(generalFeedNameTextInput.text);
				editedFeed.playlistId = getPlaylistID();

				var saveEditedFeedEvent:ExternalSyndicationEvent = new ExternalSyndicationEvent(ExternalSyndicationEvent.UPDATE_EXTERNAL_SYNDICATION_CHANGES);
				saveEditedFeedEvent.data = editedFeed;
				saveEditedFeedEvent.dispatch();
			}


			public function set editable(value:Boolean):void {
				if (generalFeedNameTextInput) {
					generalFeedNameTextInput.editable = false;
					allcontentRadioBtn.enabled = false;
					playlistsRadioBtn.enabled = false;
					playListComboBox.enabled = false;
					feedTypeComboBox.enabled = false;
					syndicationTypeOptions.selectedChild.enabled = false;
					submitBtn.enabled = false;
					submitBtn.buttonMode = false;
				}
			}


			public function get editable():Boolean {
				return submitBtn.enabled;
			}
			


		]]>
	</mx:Script>
	<mx:StringValidator id="feedNameValidator" source="{generalFeedNameTextInput}" property="text" required="true"/>

	<mx:VBox width="100%">
		<mx:HBox width="100%">
			<mx:Label text="*{resourceManager.getString('cms','feedNameLabel')}" width="{LABEL_WIDTH}" styleName="feedParamLabel"/>
			<mx:TextInput id='generalFeedNameTextInput' width="100%" text="{selectedExSynVo.kSyndicationFeed.name}"/>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('cms','selectedContentLabel')}" width="{LABEL_WIDTH}"
					  styleName="feedParamLabel"/>
			<mx:VBox width="100%" height="100%">
				<mx:RadioButtonGroup id='contentRadioBtnsGroup'/>
				<mx:RadioButton id="allcontentRadioBtn" label="{resourceManager.getString('cms','allContentRadioBtn')}"
								groupName="contentRadioBtnsGroup" selected="true"/>
				<mx:RadioButton id="playlistsRadioBtn"
								label="{resourceManager.getString('cms','onlyFromPlaylistRadioBtn')}"
								groupName="contentRadioBtnsGroup"/>
				<mx:ComboBox id='playListComboBox' width="100%" enabled="{playlistsRadioBtn.selected}"
							 dataProvider="{_playlistsProvider}" labelField="name"/>
			</mx:VBox>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Label text="{resourceManager.getString('cms','feedTypleLabel')}" width="{LABEL_WIDTH}" styleName="feedParamLabel"/>
			<mx:ComboBox width="100%" id="feedTypeComboBox" dataProvider="{FEED_TYPES}" editable="false"/>
		</mx:HBox>
	
	</mx:VBox>

	<mx:ViewStack id="syndicationTypeOptions" width="100%" height="100%" creationPolicy="all"
				  selectedIndex="{feedTypeComboBox.selectedIndex}">
		<exts:GoogleExtSyn width="100%" height="100%" extSynData="{extSynModel}" flavorParams="{flavorParams}"/>
		<exts:YahooExtSyn width="100%" height="100%" flavorParams="{flavorParams}" players="{extSynModel.uiConfData}"
						  horizontalScrollPolicy="off"/>
		<exts:ITuneExtSyn width="100%" height="100%" partnerData="{extSynModel.partnerData}"
						  flavorParams="{flavorParams}"/>
		<exts:TubeMogulExtSyn width="100%" height="100%" flavorParams="{flavorParams}"/>
		<exts:FlexibleExtSyn width="100%" height="100%"/>
	</mx:ViewStack>
	<mx:ControlBar horizontalAlign="center" paddingBottom="6" paddingLeft="2" paddingRight="2" paddingTop="6"
				   verticalAlign="middle">
		<mx:Button label="{resourceManager.getString('cms','addNewFeedBtn')}" useHandCursor="true" buttonMode="true"
				   id="submitBtn" click="onSubmit(event)"/>
	</mx:ControlBar>
</HelpTitleWindow>
