<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()" xmlns:components="com.hillelcoren.components.*">
	<mx:Script>
		<![CDATA[
			import com.kaltura.KalturaClient;
			import com.kaltura.autocomplete.controllers.KACUsersController;
			import com.kaltura.autocomplete.itemRenderers.UserFilterSelectedItem;
			import com.kaltura.autocomplete.itemRenderers.selection.UserSelectedItem;
			import com.kaltura.dataStructures.HashMap;
			import com.kaltura.edw.vo.CategoryVO;
			import com.kaltura.kmc.business.JSGate;
			import com.kaltura.kmc.modules.analytics.control.DrillDownEvent;
			import com.kaltura.kmc.modules.analytics.control.StateEvent;
			import com.kaltura.kmc.modules.analytics.model.AnalyticsModelLocator;
			import com.kaltura.kmc.modules.analytics.model.types.ScreenTypes;
			import com.kaltura.kmc.modules.analytics.view.window.CategoriesTreePopUp;
			import com.kaltura.kmc.modules.analytics.vo.FilterVo;
			import com.kaltura.types.KalturaReportInterval;
			
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.CollectionEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;

			public const LBL_WIDTH : int = 100;
			public const INPUT_WIDTH : int = 310;
			public static const APPLY:String = "apply";
			
			public static const ONE_DAY:Number = 1000 * 60 * 60 * 24;
			public static const SECOND_IN_MILI:Number = 1000; 
			
			public var objectIds:String = '';
			
			/**
			 * elements are of type CategoryVO 
			 * */
			private var _selectedCategoriesArr:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			/**
			 * set texts to playbackContext related
			 * */
			public var playbackContextFlag : Boolean;
			
			[Bindable]
			private var _filterVo:FilterVo;

			[Bindable]
			public var isLoading:Boolean;

			[Bindable]
			public var kc :KalturaClient;
			
			[Bindable]
			public var applicationsList : ArrayCollection = new ArrayCollection();
			
			[Bindable]
			public var showTimeUnits:Boolean = false;
			
			[Bindable]
			public var showSearchFilter:Boolean = true;
			
			[Bindable]
			public var drillDownName : String;

			/**
			 *
			 * @param filterVo is the current FilterVO that will be applied on the data
			 *
			 */
			public function set filterVo(filterVo:FilterVo):void {
				_filterVo = filterVo;
				init();
			}


			/**
			 *
			 * @return filterVO the current FilterVO that will be applied on the data
			 *
			 */
			public function get filterVo():FilterVo {
				return _filterVo;
			}

			[Bindable]
			private var _dateRange:Array = [ResourceManager.getInstance().getString('analytics', 'yesterday'), ResourceManager.getInstance().getString('analytics', 'last7Days'), ResourceManager.getInstance().getString('analytics', 'thisWeek'), ResourceManager.getInstance().getString('analytics', 'lastWeek'), ResourceManager.getInstance().getString('analytics', 'last30Days'), ResourceManager.getInstance().getString('analytics', 'thisMonth'), ResourceManager.getInstance().getString('analytics', 'lastMonth'), ResourceManager.getInstance().getString('analytics', 'last12Months'), ResourceManager.getInstance().getString('analytics', 'thisYear'), ResourceManager.getInstance().getString('analytics', 'custom')];

			[Bindable]
			private var _timeUnitsDp:Array = [ResourceManager.getInstance().getString('analytics', 'monthly'), ResourceManager.getInstance().getString('analytics', 'daily')];
			
			[Bindable]
			public var dateOnlyFlag:Boolean = false;
			
			[Bindable]
			/**
			 * Show or Hide the user filter UI
			 * */
			public var filterUsersFlag:Boolean = true;
			
			[Bindable] 
			/**
			 * Show or Hide the application filter UI
			 * */
			public var filterApplicationsFlag:Boolean = true;
			
			[Bindable] 
			public var showDrillDownNav:Boolean = false;

			private var _oldToDate:Date;
			private var _oldFromDate:Date;


			//Private Functions	
			private function init():void {
				if (this.visible) {
					if (dateCb)
						dateCb.selectedItem = _filterVo.selectedDate;
					_oldFromDate = _filterVo.fromDate;
					_oldToDate = _filterVo.toDate;
					
					// default value for time units
					if (showTimeUnits){
						filterVo.interval = KalturaReportInterval.MONTHS;
					}
					
					if (_filterVo.categories == null) {
						_selectedCategoriesArr = new ArrayCollection();
					}
					else {
						_selectedCategoriesArr = getCategoriesFromNames(_filterVo.categories.split(','));
					}
					onCategoriesChange();
					
					if (filterUsersFlag){
						if (!_filterVo.userIds) {
							usersComplete.selectedItems = null;
						}
						else {
							var users:Array = _filterVo.userIds.split(',');
							for (var i:int = 0; i<users.length; i++) {
								if (users[i]) {	// avoid empty strings which are valid user ids)
									usersComplete.selectedItemIdentifier = users[i]; 
								}
							}
						}
					}
					
					if (! filterApplicationsFlag){
						filterVo.application = null;
					} 
				}
				_selectedCategoriesArr.addEventListener(CollectionEvent.COLLECTION_CHANGE, onCategoriesChange);
			}

			/**
			 * given a list of category full names, retrieve a list of matching CategoryVO objects
			 * @param ar	categries full names
			 * @return ArrayCollection with CategoryVO objects 
			 * */
			private function getCategoriesFromNames(ar:Array):ArrayCollection {
				var result:ArrayCollection = new ArrayCollection();
				var catsMap:HashMap = AnalyticsModelLocator.getInstance().categoriesMap;
				for (var i:int = 0; i<ar.length; i++) {
					for each (var catvo:CategoryVO in catsMap) {
						if (catvo.category.fullName == ar[i]) {
							result.addItem(catvo);
							break;
						}
					}
				}
				return result;
			}

			/**
			 * This is an event handler that will be called whenever the "fromDate" DateField changes
			 * @param event is a CalendarLayoutChangeEvent that holds the new date.
			 */
			private function fromDateChanged(event:CalendarLayoutChangeEvent):void {
				// see this is a legal date
				if (toDate.selectedDate && event.newDate > toDate.selectedDate) {
					_filterVo.fromDate = _oldFromDate;
					fromDate.text = (_filterVo.fromDate.month + 1) + "/" + _filterVo.fromDate.date + "/" + _filterVo.fromDate.fullYear;
					Alert.show(resourceManager.getString('analytics', 'fromToDateAlert'));
					return;
				}

				// save the new date
				_filterVo.fromDate = new Date(event.newDate.time);
				_oldFromDate = _filterVo.fromDate;
				changeRangeByDate();
			}


			/**
			 * This is an event handler that will be called whenever the "toDate" DateField changes
			 * @param event is a CalendarLayoutChangeEvent that holds the new date.
			 *
			 */
			private function toDateChanged(event:CalendarLayoutChangeEvent):void {
				// see this is a legal date
				if (fromDate.selectedDate && event.newDate < fromDate.selectedDate) {
					_filterVo.toDate = _oldToDate;
					toDate.text = (_filterVo.fromDate.month + 1) + "/" + _filterVo.toDate.date + "/" + _filterVo.toDate.fullYear;
					Alert.show(resourceManager.getString('analytics', 'fromToDateAlert'));
					return;
				}
				// save the new date
				_filterVo.toDate = new Date(event.newDate.time + ONE_DAY - SECOND_IN_MILI);
				_oldToDate = _filterVo.toDate;
				changeRangeByDate();
			}


			/**
			 * checks the current range between "fromDate" and "toDate" and updates "dateCB" ComboBox accordingly.
			 *
			 */
			private function changeRangeByDate():void {
				var curDate:Date = new Date();
				var todaysHourInMiliSeconds:Number = (((curDate.hoursUTC) * 60 + curDate.minutesUTC) * 60 + curDate.secondsUTC) * 1000 + curDate.millisecondsUTC;
				var today:Date = new Date(Number(curDate.time - todaysHourInMiliSeconds - ONE_DAY));

				if (today.time - _filterVo.fromDate.time >= ONE_DAY && today.time - filterVo.fromDate.time < ONE_DAY * 2 && today.time - _filterVo.toDate.time >= 0 && today.time - filterVo.toDate.time <= ONE_DAY) {
					dateCb.selectedItem = resourceManager.getString('analytics', 'yesterday');
				}
				else if (today.time - _filterVo.fromDate.time >= ONE_DAY * 6 && today.time - _filterVo.fromDate.time < ONE_DAY * 7 && today.time - _filterVo.toDate.time >= 0 && today.time - toDate.selectedDate.time <= ONE_DAY) {
					dateCb.selectedItem = resourceManager.getString('analytics', 'last7Days');
				}
				else if (today.time - _filterVo.fromDate.time >= ((_filterVo.toDate.day) * ONE_DAY) && today.time - _filterVo.fromDate.time < ((_filterVo.toDate.day + 1) * ONE_DAY) && today.time - _filterVo.toDate.time >= 0 && today.time - _filterVo.toDate.time < ONE_DAY) {
					dateCb.selectedItem = resourceManager.getString('analytics', 'thisWeek');
				}
				else if (today.time - _filterVo.fromDate.time >= 7 * ONE_DAY && today.time - _filterVo.fromDate.time < 14 * ONE_DAY && _filterVo.fromDate.dayUTC == 0 && _filterVo.toDate.dayUTC == 6) {
					dateCb.selectedItem = resourceManager.getString('analytics', 'lastWeek');
				}
				else if (today.time - _filterVo.fromDate.time >= ONE_DAY * 30 && today.time - _filterVo.fromDate.time < ONE_DAY * 31 && today.time - _filterVo.toDate.time >= 0 && today.time - _filterVo.toDate.time < ONE_DAY) {
					dateCb.selectedItem = resourceManager.getString('analytics', 'last30Days');
				}
				else if (today.time - _filterVo.toDate.time >= 0 && today.time - _filterVo.toDate.time < ONE_DAY && _filterVo.fromDate.fullYearUTC == _filterVo.toDate.fullYearUTC && _filterVo.fromDate.monthUTC == _filterVo.toDate.monthUTC && _filterVo.fromDate.dateUTC == 1) {
					dateCb.selectedItem = resourceManager.getString('analytics', 'thisMonth');
				}
				else if (_filterVo.toDate.monthUTC + 1 == today.monthUTC && _filterVo.fromDate.dateUTC == 1 && _filterVo.fromDate.monthUTC + 1 == today.monthUTC) {
					var tempDate:Date = new Date(today.time - (today.dateUTC * ONE_DAY));
					if (_filterVo.toDate.dateUTC == tempDate.dateUTC)
						dateCb.selectedItem = resourceManager.getString('analytics', 'lastMonth');
					else
						dateCb.selectedItem = ResourceManager.getInstance().getString('analytics', 'custom');
				}
				else if (_filterVo.toDate.fullYearUTC == _filterVo.fromDate.fullYearUTC + 1 && _filterVo.toDate.monthUTC == _filterVo.fromDate.monthUTC && _filterVo.toDate.dateUTC == _filterVo.fromDate.dateUTC - SECOND_IN_MILI && today.time - _filterVo.toDate.time >= 0 && today.time - _filterVo.toDate.time < ONE_DAY) {
					dateCb.selectedItem = resourceManager.getString('analytics', 'last12Months');
				}
				else if (today.time - _filterVo.toDate.time >= 0 && today.time - _filterVo.toDate.time < ONE_DAY && today.fullYearUTC == _filterVo.fromDate.fullYearUTC && _filterVo.fromDate.monthUTC == 0 && _filterVo.fromDate.dateUTC == 1) {
					dateCb.selectedItem = resourceManager.getString('analytics', 'thisYear');
				}
				else {
					dateCb.selectedItem = ResourceManager.getInstance().getString('analytics', 'custom');
				}
				
				_filterVo.selectedDate = dateCb.selectedItem.toString();

				dispatchEvent(new Event(APPLY)); //apply
			}


			/**

			 * This is an event handler that will be called whenever the "dateCb" ComboBox changes.
			 * it sets to- and from- dates to the filter VO and dispatches an "apply" event.
			 * @param event	ListEvent
			 */
			private function changeDateByRange(event:ListEvent):void {
				var today:Date = new Date();
				var todaysHourInMiliSeconds:Number = (((today.hoursUTC) * 60 + today.minutesUTC) * 60 + today.secondsUTC) * 1000 + today.millisecondsUTC;
				var todayStart:Number = today.time - todaysHourInMiliSeconds;

				_filterVo.selectedDate = (event.target as ComboBox).selectedItem.toString();

				switch ((event.target as ComboBox).selectedItem.toString()) {
					case resourceManager.getString('analytics', 'yesterday'):
						// actually gives the day before yesterday
						_filterVo.fromDate = new Date((todayStart - 2 * ONE_DAY + today.timezoneOffset * 60000) + ONE_DAY);
						_filterVo.toDate = new Date((todayStart - ONE_DAY - SECOND_IN_MILI + today.timezoneOffset * 60000) + ONE_DAY) ;
						break;
					case resourceManager.getString('analytics', 'last7Days'):
						// actually gives 7 days, starting 8 days ago and ending yesterday
						_filterVo.fromDate = new Date((todayStart - 8 * ONE_DAY + today.timezoneOffset * 60000) + ONE_DAY);
						_filterVo.toDate = new Date((todayStart - ONE_DAY - SECOND_IN_MILI + today.timezoneOffset * 60000) + ONE_DAY);
						break;
					case resourceManager.getString('analytics', 'thisWeek'):
						// actually gives from last sunday to yesterday
						_filterVo.fromDate = new Date(todayStart - (today.day) * ONE_DAY + today.timezoneOffset * 60000);
						if (today.day == 0) {
							// there is no data for yesterday, but it doesn't twist the results
							_filterVo.toDate = new Date(todayStart + today.timezoneOffset * 60000 - SECOND_IN_MILI); 
						}
						else {
							_filterVo.toDate = new Date((todayStart - ONE_DAY + today.timezoneOffset * 60000 - SECOND_IN_MILI) + ONE_DAY); 
						}
						break;
					case resourceManager.getString('analytics', 'lastWeek'):
						// actually gives 2 sundays ago to last sunday 
						_filterVo.fromDate = new Date(todayStart - (today.day + 7) * ONE_DAY + today.timezoneOffset * 60000);
						_filterVo.toDate = new Date(todayStart - today.day * ONE_DAY + today.timezoneOffset * 60000 - SECOND_IN_MILI);
						break;
					case resourceManager.getString('analytics', 'last30Days'):
						// actually gives 31 days ago until yesterday
						_filterVo.fromDate = new Date((todayStart - 31 * ONE_DAY + today.timezoneOffset * 60000) + ONE_DAY);
						_filterVo.toDate = new Date((todayStart - ONE_DAY + today.timezoneOffset * 60000 - SECOND_IN_MILI) + ONE_DAY);
						break;
					case resourceManager.getString('analytics', 'last12Months'):
						// actually gives a year ago today until yesterday
						var date:Number = today.date;
						var month:Number = today.month;
						var year:Number = today.fullYear;
						if (date == 1) {
							if (month == 1) {
								year -= 1;
							} 
							else {
								month -= 1;
							}
						}
						else date -= 1;
						
						_filterVo.fromDate = new Date(year - 1, month, date);
						_filterVo.toDate = new Date((todayStart - ONE_DAY + today.timezoneOffset * 60000 - SECOND_IN_MILI) + ONE_DAY);
						break;
					case resourceManager.getString('analytics', 'thisMonth'):
						// actually gives first day of the month until yesterday
						_filterVo.fromDate = new Date(today.fullYear, today.month, 1);
						if (today.date == 1){
							_filterVo.toDate = new Date(_filterVo.fromDate.time);
						} else {
							_filterVo.toDate = new Date((todayStart - ONE_DAY + today.timezoneOffset * 60000 - SECOND_IN_MILI) + ONE_DAY);
						}
						break;
					case resourceManager.getString('analytics', 'lastMonth'):
						// actually gives from the first of last month to the last of last month
						if (today.month > 0) {
							_filterVo.fromDate = new Date(today.fullYear, today.month-1, 1);
						}
						else {
							_filterVo.fromDate = new Date(today.fullYear - 1, 11, 1);
						}
						_filterVo.toDate = new Date(todayStart - (ONE_DAY * (today.date - 1)) + today.timezoneOffset * 60000 - SECOND_IN_MILI);
						break;
					case resourceManager.getString('analytics', 'thisYear'):
						// actually gives from the 1/1 of current year to yesterday
						_filterVo.fromDate = new Date(today.fullYear, 0, 1);
						_filterVo.toDate = new Date((todayStart - ONE_DAY + today.timezoneOffset * 60000 - SECOND_IN_MILI) + ONE_DAY);
						break;
					default:
						return;
						break;
				}

				dispatchEvent(new Event(APPLY));
			}


			/**
			 *
			 * converts the date to be according to universal time and not local time
			 * @return convertedDate the new date according to universal time
			 */
			private function adjustDateToUTC(fullYearUTC:Number, mothUTC:Number, dayUTC:Number):Date {
				// arguments to DAte() are assumed to be in local time.
				var tempDate:Date = new Date(fullYearUTC, mothUTC, dayUTC);
				var convertedDate:Date = new Date(Number(tempDate.time - (tempDate.timezoneOffset * 60 * 1000)));

				return convertedDate;
			}


			/*private function checkDisableTextField() : void
			   {
			   if(!searchInTags.selected && !searchInAdminTags.selected)
			   {
			   _filterVo.keywords = searchTerm.text = "";
			   searchTerm.enabled = false;
			   }
			   else
			   searchTerm.enabled = true;
			 }*/

			private function onDrillDown(newState:int):void {
				var drillDownEvent:DrillDownEvent = new DrillDownEvent(DrillDownEvent.DRILL_DOWN, objectIds, newState,drillDownName); 	
				drillDownEvent.dispatch();
			}


			private function onCategoriesTreeOpen(event:Event):void {
				var categoryPopUp:CategoriesTreePopUp = new CategoriesTreePopUp();
				categoryPopUp.selectedCategories = _selectedCategoriesArr;
				categoryPopUp.addEventListener(CategoriesTreePopUp.FILTER_BY_CATEGORIES, onCategoriesSelected);
				PopUpManager.addPopUp(categoryPopUp, Application.application as DisplayObject, true);
				PopUpManager.centerPopUp(categoryPopUp);
				JSGate.maskHeader(false);
			}


			private function onCategoriesSelected(event:Event):void {
//				if ((event.target as CategoriesTreePopUp).selectedCategories.length > 0) {
					dispatchEvent(new Event(APPLY));
//				}
			}


			private function onAllCategoriesSelection(event:Event):void {
				_selectedCategoriesArr.removeAll();
			}


			private function onCategoriesChange(event:Event = null):void {
				if (_selectedCategoriesArr.length == 0) {
					allCategoriesBtn.setStyle("color", "#000000");
					allCategoriesBtn.setStyle("rollOverColor", "#000000");
					allCategoriesBtn.setStyle("textDecoration", "none");
					allCategoriesBtn.toolTip = resourceManager.getString('analytics', 'allCategoriesSelectedToolTip');
					allCategoriesBtn.removeEventListener(MouseEvent.CLICK, allCategoriesClick);
					if (playbackContextFlag) {
						selectedCategoriesBtn.label = resourceManager.getString('analytics', 'selectPlaybackContext');
						selectedCategoriesBtn.toolTip = resourceManager.getString('analytics', 'selectPlaybackContextToolTip');
					}
					else {
						selectedCategoriesBtn.label = resourceManager.getString('analytics', 'selectCategories');
						selectedCategoriesBtn.toolTip = resourceManager.getString('analytics', 'selectCategoriesToolTip');
					}
					_filterVo.categories = null;

				}
				else {
					allCategoriesBtn.clearStyle("color");
					allCategoriesBtn.clearStyle("rollOverColor");
					allCategoriesBtn.toolTip = resourceManager.getString('analytics', 'allCategoriesToolTip');
					allCategoriesBtn.addEventListener(MouseEvent.CLICK, allCategoriesClick);
					var tooltipCats:String = '';
					var filterCats:String = '';
					for each (var catvo:CategoryVO in _selectedCategoriesArr) {
						tooltipCats += catvo.category.fullName + "\n";
						filterCats += catvo.category.fullName + ",";
					}
					if (filterCats.lastIndexOf(',') == filterCats.length - 1) {
						filterCats = filterCats.substr(0, filterCats.length - 1);
					}
					_filterVo.categories = filterCats;
					if (playbackContextFlag) {
						selectedCategoriesBtn.toolTip = resourceManager.getString('analytics', 'selectedPlaybackContext') + ":\n" + tooltipCats;
						selectedCategoriesBtn.label = resourceManager.getString('analytics', 'selectedPlaybackContext') + "(" + _selectedCategoriesArr.length + ")";
					}
					else {
						selectedCategoriesBtn.toolTip = resourceManager.getString('analytics', 'selectedCategories') + ":\n" + tooltipCats;
						selectedCategoriesBtn.label = resourceManager.getString('analytics', 'selectedCategories') + "(" + _selectedCategoriesArr.length + ")";
					}
				}
			}


			private function allCategoriesClick(event:MouseEvent):void {
				dispatchEvent(new Event(APPLY));
			}
			
			//Set the filter userIds for every change of the auto compelte user component
			protected function usersComplete_changeHandler(event:Event):void
			{
				var usersIds : String = "";
				for(var i:int=0; i<usersComplete.selectedItems.length; i++)
				{
					usersIds += usersComplete.selectedItems[i].id + ",";
				}
				_filterVo.userIds = usersIds.substr(0, usersIds.length-1);
				
				dispatchEvent(new Event(APPLY)); //apply
			}
			
			protected function changeTimeUnits(event:ListEvent):void
			{
				switch (timeUnitsCb.selectedItem){
					case ResourceManager.getInstance().getString('analytics', 'monthly'):
						filterVo.interval = KalturaReportInterval.MONTHS;
						break;
					case ResourceManager.getInstance().getString('analytics', 'daily'):
						filterVo.interval = KalturaReportInterval.DAYS;
						break;
				}
				
				dispatchEvent(new Event(APPLY)); //apply
			}
			
			private function onAppCbChange(evt:Event):void{
				_filterVo.application = appFilter.selectedItem.toString();
				dispatchEvent(new Event(APPLY));
			}
			
		]]>
	</mx:Script>

	<mx:Metadata>
		  [Event(name="apply", type="flash.events.Event")] 
	</mx:Metadata>

	<mx:HBox width="100%" verticalAlign="middle">
		<mx:Label text="{resourceManager.getString('analytics','dateRange')}"/>
		<mx:ComboBox id="dateCb" dataProvider="{_dateRange}" change="changeDateByRange(event)"
					 styleName="analyticsCombo" enabled="{!isLoading}"/>
		<mx:Label text="{resourceManager.getString('analytics', 'timeUnits')}"
				  includeInLayout="{showTimeUnits}" visible="{showTimeUnits}" />
		<mx:ComboBox id="timeUnitsCb" styleName="analyticsCombo" enabled="{!isLoading}"
					 dataProvider="{_timeUnitsDp}" change="changeTimeUnits(event)"
					 includeInLayout="{showTimeUnits}" visible="{showTimeUnits}" selectedIndex="{_filterVo.interval == KalturaReportInterval.MONTHS ? 0 : 1}" />
		<mx:Label text="{resourceManager.getString('analytics','dates')}"/>
		<mx:DateField id="fromDate" width="100" buttonMode="true" selectedDate="{_filterVo.fromDate}"
					  change="fromDateChanged( event )" enabled="{!isLoading}"/>
		<mx:DateField id="toDate" width="100" buttonMode="true" selectedDate="{_filterVo.toDate}"
					  change="toDateChanged( event )" enabled="{!isLoading}"/>
		<!--mx:Button label="{resourceManager.getString('analytics','apply')}" visible="false" includeInLayout="false"
				   buttonMode="true" click="{dispatchEvent(new Event(APPLY))}" styleName="buttonType2"
				   enabled="{!isLoading}"/-->
	</mx:HBox>
	<mx:HBox id="categoriesBox" verticalAlign="middle" includeInLayout="{ !dateOnlyFlag || playbackContextFlag }" visible="{!dateOnlyFlag || playbackContextFlag}">
		<mx:Label width="{LBL_WIDTH}" 
				  text="{ playbackContextFlag ? resourceManager.getString('analytics','playbackContext') :  resourceManager.getString('analytics','categoriesTitle')}:"/>
		<mx:LinkButton id='allCategoriesBtn' 
					   label="{ resourceManager.getString('analytics','categoriesAll')}"
					   click="onAllCategoriesSelection(event)" enabled="{!isLoading}"/>
		<mx:LinkButton id='selectedCategoriesBtn' label="{resourceManager.getString('analytics','selectCategories')}"
					   click="onCategoriesTreeOpen(event)" enabled="{!isLoading}"/>
	</mx:HBox>
	<mx:HBox width="100%" verticalAlign="middle" includeInLayout="{dateOnlyFlag}" visible="{dateOnlyFlag}">
		<mx:LinkButton id="basicDetails" visible="{showDrillDownNav}"
					   label="{resourceManager.getString('analytics','basicDetails')}"
					   click="onDrillDown(ScreenTypes.VIDEO_DRILL_DOWN_DEFAULT)" toggle="true" enabled="{!isLoading}"/>
		<mx:LinkButton id="dropoff" visible="{showDrillDownNav}"
					   label="{resourceManager.getString('analytics','dropoff')}"
					   click="onDrillDown(ScreenTypes.VIDEO_DRILL_DOWN_DROP_OFF)" toggle="true" enabled="{!isLoading}"/>
		<mx:LinkButton id="interactions" visible="{showDrillDownNav}"
					   label="{resourceManager.getString('analytics','interactions')}"
					   click="onDrillDown(ScreenTypes.VIDEO_DRILL_DOWN_INTERACTIONS)" toggle="true"
					   enabled="{!isLoading}"/>
	</mx:HBox>

	<mx:HBox width="100%" verticalAlign="middle" includeInLayout="{!dateOnlyFlag &amp;&amp; showSearchFilter}" visible="{!dateOnlyFlag &amp;&amp; showSearchFilter}">
		<mx:Label width="{LBL_WIDTH}" text="{resourceManager.getString('analytics','searchFilter')}"/>
		<mx:TextInput id="searchTerm" width="205" text="{_filterVo.keywords}"
					  change="{_filterVo.keywords = searchTerm.text}"
					  keyDown="{if(event.keyCode == Keyboard.ENTER)dispatchEvent(new Event(APPLY))}"
					  enabled="{!isLoading}"/>
		<!--<mx:Label text="{resourceManager.getString('analytics','in')}:" />-->
		<!-- user filter -->
		<mx:RadioButton id="searchInTags" groupName="searchGroup" height="15"
						label="{resourceManager.getString('analytics','searchInTags')}"
						selected="{_filterVo.searchInTags}"
						change="{_filterVo.searchInAdminTags = !(_filterVo.searchInTags = searchInTags.selected);}"
						visible="false" includeInLayout="false" enabled="{!isLoading}"/>
		<!--  checkDisableTextField() -->
		<mx:RadioButton id="searchInAdminTags" groupName="searchGroup" height="15"
						label="{resourceManager.getString('analytics','searchInAdminTags')}"
						selected="{_filterVo.searchInAdminTags}"
						change="{_filterVo.searchInTags = !(_filterVo.searchInAdminTags = searchInAdminTags.selected);}"
						visible="false" includeInLayout="false" enabled="{!isLoading}"/>
		<!--  checkDisableTextField() -->
		<mx:Button label="{resourceManager.getString('analytics','apply')}" buttonMode="true"
				   click="{dispatchEvent(new Event(APPLY))}" styleName="buttonType2" enabled="{!isLoading}"/>
	</mx:HBox>
	<mx:HBox width="100%" verticalAlign="middle" includeInLayout="{filterApplicationsFlag}" visible="{filterApplicationsFlag}">
		<mx:Label width="{LBL_WIDTH}" text="{resourceManager.getString('analytics','application')}" />
		<!-- TODO: CHECK IF WE NEED PROMPT THAT SAID LOADING... -->
		<mx:ComboBox id="appFilter" width="{INPUT_WIDTH}" dataProvider="{applicationsList}"
					 selectedIndex="{_filterVo.application ? (appFilter.dataProvider as ArrayCollection).getItemIndex(_filterVo.application) : 0}" 
					 change="onAppCbChange(event)" />
	</mx:HBox>
	<mx:HBox width="100%" includeInLayout="{filterUsersFlag}" visible="{filterUsersFlag}">
		<mx:Label width="{LBL_WIDTH}" text="{resourceManager.getString('analytics','searchUser')}" />
		<components:AutoComplete id="usersComplete" width="{INPUT_WIDTH}" height="60" 
								 unregisteredSelectedItemStyleName="unregisteredSelectionBox"
								 selectedItemStyleName="selectionBox" selectionItemRendererClassFactory="{new ClassFactory(UserFilterSelectedItem)}"
								 allowNewValues="true" labelField="id" showRemoveIcon="true"
								 creationComplete="{new KACUsersController(usersComplete, kc)}"
								 allowMultipleSelection="true" change="usersComplete_changeHandler(event)"
								 prompt="{resourceManager.getString('analytics', '')}" />
	</mx:HBox>
</mx:VBox>
