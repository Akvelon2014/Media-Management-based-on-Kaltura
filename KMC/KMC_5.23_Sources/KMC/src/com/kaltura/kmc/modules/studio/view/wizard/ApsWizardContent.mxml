<?xml version="1.0" encoding="utf-8"?>
<!---
	 graphic interface for changing player playlists (multiple playlist only).
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" >
	<mx:Metadata>
		
		[Event(name="alertUser", type="flash.events.ErrorEvent")] 
		
		[Event(name="detailsChanged", type="flash.events.Event")]
		
		/**
		 * Dispatched when playlists are loaded
		 * */
		[Event(name="listPlaylistDone", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import com.kaltura.commands.playlist.PlaylistList;
			import com.kaltura.events.KalturaEvent;
			import com.kaltura.kmc.modules.studio.model.types.PlaylistTypes;
			import com.kaltura.kmc.modules.studio.view.ApsWizard;
			import com.kaltura.kmc.modules.studio.vo.PlaylistVO;
			import com.kaltura.types.KalturaPlaylistOrderBy;
			import com.kaltura.vo.KalturaFilterPager;
			import com.kaltura.vo.KalturaMediaEntryFilterForPlaylist;
			import com.kaltura.vo.KalturaPlaylist;
			import com.kaltura.vo.KalturaPlaylistFilter;
			import com.kaltura.vo.KalturaPlaylistListResponse;
			
			import modules.Studio;
			
			import mx.collections.ArrayCollection;
			import mx.formatters.DateFormatter;
			import mx.resources.ResourceManager;

			/**
			 * Defines the "type" property for the "listPlaylistDone" event
			 * */
			public static const LIST_PLAYLIST_DONE:String = "listPlaylistDone";

			public var isSingleContent:Boolean = false;

			[Bindable]
			/**
			 * DataProvider for the "all playlists" table
			 * */
			private var _playlistsTableDP:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			/**
			 * DataProvider for the "selected playlists" table
			 * */
			private var _widgetPlstDP:ArrayCollection = new ArrayCollection();

			private var _contentXml:XML;


			/**
			 * validate data in this panel: </br>
			 * - no data is being validated. But someday..
			 * @return true if all valid, false otherwise.
			 * */
			public function validate():Boolean {
				return true;
			}


			//Handle List Playlist
			////////////////////////////////////////////
			public function listPlaylist():void {
				var pager:KalturaFilterPager = new KalturaFilterPager();
				pager.pageIndex = 1;
				pager.pageSize = 500;
				var kplfilter:KalturaPlaylistFilter = new KalturaPlaylistFilter();
				kplfilter.orderBy = KalturaPlaylistOrderBy.CREATED_AT_DESC;
				var listPlaylist:PlaylistList = new PlaylistList(kplfilter, pager);
				listPlaylist.addEventListener(KalturaEvent.COMPLETE, onPlaylistLoaded);
				listPlaylist.addEventListener(KalturaEvent.FAILED, fault);
				Studio.kc.post(listPlaylist);
			}


			/**
			 * All playlists were loaded - place them on the left side table
			 */
			private function onPlaylistLoaded(event:KalturaEvent):void {
				var kplrl:KalturaPlaylistListResponse;
				var kpl:KalturaPlaylist;
				var kmplf:KalturaMediaEntryFilterForPlaylist;

				var arr:Array = new Array();
				var plstVo:PlaylistVO;
				for each (var playlist:KalturaPlaylist in event.data.objects) {
					plstVo = new PlaylistVO();
					plstVo.entryId = playlist.id;
					plstVo.name = playlist.name.split("'").join("Â´");
					plstVo.mediaType = playlist.playlistType.toString();
					var playlistUrl:String = Studio.flashvars.protocol ? Studio.flashvars.protocol : "http://"; 
					playlistUrl += Studio.flashvars.host + "/index.php/partnerservices2/executeplaylist?playlist_id=" + playlist.id + "&partner_id=" + playlist.partnerId + "&subp_id=" + (Number(playlist.partnerId) * 100).toString() + "&format=8" + "&ks={ks}";
					plstVo.playlistUrl = encodeURIComponent(playlistUrl);
					plstVo.createAtAsString = dateFormatter.format(new Date(int(playlist.createdAt) * 1000));
					plstVo.duration = playlist.duration;
					arr.push(plstVo);
				}
				_playlistsTableDP = new ArrayCollection(arr);
				dispatchEvent(new Event(LIST_PLAYLIST_DONE));
				setWidgetPlaylistXML(_contentXml);

			}


			private function fault(event:KalturaEvent):void {
				var s:String = "Content fault: \n" + event.error.errorMsg;
				dispatchEvent(new ErrorEvent(ApsWizard.ALERT_USER, false, false, s));

			}



			//Group Playlist Manipulation
			////////////////////////////////////////////
			private function addPlaylistItem():void {
				if (playlistsTable.selectedItem) {
					var oldPos:int = widgetPlst.verticalScrollPosition;
					var newPlst:PlaylistVO = (playlistsTable.selectedItem as PlaylistVO).clone() as PlaylistVO;

					if (isSingleContent && _widgetPlstDP.length >= 1) {
						var s:String = ResourceManager.getInstance().getString('aps', 'onlyOnePlaylist');
						dispatchEvent(new ErrorEvent(ApsWizard.ALERT_USER, false, false, s));
						return;
					}

					_widgetPlstDP.addItem(newPlst);
					widgetPlst.selectedIndex = oldPos;

					if (oldPos > 0)
						widgetPlst.scrollToIndex(oldPos);


					dispatchEvent(new Event("detailsChanged"));
				}

			}


			private function removePlaylistItem():void {
				if (widgetPlst.selectedItem) {
					var oldPos:int = widgetPlst.verticalScrollPosition;
					try {
						_widgetPlstDP.removeItemAt(widgetPlst.selectedIndex);
					}
					catch (e:Error) {
					}

					widgetPlst.selectedIndex = oldPos;

					if (oldPos > 0)
						widgetPlst.scrollToIndex(oldPos);


					dispatchEvent(new Event("detailsChanged"));
				}
			}


			private function movePlstItemUp():void {
				if (widgetPlst.selectedItem) {
					if (widgetPlst.selectedIndex > 0) {
						var newIndex:int = widgetPlst.selectedIndex - 1;
						var item:Object = _widgetPlstDP.source.splice(widgetPlst.selectedIndex, 1)[0];
						_widgetPlstDP.source.splice(newIndex, 0, item);
						widgetPlst.selectedItem = item;

						if (widgetPlst.selectedIndex - 1 > 0)
							widgetPlst.scrollToIndex(widgetPlst.selectedIndex - 1);

						dispatchEvent(new Event("detailsChanged"));
					}
				}
			}


			private function movePlstItemDown():void {
				if (widgetPlst.selectedItem) {
					if (widgetPlst.selectedIndex < widgetPlst.dataProvider.length) {
						var newIndex:int = widgetPlst.selectedIndex + 1;
						var item:Object = _widgetPlstDP.source.splice(widgetPlst.selectedIndex, 1)[0];
						_widgetPlstDP.source.splice(newIndex, 0, item);

						widgetPlst.selectedItem = item;

						if (widgetPlst.selectedIndex + 1 > 0)
							widgetPlst.scrollToIndex(widgetPlst.selectedIndex + 1);

						dispatchEvent(new Event("detailsChanged"));
					}
				}
			}



			/**
			 * label function for media type column
			 * */
			private function getPlaylistMediaTypes(item:Object, column:DataGridColumn):String {
				var res:String = '';
				switch (item.mediaType) {
					case PlaylistTypes.STATIC:
						res = resourceManager.getString('aps', 'plTypeManual');
						break;
					case PlaylistTypes.DYNAMIC:
						res = resourceManager.getString('aps', 'plTypeDynamic');
						break;
					case PlaylistTypes.EXTERNAL:
						res = resourceManager.getString('aps', 'plTypeExternal');
						break;
				}

				return res;
			}



			/**
			 * generate XML representation for currently selected playlists
			 * @return XML
			 * */
			public function getWidgetPlaylistXML():XML {
				var str:String = "<playlistGroup id='' groupName=''>";
				for (var i:int = 0; i < _widgetPlstDP.length; i++) {
					str += "<var key='kpl" + i + "EntryId'  value='" + (_widgetPlstDP[i] as PlaylistVO).entryId + "' />";
					str += "<var key='playlistAPI.kpl" + i + "Url'  value='" + (_widgetPlstDP[i] as PlaylistVO).playlistUrl + "' />";
					str += "<var key='playlistAPI.kpl" + i + "Name'  value='" + (_widgetPlstDP[i] as PlaylistVO).name + "' />";
				}
				str += "</playlistGroup>";
				return new XML(str);
			}


			/**
			 * set selected lists
			 * @param xml	representation of required playlists
			 * */
			public function setWidgetPlaylistXML(xml:XML):Boolean {
				_widgetPlstDP.source = new Array();
				_contentXml = xml;
				var j:int = 0;
				for each (var prop:XML in xml.children()) {
					//Assumption that all the playlists are in _playlistsTableDP (no paging)!!
					if (prop.@key == "kpl" + j + "EntryId") {
						addPlaylistByEntryId(prop.@value);
						++j;
					}
				}

				return true;
			}


			private function addPlaylistByEntryId(entryId:String):void {
				for (var i:int = 0; i < _playlistsTableDP.length; i++) {
					if ((_playlistsTableDP[i] as PlaylistVO).entryId == entryId) {
						_widgetPlstDP.addItem((_playlistsTableDP[i] as PlaylistVO).clone());
					}
				}
			}
		]]>
	</mx:Script>
	
	<mx:DateFormatter id="dateFormatter" formatString="DD-MMM-YYYY H:NN" />

	<mx:HBox id="all" disabledOverlayAlpha="0" height="100%" width="100%">
		<mx:VBox width="100%" height="100%">
			<mx:Label text="{resourceManager.getString('aps', 'allPlaylists')}"/>
			
			<mx:VBox styleName="noVGap" width="100%" height="100%" >
				<mx:DataGrid id="playlistsTable" width="100%" height="100%" styleName="borderedDataGrid" rowHeight="36" verticalAlign="middle"
							 draggableColumns="false" sortableColumns="false" doubleClickEnabled="true"
							 itemDoubleClick="{addPlaylistItem()}" dataProvider="{_playlistsTableDP}">
					<mx:columns>
						<mx:DataGridColumn paddingLeft="4" paddingRight="4" dataField="name"
										   headerText="{resourceManager.getString('aps', 'plNameHeader')}"/>
						
						<mx:DataGridColumn paddingLeft="4" paddingRight="4" dataField="mediaType" width="80" 
										   headerText="{resourceManager.getString('aps', 'plTypeHeader')}" 
										   labelFunction="getPlaylistMediaTypes" />
							
						<mx:DataGridColumn paddingLeft="4" paddingRight="4" dataField="createAtAsString" width="140"
										   headerText="{resourceManager.getString('aps', 'plCreateHeader')}"/>
					</mx:columns>
				</mx:DataGrid>
				<mx:HBox height="{widgetPlstToolbar.height}" width="100%" styleName="DataGridActions" />
			</mx:VBox>
		</mx:VBox>
		
		<mx:HBox height="100%" styleName="plstAddRemoveCont" >
			<mx:Button id="removeBtn" buttonMode="true" styleName="removeLeftBtn" click="removePlaylistItem()"/>
			<mx:Button id="addBtn" buttonMode="true" styleName="addRightBtn" click="addPlaylistItem()"/>
		</mx:HBox>
		
		<mx:VBox width="100%" height="100%" >
			<mx:Label text="{resourceManager.getString('aps', 'selectedPlaylists')}"/>
			<mx:VBox styleName="noVGap" width="100%" height="100%" >
				<mx:DataGrid id="widgetPlst" width="100%" height="100%" styleName="borderedDataGrid" rowHeight="36" verticalAlign="middle"
							 sortableColumns="false" doubleClickEnabled="true" itemDoubleClick="{removePlaylistItem()}"
							 dataProvider="{_widgetPlstDP}">
					<mx:columns>
						<mx:DataGridColumn paddingLeft="4" paddingRight="4" dataField="name"
										   headerText="{resourceManager.getString('aps', 'plNameHeader')}"/>
						
						<mx:DataGridColumn paddingLeft="4" paddingRight="4" dataField="mediaType" width="80" 
										   headerText="{resourceManager.getString('aps', 'plTypeHeader')}" 
										   labelFunction="getPlaylistMediaTypes" />
						
						<mx:DataGridColumn paddingLeft="4" paddingRight="4" dataField="createAtAsString" width="140"
										   headerText="{resourceManager.getString('aps', 'plCreateHeader')}"/>
					</mx:columns>
				</mx:DataGrid>
				
				<mx:VBox id="widgetPlstToolbar" width="100%" styleName="DataGridActions" verticalGap="0">
					<mx:Button id="upBtn" buttonMode="true" styleName="movUpBtn" click="movePlstItemUp()"/>
					<mx:Button id="downBtn" buttonMode="true" styleName="movDownBtn" click="movePlstItemDown()"/>
				</mx:VBox>
			</mx:VBox>
				
		</mx:VBox>
	</mx:HBox>

	<mx:VBox width="100%" styleName="plstContentDtlsCont" >
		<mx:Label text="{resourceManager.getString('aps', 'totalPlaylists', [_widgetPlstDP.length])}" />
	</mx:VBox>
</mx:VBox>
