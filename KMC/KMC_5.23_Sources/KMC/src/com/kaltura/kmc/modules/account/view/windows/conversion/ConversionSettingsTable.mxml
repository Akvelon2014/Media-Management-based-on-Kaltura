<?xml version="1.0" encoding="utf-8"?>
<mx:DataGrid xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" rowHeight="30" headerRelease="preventDefault(event)"
			 selectable="false" creationComplete="creationCompleteHandler(event)">
	<mx:Script>
		<![CDATA[
			import com.kaltura.kmc.modules.account.events.ConversionSettingsEvent;
			import com.kaltura.kmc.modules.account.vo.ConversionProfileVO;
			import com.kaltura.kmc.modules.account.vo.FlavorVO;
			import com.kaltura.vo.KalturaConversionProfileAssetParams;
			import com.kaltura.vo.KalturaThumbParams;
			
			import mx.collections.ArrayCollection;
			import mx.core.Application;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;

			/**
			 * defines the value for the type attribute of the editFlavor event
			 * */
			public static const EDIT_FLAVOR:String = "editFlavor";

			/**
			 * defines the value for the type attribute of the flavorSelectionChanged event
			 * */
			public static const FLAVOR_SELECTION_CHANGED:String = "flavorSelectionChanged";


			private var _allSelected:Boolean = false;

			/**
			 * @copy #cProfile
			 * */
			private var _cProfile:ConversionProfileVO;


			/**
			 * @copy #dataEditable
			 * */
			private var _dataEditable:Boolean = true;


			/**
			 * make sure only "real" flavours are listed on the profile. <br>
			 * since thumbs params are part of a conversionProfile, we scan them too.
			 * */
			private function validateProfileFlavors():void {
				if (!_cProfile || !dataProvider )
					return;

				var idsArr:Array = _cProfile.profile.flavorParamsIds.split(',');
				var currentFlavors:Array = new Array(); // flavours in the CP
				var vo:FlavorVO;
				var isFlavor:Boolean; // is a media flavour

				for each (var id:String in idsArr) {
					isFlavor = false;
					for each (vo in dataProvider) {
						if (vo.kFlavor.id == int(id)) {
							currentFlavors.push(id);
							isFlavor = true;
							break;
						}
					}
					if (!isFlavor) {
						// if it's not a media flavor we keep it, so we don't override 
						// thumbparams, captionsparams, or anything else.
						currentFlavors.push(id);
					}
				}
				
				var ids:String = currentFlavors.length == 0 ? null : currentFlavors.join(',');
				_cProfile.profile.flavorParamsIds = ids;
			}


			private function preventDefault(event:DataGridEvent):void {
				event.preventDefault();
			}


			public function dispatchSelection(event:Event = null):void {
				var tsEvent:ConversionSettingsEvent = new ConversionSettingsEvent(ConversionSettingsEvent.MARK_FLAVORS, !allSelected);
				tsEvent.dispatch();
			}


			public function isFlavorsSelected():Boolean {
				return !(_cProfile.profile.flavorParamsIds == null);
			}



			/**
			 * check if the flavor is selected in the current profile
			 * */
			public function isGivenFlavorSelected(flavor:FlavorVO):Boolean {
				if (!cProfile || !cProfile.profile.flavorParamsIds)
					return false;
				var idsArr:Array = cProfile.profile.flavorParamsIds.split(',');

				for each (var id:String in idsArr) {
					if (int(id) == flavor.kFlavor.id) {
						return true;
					}
				}
				return false;

			}


			protected function creationCompleteHandler(event:FlexEvent):void {
				addEventListener(ConversionSettingsTable.EDIT_FLAVOR, openEditFlavor);
				addEventListener(ConversionSettingsTable.FLAVOR_SELECTION_CHANGED, updateFlavorsList);
			}


			/**
			 * open flavour drilldown
			 * */
			protected function openEditFlavor(e:Event):void {
				var flavor:FlavorVO = e.target.data as FlavorVO;
				var editFlavorPopup:ConversionFlavorSettings = new ConversionFlavorSettings();
				editFlavorPopup.profileName = cProfile.profile.name;
				editFlavorPopup.flavorVO = flavor;
				editFlavorPopup.cpap = getCpap(flavor.kFlavor.id);
				PopUpManager.addPopUp(editFlavorPopup, (Application.application as DisplayObject), true);
				PopUpManager.centerPopUp(editFlavorPopup);
			}
			
			
			/**
			 * return a matching cpap from the profile's flavours list
			 * */
			protected function getCpap(flavorId:int):KalturaConversionProfileAssetParams {
				for each (var cpap:KalturaConversionProfileAssetParams in cProfile.flavors) {
					if (cpap.assetParamsId == flavorId) {
						return cpap;
					}
				}
				return null;
			}


			/**
			 * updating the flavors list in the conversion profile
			 */
			private function updateFlavorsList(e:Event):void {
				var flavorObj:FlavorVO = e.target.data as FlavorVO;
				var idsArr:Array;
				if (cProfile.profile.flavorParamsIds == null) {
					idsArr = [];
				}
				else {
					idsArr = cProfile.profile.flavorParamsIds.split(',');
				}
				var cpap:KalturaConversionProfileAssetParams;
				if (flavorObj.selected) {
					idsArr.push(flavorObj.kFlavor.id);
					// push a cpap
					cpap = new KalturaConversionProfileAssetParams();
					cpap.conversionProfileId = cProfile.profile.id;
					cpap.assetParamsId = flavorObj.kFlavor.id;
					cProfile.flavors.push(cpap);
				}
				else {
					var index:int = 0;
					for each (var id:String in idsArr) {
						if (int(id) == flavorObj.kFlavor.id) {
							idsArr.splice(index, 1);
							break;
						}
						index++;
					}
					// remove a cpap
					for (var i:int = 0; i<cProfile.flavors.length; i++) {
						cpap = cProfile.flavors[i] as KalturaConversionProfileAssetParams;
						if (cpap.assetParamsId == flavorObj.kFlavor.id) {
							cProfile.flavors.splice(i, 1);
							break;
						}
					}
				}
				var ids:String = idsArr.join(',');
				ids = StringUtil.trim(ids) == '' ? null : ids;
				cProfile.profile.flavorParamsIds = ids;
				(dataProvider as ArrayCollection).refresh();
			}


			/**
			 * should data in the table be editable
			 * */
			public function get dataEditable():Boolean {
				return _dataEditable;
			}


			/**
			 * @private
			 */
			public function set dataEditable(value:Boolean):void {
				_dataEditable = value;
				for each (var vo:FlavorVO in dataProvider) {
					vo.editable = value;
				}
			}


			[Bindable]
			public function get allSelected():Boolean {
				return _allSelected;
			}


			public function set allSelected(allSelected:Boolean):void {
				_allSelected = allSelected;
			}


			[Bindable]
			/**
			 * the conversion profile the table is currently showing
			 * */
			public function get cProfile():ConversionProfileVO {
				return _cProfile;
			}


			public function set cProfile(val:ConversionProfileVO):void {
				_cProfile = val;
				validateProfileFlavors();
			}


			override public function set dataProvider(value:Object):void {
				// roles & permissions - set editable
				for each (var vo:FlavorVO in value) {
					vo.editable = _dataEditable;
				}
				super.dataProvider = value;
				validateProfileFlavors();
			}
		]]>
	</mx:Script>


	<mx:columns>
		<mx:DataGridColumn width="40"
						   itemRenderer="com.kaltura.kmc.modules.account.view.windows.conversion.renderers.FlavorSelectionRenderer"/>
		<mx:DataGridColumn headerText="{resourceManager.getString('account','transIdCol')}" dataField="id" width="30"
						   itemRenderer="com.kaltura.kmc.modules.account.view.windows.conversion.renderers.FlavorIdRenderer"/>
		<mx:DataGridColumn headerText="{resourceManager.getString('account','transConvFlavorsCol')}"
						   dataField="transcodingFlavor"
						   itemRenderer="com.kaltura.kmc.modules.account.view.windows.conversion.renderers.FlavorNameRenderer"/>
		<mx:DataGridColumn headerText="{resourceManager.getString('account','transDescCol')}" dataField="description"
						   itemRenderer="com.kaltura.kmc.modules.account.view.windows.conversion.renderers.FlavorDescriptionRenderer"/>
		<mx:DataGridColumn headerText="{resourceManager.getString('account','transFormatCol')}" dataField="format"
						   itemRenderer="com.kaltura.kmc.modules.account.view.windows.conversion.renderers.FlavorFormatRenderer"/>
		<mx:DataGridColumn headerText="{resourceManager.getString('account','transCodecCol')}" dataField="codec"
						   itemRenderer="com.kaltura.kmc.modules.account.view.windows.conversion.renderers.FlavorCodecRenderer"/>
		<mx:DataGridColumn headerText="{resourceManager.getString('account','transBitrateCol')}" dataField="bitrate"
						   itemRenderer="com.kaltura.kmc.modules.account.view.windows.conversion.renderers.FlavorBitrateRenderer"/>
		<mx:DataGridColumn headerText="{resourceManager.getString('account','transDimensionsCol')}"
						   dataField="dimensions"
						   itemRenderer="com.kaltura.kmc.modules.account.view.windows.conversion.renderers.FlavorDimensionsRenderer"/>
	</mx:columns>
</mx:DataGrid>
