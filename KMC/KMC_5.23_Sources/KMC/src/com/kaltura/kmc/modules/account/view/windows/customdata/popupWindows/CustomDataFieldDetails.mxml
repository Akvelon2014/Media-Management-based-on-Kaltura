<?xml version="1.0" encoding="utf-8"?>
<HelpTitleWindow xmlns="com.kaltura.containers.*" xmlns:mx="http://www.adobe.com/2006/mxml"
				 title="{resourceManager.getString('account','customNewFieldPopupTitle')}" width="390"
				 xmlns:conversionsettingswindow="com.kaltura.kmc.view.windows.conversionsettingswindow.*"
				 close="closeWindow()" showCloseButton="true" creationComplete="onCreationComplete(event)"
				 help="{help()}" styleName="TitleWindowType2" >
	<states>
		<mx:State name="{EDIT_MODE_STATE}">
			<mx:SetProperty name="title" value="{resourceManager.getString('account','customEditFieldPopupTitle')}"/>
		</mx:State>
	</states>
	<mx:Script>
		<![CDATA[
			import com.kaltura.base.types.MetadataCustomFieldMaxOcuursTypes;
			import com.kaltura.base.types.MetadataCustomFieldTypes;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.modules.account.events.AddMetadataFieldEvent;
			import com.kaltura.kmc.modules.account.events.MetadataFieldEvent;
			import com.kaltura.vo.KMCMetadataProfileVO;
			import com.kaltura.vo.MetadataFieldVO;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			import mx.utils.UIDUtil;
			import mx.validators.StringValidator;
			
			private const ITEM_WIDTH:int = 180;
			private const SPACER_HEIGHT:int = 10;

			public static const EDIT_MODE_STATE:String = "edit mode state";
			public static const FIELD_ID_PREFIX:String = "md_";
			public static const MAX_NAME_LENGTH:int = 25;
			public static var INVALID_CHARS_REGEXP:RegExp = /[<>'"&]/;
			public static var INVALID_OPTIONS_REGEXP:RegExp = /[`;!#*\+,?\\{}<>"\[\]]/;
			public static var INVALID_OPTIONS_PREFIX_REGEXP:RegExp = /^-/;
			public static var INVALID_NAME_PREFIX_REGEXP:RegExp = /^[0-9`~:;!@#$%\^&*()\-_+=|',.?\/\\{}<>"\[\]]/;

			
			

			[Bindable]
			/**
			 * optional field types
			 * */
			private var _typeList:Array;
			
			private var _textType:String;
			private var _dateType:String;
			private var _listType:String;
			private var _objectType:String;

			[Bindable]
			/**
			 * optional values for max chars
			 * */
			private var _maxValuesList:Array;
			private var _singleValue:String;
			private var _unboundValues:String;

			[Bindable]
			/**
			 * optional values for appear in list 
			 * */
			private var _appearInSearchList:Array;
			
			private var _appearYes:String;
			private var _appearNo:String;
			
			/**
			 * set to true if any change occured
			 * */
			private var _dirty:Boolean = false;

			/**
			 * indicates label is valid
			 * */
			private var _validLabel:Boolean = false;
			
			/**
			 * currently edited field
			 * */
			public var metadataField:MetadataFieldVO;
			
			/**
			 * the profile to which this field belongs 
			 * */
			public var metadataProfile:KMCMetadataProfileVO;


			private function help():void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, 'section_custom_data_field'));
			}

			/**
			 * @copy #editable
			 * */
			private var _editable:Boolean = true;


			/**
			 * sets the displayed data and the data providers for the comboBoxes
			 * */
			private function onCreationComplete(event:Event):void {
				_textType = resourceManager.getString('account', 'fieldTextType');
				_dateType = resourceManager.getString('account', 'fieldDateType');
				_listType = resourceManager.getString('account', 'fieldListType');
				_objectType = resourceManager.getString('account', 'fieldObjectType');
				_singleValue = resourceManager.getString('account', 'maxValuesSingleValue');
				_unboundValues = resourceManager.getString('account', 'maxValuesUnbound');
				_appearYes = resourceManager.getString('account', 'customAppearInSearchTrue');
				_appearNo = resourceManager.getString('account', 'customAppearInSearchFalse');

				_typeList = new Array(_textType, _dateType, _listType, _objectType);
				_maxValuesList = new Array(_singleValue, _unboundValues);
				_appearInSearchList = new Array(_appearYes, _appearNo);

				if (metadataField)
					setMetadataFieldValues(metadataField);
				
				if (currentState == EDIT_MODE_STATE) {
					PermissionManager.getInstance().applyAllAttributes(this, "customDataDrilldown_edit");
				}
				else {
					PermissionManager.getInstance().applyAllAttributes(this, "customDataDrilldown_add");
				}
			}


			/**
			 * sets the displayed values to be according to the data in the selected field
			 * */
			public function setMetadataFieldValues(field:MetadataFieldVO):void {
				fieldNameInput.text = field.defaultLabel;
				appearInSearchList.selectedItem = field.appearInSearch ? _appearYes : _appearNo;

				switch (field.type) {
					case MetadataCustomFieldTypes.TEXT:
						fieldTypeList.selectedItem = _textType;
						break;
					case MetadataCustomFieldTypes.DATE:
						fieldTypeList.selectedItem = _dateType;
						if (field.timeControl) {
							timeControlCB.selected = true;
						}
						break;
					case MetadataCustomFieldTypes.OBJECT:
						fieldTypeList.selectedItem = _objectType;
						break;
					case MetadataCustomFieldTypes.LIST:
						fieldTypeList.selectedItem = _listType;
						if (field.optionalValues)
							optionalValuesInput.text = field.optionalValues.join('\r');
						break;
				}

			//	typeChanged();
				appearInSearchList.selectedItem = field.appearInSearch ? _appearYes : _appearNo;
				maxValuesList.selectedItem = field.maxNumberOfValues == MetadataCustomFieldMaxOcuursTypes.SINGLE ? _singleValue : _unboundValues;
				descriptionInput.text = field.description;
				fullDescriptionInput.text = field.fullDescription;
			}


			/**
			 * close window event - when pressing the X button, cancel button or after saving the data
			 * dispatch a CloseEvent
			 */
			private function closeWindow(event:Event = null):void {
				if (_dirty)
					Alert.show(resourceManager.getString('account', 'saveChangesQ'), "", Alert.YES | Alert.NO, null, saveChangesQAndExit);
				else
					PopUpManager.removePopUp(this);
			}


			/**
			 * handles user selection on the "are you sure" alert
			 * */
			private function saveChangesQAndExit(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					saveBtnHandler();
				}
				else
					PopUpManager.removePopUp(this);
			}


			/**
			 * This function takes the current fields' name input and converts it to
			 * a valid name we can add to the XSD. A valid name can only contain letters and numbers.
			 * */
			private function createValidFieldName():String {
				//removes invalid chars
				var validInput:String = fieldNameInput.text.replace(/[~`:;,!@#$%\^*()\-_+.={}|?\\\/\[\]]/g, "");
				var labelTokens:Array = validInput.split(" ");
				for (var i:int = 0; i < labelTokens.length; i++) {
					labelTokens[i] = labelTokens[i].charAt(0).toUpperCase() + labelTokens[i].substr(1, labelTokens[i].length);
				}
				validInput = labelTokens.join("");
				return validInput;
			}


			/**
			 * looks for identical system name in the existing fields,
			 * if name already exist then the given system name is not valid
			 * */
			private function isValidSystemName(sysName:String):Boolean {
				for each (var field:MetadataFieldVO in metadataProfile.metadataFieldVOArray) {
					if (field.name == sysName)
						return false;
				}

				return true;
			}


			/**
			 * this function handles the "save" button click. it updates the metadataField with
			 * the data appear in the screen.
			 * */
			private function saveBtnHandler(event:Event = null):void {
				nameValidator.validate(fieldNameInput.text);
				if (!_validLabel) {
					Alert.show(resourceManager.getString('account', 'metadataNoNameError'), resourceManager.getString('account', 'metadataInvalidInput'));
					return;
				}

				if (INVALID_NAME_PREFIX_REGEXP.test(fieldNameInput.text)) {
					Alert.show(resourceManager.getString('account', 'metadataStartsWithDigitError'), resourceManager.getString('account', 'metadataInvalidInput'));
					return;
				}

				// Removed the 25 character length restriction due to product request- QC 847.
//				if (fieldNameInput.text.length > MAX_NAME_LENGTH) {
//					Alert.show(resourceManager.getString('account', 'metadataNameTooLongError'), resourceManager.getString('account', 'metadataInvalidInput'));
//					return;
//				}

				if (INVALID_CHARS_REGEXP.test(fieldNameInput.text) || INVALID_CHARS_REGEXP.test(descriptionInput.text) || INVALID_CHARS_REGEXP.test(fullDescriptionInput.text)) {
					Alert.show(resourceManager.getString('account', 'customFieldsStringError'), resourceManager.getString('account', 'metadataInvalidInput'));
					return;
				}

				if (fieldTypeList.selectedLabel == _listType && !StringUtil.trim(optionalValuesInput.text)) {
					Alert.show(resourceManager.getString('account', 'customFieldsValuesMissingError'), resourceManager.getString('account', 'metadataInvalidInput'));
					return;
				}
				if (INVALID_OPTIONS_REGEXP.test(optionalValuesInput.text)) {
					Alert.show(resourceManager.getString('account', 'customFieldsValuesError'), resourceManager.getString('account', 'metadataInvalidInput'));
					return;
				}
				var values:Array = optionalValuesInput.text.split('\r');
				for each (var value:String in values) {
					if (INVALID_OPTIONS_PREFIX_REGEXP.test(value)) {
						Alert.show(resourceManager.getString('account', 'customFieldsValuesPrefixError'), resourceManager.getString('account', 'metadataInvalidInput'));
						return;
					}		
				}

				if (currentState != EDIT_MODE_STATE) {
					var systemName:String = createValidFieldName();
					if (!isValidSystemName(systemName)) {
						Alert.show(resourceManager.getString('account', 'metadataNameUniqueError'), resourceManager.getString('account', 'metadataInvalidInput'));
						return;
					}

					//creates the new field and updates its content
					metadataField = new MetadataFieldVO(FIELD_ID_PREFIX + UIDUtil.createUID());
					metadataField.name = systemName;
					updateField();
					switch (maxValuesList.selectedLabel) {
						case _singleValue:
							metadataField.maxNumberOfValues = MetadataCustomFieldMaxOcuursTypes.SINGLE;
							break;
						case _unboundValues:
							metadataField.maxNumberOfValues = MetadataCustomFieldMaxOcuursTypes.UNBOUND;
							break;
					}
					switch (fieldTypeList.selectedLabel) {
						case _textType:
							metadataField.type = MetadataCustomFieldTypes.TEXT;
							break;
						case _dateType:
							metadataField.type = MetadataCustomFieldTypes.DATE;
							break;
						case _objectType:
							metadataField.type = MetadataCustomFieldTypes.OBJECT;
							break;
						case _listType:
							metadataField.type = MetadataCustomFieldTypes.LIST;
							break;
					}

					this.dispatchEvent(new AddMetadataFieldEvent(AddMetadataFieldEvent.ADD, metadataField));
				}

				else {
					updateField();
					var editMetadataField:MetadataFieldEvent = new MetadataFieldEvent(MetadataFieldEvent.EDIT, metadataField);
					editMetadataField.dispatch();
				}

				PopUpManager.removePopUp(this);
			}


			/**
			 * updates the metadataField with the inserted values
			 * */
			private function updateField():void {
				if (metadataField) {
					metadataField.defaultLabel = StringUtil.trim(fieldNameInput.text);
					if (!metadataField.displayedLabel)
						metadataField.displayedLabel = metadataField.defaultLabel;

					metadataField.appearInSearch = appearInSearchList.selectedLabel == _appearYes;
					metadataField.description = StringUtil.trim(descriptionInput.text);
					metadataField.fullDescription = StringUtil.trim(fullDescriptionInput.text);

					if (fieldTypeList.selectedLabel == _listType) {
						var input:Array = optionalValuesInput.text.split('\r');
						var output:ArrayCollection = new ArrayCollection();
						for each (var val:String in input) {
							//to avoid inserting of empty lines
							if (val != "") {
								val = StringUtil.trim(val);
								if (!output.contains(val)) {
									output.addItem(val);
								}
							}
						}
						metadataField.optionalValues = output.source;
					}
					
					if (fieldTypeList.selectedLabel == _dateType) {
						metadataField.timeControl = timeControlCB.selected;
					}
				}
			}


			/**
			 * if any of the fields changes, the dirty flag will be true
			 * */
			private function changeHandler(event:Event):void {
				_dirty = true;
			}


		/* 	private function typeChanged():void {
				 if ((fieldTypeList.selectedItem == _dateType) || (fieldTypeList.selectedItem == _objectType)) {
					appearInSearchList.selectedItem = _appearNo;
					appearInSearchList.enabled = false;
				} 
				else {
					appearInSearchList.selectedItem = _appearYes;
					appearInSearchList.enabled = _editable;
				}
			} */

			[Bindable]
			/**
			 * is the data shown in the window editable
			 * */
			public function get editable():Boolean {
				return _editable;
			}


			/**
			 * @private
			 * */
			public function set editable(value:Boolean):void {
				_editable = value;
				saveBtn.visible = value;
				fullDescriptionInput.editable = value;
				descriptionInput.editable = value;
				appearInSearchList.enabled = value;
				maxValuesList.enabled = value;	// binding to currentState!=EDIT_MODE_STATE, not supposed to be a problem
				optionalValuesInput.editable = value;
				fieldTypeList.enabled = value;	// binding to currentState!=EDIT_MODE_STATE, not supposed to be a problem
				fieldNameInput.editable = value;
				timeControlCB.enabled = value;
			}
			
			private function fieldTypeList_changeHandler(event:ListEvent):void
			{
				appearInSearchList.selectedItem = fieldTypeList.selectedLabel != _dateType ? _appearYes : _appearNo;
			}
		]]>
	</mx:Script>

	<mx:Form width="100%" height="100%" verticalGap="0">
		<mx:FormItem label="{resourceManager.getString('account','addFieldName')}" labelStyleName="metadataFormLabel">
			<mx:TextInput id="fieldNameInput" width="{ITEM_WIDTH}" paddingLeft="5" change="changeHandler(event)"/>
		</mx:FormItem>
		<mx:Spacer height="{SPACER_HEIGHT}"/>
		<mx:FormItem label="{resourceManager.getString('account','addFieldType')}" labelStyleName="metadataFormLabel">
			<mx:ComboBox id="fieldTypeList" dataProvider="{_typeList}" width="180" paddingLeft="5" editable="false"
						 enabled="{currentState!=EDIT_MODE_STATE}" change="fieldTypeList_changeHandler(event)"/>
		</mx:FormItem>
		<mx:Spacer height="{SPACER_HEIGHT}"/>
		
		<!-- optional values for text select list -->
		<mx:HBox visible="{fieldTypeList.selectedItem == _listType}"
				 includeInLayout="{fieldTypeList.selectedItem == _listType}">
			<mx:VBox>
				<mx:Label text="{resourceManager.getString('account','addFieldOptionalValues')}"
						  styleName="metadataFormLabel"/>
				<mx:Label text="{resourceManager.getString('account','addFieldOptionalValuesInfo')}"
						  styleName="smallLabel"/>
			</mx:VBox>
			<mx:TextArea id="optionalValuesInput" x="{fieldTypeList.x}" width="{ITEM_WIDTH}"
						 height="{3*fieldNameInput.height}" styleName="optionalValuesInput"
						 change="changeHandler(event)"/>
		</mx:HBox>
		
		<!-- time control for dates -->
		<mx:HBox visible="{fieldTypeList.selectedItem == _dateType}"
				 includeInLayout="{fieldTypeList.selectedItem == _dateType}">
			<mx:CheckBox id="timeControlCB" label="{resourceManager.getString('account','addFieldIncludeTime')}"
						 styleName="metadataFormLabel" change="changeHandler(event)" />
		</mx:HBox>
			
		<mx:Spacer height="{SPACER_HEIGHT}"/>
		<mx:FormItem label="{resourceManager.getString('account','addFieldMaxValues')}"
					 labelStyleName="metadataFormLabel">
			<mx:ComboBox id="maxValuesList" dataProvider="{_maxValuesList}" width="{ITEM_WIDTH}" paddingLeft="5"
						 editable="false" enabled="{currentState!=EDIT_MODE_STATE}"/>
		</mx:FormItem>
		<mx:Spacer height="{SPACER_HEIGHT}"/>
		<mx:FormItem label="{resourceManager.getString('account','addFieldAppearInSearch')}"
					 labelStyleName="metadataFormLabel">
			<mx:ComboBox id="appearInSearchList" dataProvider="{_appearInSearchList}" width="{ITEM_WIDTH}"
						 paddingLeft="5" editable="false"/>
		</mx:FormItem>
		<mx:Spacer height="{SPACER_HEIGHT}"/>
		<mx:FormItem label="{resourceManager.getString('account','addFieldDescription')}"
					 labelStyleName="metadataFormLabel">
			<mx:TextArea id="descriptionInput" width="{ITEM_WIDTH}" height="{3*fieldNameInput.height}" paddingLeft="5"/>
		</mx:FormItem>
		<mx:Spacer height="{SPACER_HEIGHT}"/>
		<mx:FormItem label="{resourceManager.getString('account','addFieldFullDescription')}"
					 labelStyleName="metadataFormLabel">
			<mx:TextArea id="fullDescriptionInput" width="{ITEM_WIDTH}" height="{3*fieldNameInput.height}"
						 paddingLeft="5" />
		</mx:FormItem>
		<mx:Spacer height="{SPACER_HEIGHT}"/>
	</mx:Form>

	<mx:ControlBar width="100%" horizontalAlign="center" paddingBottom="2" paddingLeft="2" paddingRight="2"
				   paddingTop="2">
		<mx:Button label="{resourceManager.getString('account','saveButtonLabel')}" useHandCursor="true"
				   buttonMode="true" click="saveBtnHandler(event)" id="saveBtn" />
	</mx:ControlBar>

	<mx:StringValidator id="nameValidator" property="text" required="true" valid="_validLabel = true;"
						invalid="_validLabel = false;"/>
</HelpTitleWindow>
