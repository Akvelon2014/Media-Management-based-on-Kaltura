<?xml version="1.0" encoding="utf-8"?>
<!--
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 Modified by Akvelon Inc.
 2014-06-30
 http://www.akvelon.com/contact-us
-->

<containers:HelpTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:containers="com.kaltura.containers.*"
							verticalScrollPolicy="off" height="476" width="476" showCloseButton="true"
							close="closeHandler(event)" layout="vertical" help="{onHelp()}"
							creationComplete="creationCompleteHandler(event)" enabled="{!isLoading}">
	<mx:Metadata>
		[Event(name="save", type="flash.events.Event")] 
		[Event(name="close", type="flash.events.Event")] 
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.adobe.utils.ArrayUtil;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.kmc.events.KmcHelpEvent;
			import com.kaltura.kmc.events.KmcNavigationEvent;
			import com.kaltura.kmc.modules.admin.business.AdvancedPermissionGroupManager;
			import com.kaltura.kmc.modules.admin.business.PermissionGroupManager;
			import com.kaltura.kmc.modules.admin.model.DrilldownMode;
			import com.kaltura.utils.ObjectUtil;
			import com.kaltura.vo.KalturaUserRole;
			
			import mx.collections.ArrayCollection;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.CheckBox;
			import mx.controls.LinkButton;
			import mx.controls.Spacer;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.resources.IResourceManager;
			import mx.resources.ResourceManager;
			import mx.validators.ValidationResult;

			[Bindable]
			public var isLoading:Boolean;
			/**
			 * value of the type property for the <code>save</code> event
			 * */
			public static const SAVE:String = "rdd_save";

			/**
			 * value of the type property for the <code>save</code> event
			 * */
			public static const CLOSE:String = "rdd_close";

			/**
			 * All PermissionGroupManagers array
			 */
			private var _allPermissionGroupManagers:Array = new Array();

			[ArrayElementType("CheckBox")]
			/**
			 * All checkboxes array (<code>CheckBox</code> instances)
			 */
			private var _allCheckboxes:Array = new Array();

			/**
			 * partner's permissions uiconf
			 * */
			protected var _formData:XML;

			/**
			 * creationComplete event occured in the past?
			 * */
			private var _ready:Boolean;

			/**
			 * @copy #role
			 * */
			private var _role:KalturaUserRole;


			[Bindable]
			/**
			 * make changes to this user, so we can revert easily.
			 * */
			private var _undoRole:KalturaUserRole;

			/**
			 * all partner's roles
			 * (KalturaUserRole elements)
			 * */
			private var _roles:ArrayCollection;

			/**
			 * @copy #mode
			 * */
			private var _mode:String = DrilldownMode.ADD;

			/**
			 * A list of special features that the partner has (IE live stream, ads,custom Data)
			 */
			private var _partnerFeatures:Array;

			[Bindable]
			/**
			 * is the partner missing any features
			 * */
			private var _isMissingFeature:Boolean = false;

			private var _roleEditEnabled : Boolean = true;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				_ready = true;
				// re-trigger the mode setter
				setMode(_mode);

				// text fields:
				if (_undoRole.name) {
					nameTi.text = _undoRole.name;
				}
				else {
					nameTi.text = ResourceManager.getInstance().getString('admin', 'role_name_default');
				}
				descriptionTi.text = _undoRole.description;

				// create form:
				var groups:XMLList = _formData.permissions.permissionGroup;
				for each (var group:XML in groups) {
					myForm.addChild(buildGroup(group));
				}
				if (_mode == DrilldownMode.ADD) {
					PermissionManager.getInstance().applyAllAttributes(this, "roleDrilldown_add");
				}
				else {
					PermissionManager.getInstance().applyAllAttributes(this, "roleDrilldown_edit");
				}

				fillPermissions(_undoRole.permissionNames);
			}



			/**
			 * hide all inner checkboxes 
			 * */
			protected function collapseAll(event:MouseEvent):void {
				for each (var pm:PermissionGroupManager in _allPermissionGroupManagers) {
					pm.isOpen = false;
				}
			}


			/**
			 * show all inner checkboxes
			 * */
			protected function expandAll(event:MouseEvent):void {
				for each (var pm:PermissionGroupManager in _allPermissionGroupManagers) {
					pm.isOpen = true;
				}
			}


			/**
			 * "x" botton clicked, confirm no changes and close.
			 * */
			protected function closeHandler(event:Event):void {
				var needSave:Boolean = !ObjectUtil.compareObjects(_role, _undoRole);
				if (needSave) {
					Alert.show(ResourceManager.getInstance().getString('admin', 'discard_changes'), ResourceManager.getInstance().getString('admin', 'discard_changes_title'), Alert.YES | Alert.NO, null, messageReleaseHandler);
				}
				else {
					requestClose();
				}
			}


			/**
			 * close window and discard changes or leave window open
			 * */
			protected function messageReleaseHandler(e:CloseEvent):void {
				if (e.detail == Alert.YES) {
					requestClose();
				}
			}


			/**
			 * dispatch close event
			 * */
			protected function requestClose():void {
				dispatchEvent(new Event(RoleDrilldown.CLOSE));
			}


			/**
			 * check if any updates were made.
			 * if so, ask to save new data.
			 * */
			protected function requestSave():void {
				var needSave:Boolean = !ObjectUtil.compareObjects(_role, _undoRole);
				if (needSave) {
					dispatchEvent(new Event(RoleDrilldown.SAVE));
				}
				else {
					requestClose();
				}
			}



			/**
			 * pass initial data.
			 * @param role 		the role to edit / create
			 * @param mode		edit / add mode
			 * @param partnerPermissions	all partner's permissions (used for editing roles)
			 * @param partnerFeatures		special features the partner has
			 * */
			public function init(role:KalturaUserRole, mode:String, partnerPermissions:XML, partnerFeatures:String, roles:ArrayCollection):void {
				_formData = partnerPermissions;
				_partnerFeatures = partnerFeatures.split(",");
				_roles = roles;
				setRole(role);
				setMode(mode);
			}


			/**
			 * This function takes an XML of a group and builds a VBox with a checkbox for the group name
			 * and its children checkboxes (if needed). All checkboxs are pushed to a member array - allCheckboxes.
			 * The checkbox id is its permission id, for checkboxes without children as well.
			 * Inner checkboxes has the instance of their parent as their data.
			 */
			private function buildGroup(group:XML, debug:Boolean = true):VBox {
				var vb:VBox = new VBox();
				vb.percentWidth = 100;
				vb.id = group..@text.toString().split(" ").join();
				//build the top level checkbox
				var groupCb:CheckBox = new CheckBox();
				groupCb.label = group.attribute("text");
				groupCb.id = group.attribute("id")[0].toString();
				groupCb.setStyle("styleName", "adminMainCheckbox");
				if (group.attribute("dependsOnFeature").toString().length > 0) {
					var res:Boolean = checkIfPartnerHasFeature(group.attribute("dependsOnFeature").toString());
					groupCb.enabled = res;
					if (!res) {
						_isMissingFeature = true;
					}
				}
				if (debug)
					groupCb.toolTip = group.attribute("id")[0].toString();
				_allCheckboxes.push(groupCb);
				groupCb.data = {isGroup: true};


				//create a container for the group and the option button 
				var hbox:HBox = new HBox
				vb.addChild(hbox);
				hbox.percentWidth = 100;
				hbox.addChild(groupCb);

				var permissions:XMLList = group..permission;

				//special case for group without children (base only)
				if (permissions.length() == 0) {
					return vb;
				}

				// add Group Controls (hbox, groupcb):
				var spacer:Spacer = new Spacer();
				hbox.addChild(spacer);
				spacer.percentWidth = 100;

				var openLinkBtn:LinkButton = new LinkButton();
				openLinkBtn.label = ResourceManager.getInstance().getString('admin', 'advanced');
				hbox.addChild(openLinkBtn);

				var closeLinkBtn:LinkButton = new LinkButton();
				closeLinkBtn.label = ResourceManager.getInstance().getString('admin', 'close')
				hbox.addChild(closeLinkBtn);
				// -----------------

				var innerCbArray:Array = new Array();
				// build the inner checkboxes 
				var cb:CheckBox;
				var showButtons:Boolean = true;
				// override groups that has one item inside and marked with hideGroup="true"
				if (group.attribute("hideGroup").toString() == "true") {
					// assuming group has 1 child, it will override its own text & id from its child.   
					groupCb.label = group.children()[0].attribute("text")[0].toString();
					if (debug)
						groupCb.toolTip = group.children()[0].attribute("id")[0].toString();
					groupCb.id = group.children()[0].attribute("id")[0].toString();
					showButtons = false;

				}
				else {
					for each (var permission:XML in permissions) {
						cb = createInnerCheckbox(permission, groupCb, debug);
						if (permission.attribute("dependsOnFeature").length() > 0)
							cb.enabled = checkIfPartnerHasFeature(permission.attribute("dependsOnFeature").toString());
						vb.addChild(cb);
						innerCbArray.push(cb);
						_allCheckboxes.push(cb);
					}
				}

				// use correct group manager
				var pgm:PermissionGroupManager;
				if (group.attribute("isAdvancedGroup") == "true") {
					pgm = new AdvancedPermissionGroupManager(groupCb, innerCbArray, closeLinkBtn, openLinkBtn, showButtons);
				}
				else {
					pgm = new PermissionGroupManager(groupCb, innerCbArray, closeLinkBtn, openLinkBtn, showButtons);
				}
				_allPermissionGroupManagers.push(pgm);

				return vb;
			}


			/**
			 * Check if the partner has a permission to a plugin feature (Metadata,live etc')
			 * @feature 	the feature name from the dependsOnFeature attribute
			 */
			protected function checkIfPartnerHasFeature(featureId:String):Boolean {
				var hasFeature:Boolean = false;
				for each (var specialPermission:String in _partnerFeatures) {
					if (featureId == specialPermission)
						return true;
				}

				return hasFeature;
			}


			/**
			 * create the inner checkboxes of a group
			 * @param permission	description of the checkbox
			 * @param groupCb		main checkbox for this group
			 * @param addTooltip	add a tooltip to the new checkbox
			 * @return the created checkbox
			 * */
			protected function createInnerCheckbox(permission:XML, groupCb:CheckBox, addTooltip:Boolean):CheckBox {
				var cb:CheckBox = new CheckBox();
				cb.maxWidth = 250
				cb.label = permission.attribute("text")[0].toString();
				cb.setStyle("styleName", "adminSubCheckbox");
				if (addTooltip)
					cb.toolTip = permission.attribute("id")[0].toString()
				cb.id = permission.attribute("id")[0].toString();
				cb.data = groupCb; //pointer to the group id
				return cb;
			}


			/**
			 * put values from the form into the _undoUser object
			 * */
			protected function updateUndoRoleFromForm():void {
				_undoRole.name = nameTi.text;
				_undoRole.description = descriptionTi.text;
				_undoRole.permissionNames = getUpdatedPermissions(_undoRole.permissionNames);
			}


			/**
			 * validate required fields
			 * */
			protected function validateInput():Boolean {
				var isOk:Boolean = true;
				validator.source = nameTi;
				var vre:ValidationResultEvent = validator.validate();
				if (vre.results != null && vre.results.length > 0) {
					isOk = !(vre.results[0] as ValidationResult).isError;
				}
				validator.source = descriptionTi;
				vre = validator.validate();
				if (vre.results != null && vre.results.length > 0) {
					isOk &&= !(vre.results[0] as ValidationResult).isError;
				}
				if (_mode == DrilldownMode.ADD) {
					// make sure this name is not used
					for each (var role:KalturaUserRole in _roles) {
						if (role.name == nameTi.text) {
							isOk = false;
							var rm:IResourceManager = ResourceManager.getInstance();
							Alert.show(rm.getString('admin', 'name_in_use'), rm.getString('admin', 'error'));
						}
					}
				}

				return isOk;
			}


			/**
			 * update _undoRole.permissionNames
			 * NOTE: when editing role, make sure NOT TO OVERRIDE permissions
			 * that are not relevant to KMC.
			 */
			protected function saveBtn_clickHandler(event:MouseEvent):void {
				updateUndoRoleFromForm();
				if (validateInput()) {
					requestSave();
				}
			}


			/**
			 * navigate to account>upgrade.
			 * */
			protected function label1_linkHandler(event:TextEvent):void {
				/* When clicking the contact us link the user should be moved to the account upgrade page.
				   in case he is clicking this link after making changes in new/existing role settings a popup
				   message of "Discard changes" should appear with OK (go to account upgrade page), Cancel
				 (stay in this window)options. */
				updateUndoRoleFromForm();
				var needSave:Boolean = !ObjectUtil.compareObjects(_role, _undoRole);
				if (needSave) {
					var rm:IResourceManager = ResourceManager.getInstance();
					Alert.show(rm.getString('admin', 'discard_changes'), rm.getString('admin', 'discard_changes_title'), Alert.YES | Alert.NO, null, navToUpgradeHandler);
				}
				else {
					// go to account>upgrade
					dispatchEvent(new KmcNavigationEvent(KmcNavigationEvent.NAVIGATE, 'account', 'upgrade'));
				}
			}


			/**
			 * handle user "discard changes" prompt before navigating to account>upgrade
			 * */
			protected function navToUpgradeHandler(e:CloseEvent):void {
				switch (e.detail) {
					case Alert.YES:
						// go to account>upgrade
						dispatchEvent(new KmcNavigationEvent(KmcNavigationEvent.NAVIGATE, 'account', 'upgrade'));
						break;
					case Alert.NO:
						// do nothing.
						break;
				}
			}


			/**
			 * processes the forms and returns a new permissions string for the
			 * role, without changing non-kmc permissions
			 * @param perms  initial permissions list
			 * @return updated permission list
			 * */
			protected function getUpdatedPermissions(perms:String):String {
				var updatedPerms:Array;
				// current permissions list
				if (perms) {
					// for edit:
					updatedPerms = perms.split(",");
				}
				else {
					// for new:
					updatedPerms = new Array();
				}

				// check what needs to stay / go
				for each (var cb:CheckBox in _allCheckboxes) {
					if (cb.selected) {
						// add to / keep in array
						if (updatedPerms.indexOf(cb.id) == -1) {
							updatedPerms.push(cb.id);
						}
					}
					else {
						// remove from array
						if (updatedPerms.indexOf(cb.id) > -1) {
							ArrayUtil.removeValueFromArray(updatedPerms, cb.id);
						}
					}
					// the ugly fix for metadataProfileAdd
					if (cb.id == 'METADATA_FIELD_ADD') {
						// also add / remove the profile permission
						if (cb.selected) {
							updatedPerms.push('CUSTOM_DATA_PROFILE_ADD');
						}
						else {
							ArrayUtil.removeValueFromArray(updatedPerms, 'CUSTOM_DATA_PROFILE_ADD');
						}
					}
				}
				
				// return comma separated string
				return updatedPerms.join(",");
			}


			/**
			 * This function sets the relevant checkboxes and also their parent.
			 * It must run only after the form was built by the partner full permission id.
			 * @param permissionList Comma seperated list of permissions to show.
			 */
			protected function fillPermissions(permissionList:String):void {
				var cb:CheckBox;
				var pm:PermissionGroupManager;
				// new roles have this value for permissionNames
				if (permissionList && permissionList != Roles.DEFAULT_KMC_PERMISSIONS) {
					var SelectedPermissionIds:Array = permissionList.split(",");
					// setting the selected / not selected checkboxes
					for each (var permission:String in SelectedPermissionIds) {
						for each (cb in _allCheckboxes) {
							if (cb.enabled && cb.id == permission) {
								cb.selected = true;
								// if this is a inner cb, mark the parent as well
								if (cb.data && cb.data is CheckBox)
									(cb.data as CheckBox).selected = true;
							}
							
						}
					}
					// applying the half-selected style
					for each (pm in _allPermissionGroupManagers) {
						pm.setMainCBState();
					}
					
				}
				else {
					// for new roles, show all permissions selected.
					for each (cb in _allCheckboxes) {
						// if the partner doesn't have the feature, don't check the box
						if (cb.enabled) {
							cb.selected = true;
							// if this is a inner cb, mark the parent as well
							if (cb.data && cb.data is CheckBox)
								(cb.data as CheckBox).selected = true;
						}
						else {
							cb.selected = false;
						}
					}
					// applying the half-selected style
					for each (pm in _allPermissionGroupManagers) {
						pm.setMainCBState();
					}
				}
				
				if (!roleEditEnabled) {
					for each (cb in _allCheckboxes) {
						cb.enabled = false;
						
					}
				}
			}


			/**
			 * dispatch help event with relevant anchor
			 * */
			private function onHelp():void {
				dispatchEvent(new KmcHelpEvent(KmcHelpEvent.HELP, 'section_role_drilldown'));
			}


			/**
			 * set window mode.
			 * optional values are listed in <code>DrilldownMode</code>.
			 * */
			protected function setMode(newMode:String):void {
				_mode = newMode;
				if (_ready) {
					switch (newMode) {
						case DrilldownMode.ADD:
							title = ResourceManager.getInstance().getString('admin', 'add_role_title');
							changesLbl.visible = false;
							break;
						case DrilldownMode.EDIT:
							title = ResourceManager.getInstance().getString('admin', 'edit_role_title');
							break;
					}
				}
			}


			/**
			 * create a new working copy for the given KalturaUserRole
			 */
			protected function setRole(value:KalturaUserRole):void {
				_role = value;
				// create working copy
				_undoRole = new KalturaUserRole();
				var atts:Array = ObjectUtil.getObjectAllKeys(value);
				for (var i:int = 0; i < atts.length; i++) {
					_undoRole[atts[i]] = value[atts[i]];
				}
			}


			/**
			 * this is the original role entry. after being set it is not touched.
			 * all changes are being made on <code>_undoRole</code>, which is a
			 * copy of this object.
			 * */
			public function get role():KalturaUserRole {
				return _undoRole;
			}


			/**
			 * current window mode
			 * */
			public function get mode():String {
				return _mode;
			}
			
			[Bindable]
			public function get roleEditEnabled():Boolean
			{
				return _roleEditEnabled;
			}

			public function set roleEditEnabled(value:Boolean):void
			{
				_roleEditEnabled = value;
				/* if (!_roleEditEnabled)
				{
					for each (var cb:CheckBox in _allCheckboxes)
					{
						cb.enabled = false;
					}
				} */
			}

		]]>
	</mx:Script>
	<mx:StringValidator id='validator' property="text" required="true"
						requiredFieldError="{resourceManager.getString('admin', 'mandatoryField')}"/>
	<mx:VBox width="100%">
		<mx:Form width="100%" textAlign="left" paddingLeft="0">
			<mx:FormItem width="100%" fontWeight="bold"
						 label="{ResourceManager.getInstance().getString('admin', 'role_name')}">
				<mx:TextInput id="nameTi" width="100%" fontWeight="normal"/>
			</mx:FormItem>
			<mx:FormItem width="100%" fontWeight="bold"
						 label="{ResourceManager.getInstance().getString('admin', 'rdd_description')}">
				<mx:TextArea id="descriptionTi" width="100%" fontWeight="normal"/>
			</mx:FormItem>
		</mx:Form>
	</mx:VBox>
	<mx:VBox verticalGap="0" width="100%">
		<mx:HBox width="100%" id="colapsExpand" styleName="gradientHBox">
			<mx:Label text="{ResourceManager.getInstance().getString('admin', 'set_permissions')}" fontWeight="bold"/>
			<mx:Spacer width="100%"/>
			<mx:LinkButton id="collapseAllBtn" label="{ResourceManager.getInstance().getString('admin', 'collapse')}"
						   click="collapseAll(event)"/>
			<mx:LinkButton id="expandAllBtn" label="{ResourceManager.getInstance().getString('admin', 'expand')}"
						   click="expandAll(event)"/>
		</mx:HBox>
		<mx:VBox id="myForm" styleName="adminForm" width="100%" height="233" verticalScrollPolicy="auto" maxHeight="233" />
		<mx:Label id="changesLbl" text="{ResourceManager.getInstance().getString('admin', 'role_changes')}" />
	</mx:VBox>
	<mx:ControlBar>
		<mx:Button label="{ResourceManager.getInstance().getString('admin', 'save')}" id="saveBtn"
				   click="saveBtn_clickHandler(event)"/>
	</mx:ControlBar>
</containers:HelpTitleWindow>
