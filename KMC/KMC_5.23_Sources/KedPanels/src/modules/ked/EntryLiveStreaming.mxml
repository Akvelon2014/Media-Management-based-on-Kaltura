<?xml version="1.0" encoding="utf-8"?>
<!---
live streaming control tab of EntryDetailsWin
-->
<mx:Module layout="vertical" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
		   implements="com.kaltura.edw.business.IDrilldownPanel"
		   label="{resourceManager.getString('drilldown', 'liveStream')}">
	<mx:Metadata>
		[Event(name="validationComplete", type="com.kaltura.edw.events.ValidationResultEvent")] 
		[Event(name="panelDataSaved", type="com.kaltura.edw.events.InternalKedEvent")] 
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.constants.PanelConsts;
			import com.kaltura.edw.events.GeneralNonCairngormEvent;
			import com.kaltura.edw.events.InternalKedEvent;
			import com.kaltura.edw.events.ValidationResultEvent;
			import com.kaltura.edw.model.datapacks.ContextDataPack;
			import com.kaltura.edw.view.EntryDetailsWin;
			import com.kaltura.edw.view.window.SettingsExample;
			import com.kaltura.kmvc.model.IDataPackRepository;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaLiveStreamAdminEntry;
			import com.kaltura.vo.KalturaLiveStreamBitrate;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			import mx.resources.ResourceManager;
			
			private const _broadcastingWidth:Number = 270;
			private const _prefixesWidth:Number = 130;
			
			[Bindable]
			/**
			 * available bitrates
			 * */
			private var _bitratese:ArrayCollection = new ArrayCollection(['50', '100', '200', '300', '350',
				'500', '650', '800', '950', '1000',
				'1200', '1500', '1800', '2000',
				'2500', '14000']);
			
			private var _pop:SettingsExample;
			
			[Bindable]
			private var _selectedEntry:KalturaLiveStreamAdminEntry;
			
			[Bindable]
			private var _bitrates:ArrayCollection;
			
			private var _dpModel:IDataPackRepository;
			public var rootUrl:String;
			
			
			public function set selectedEntry(value:KalturaBaseEntry):void {
				if (value is KalturaLiveStreamAdminEntry) {
					_selectedEntry = value as KalturaLiveStreamAdminEntry;
				}
				else _selectedEntry = null;
			}
			
			public function get selectedEntry():KalturaBaseEntry {
				return _selectedEntry;
			}
			
			public function get dataPackModel():IDataPackRepository{
				return _dpModel;
			}
			public function set dataPackModel(value:IDataPackRepository):void{
				_dpModel = value;
				var cdp:ContextDataPack = _dpModel.getDataPack(ContextDataPack) as ContextDataPack;
				BindingUtils.bindProperty(this, "rootUrl", cdp, "rootUrl");
			}
			
			public function get helpAnchor():String{
				return "section_live_stream";
			}
			
			public function initData():void {
				if (_selectedEntry) {
					_bitrates = new ArrayCollection(_selectedEntry.bitrates);
					// set the selections of combos 
					setSelectedValueToCombo(bitrateCombo1, bitrate1.selected);
					setSelectedValueToCombo(bitrateCombo2, bitrate2.selected);
					setSelectedValueToCombo(bitrateCombo3, bitrate3.selected);
				}
			}
			
			public function validate():void {
				var success:Boolean = true;	// validation result
				var errorMessage:String;
				var errorTitle:String;
				var bitrates:Array = getBitrates();
				
				if (!bitrates) {
					//failed validation
					success = false;
					errorMessage = ResourceManager.getInstance().getString('drilldown', 'bitrateValidation');
					errorTitle = resourceManager.getString('drilldown', 'liveStreamError');
				}
				var e:ValidationResultEvent = new ValidationResultEvent(ValidationResultEvent.VALIDATION_COMPLETE, success, errorMessage, errorTitle);
				dispatchEvent(e);
			}
			
			public function destroy():void {
			}
			
			public function clear():void {
			}
			
			public function init():void {
				
				PermissionManager.getInstance().applyAllAttributes(this, PanelConsts.LIVE_STREAM_PANEL);
			}
			
			
			public function isChanged():Boolean {
				return _bitrates.source.toString() != getBitrates().toString();
			}
			
			
			/**
			 * build the bitrates array. 
			 * @return array of <code>KalturaLiveStreamBitrate</code> 
			 * 		(possibly empty), or null if failed validation
			 * */
			private function getBitrates():Array {
				var arr:Array = new Array();
				var cb:CheckBox;
				var combo:ComboBox;
				var ns:NumericStepper;
				for (var i:uint = 1; i <= 3; i++) {
					var uic:UIComponent = this["bitrate" + i];
					cb = this["bitrate" + i] as CheckBox;
					if (cb && cb.selected) {
						// found a selected bitrate checkbox
						var klsbr:KalturaLiveStreamBitrate = new KalturaLiveStreamBitrate();
						//get bitrate
						combo = (this["bitrateCombo" + i] as ComboBox);
						klsbr.bitrate = int(combo.value);
						//get width & height
						ns = (this["bitrate" + i + "Width"] as NumericStepper);
						klsbr.width = ns.value;
						ns = (this["bitrate" + i + "Height"] as NumericStepper);
						klsbr.height = ns.value;
						//validate 
						if (!klsbr.width || !klsbr.height) {
							return null;
						}
						else
							arr.push(klsbr);
					}
				}
				return arr;
			}
			
			public function save():void {
				var bitrates:Array = getBitrates();
				if (bitrates != null) {
					(_selectedEntry as KalturaLiveStreamAdminEntry).bitrates = bitrates;
				}
				dispatchEvent(new InternalKedEvent(InternalKedEvent.PANEL_DATA_SAVED));
			}
			
			/**
			 * Recieves a combobox refference and sets its selected to be its value if it findes
			 * it in the _bitratese values array.
			 */
			private function setSelectedValueToCombo(cb:ComboBox, isActive:Boolean):void {
				// set selected combo value 
				var i:uint;
				if (isActive) {
					for (i = 0; i < _bitratese.length; i++) {
						if (cb.value == Number(_bitratese[i]))
							cb.selectedIndex = i;
					}
				}
			}
			
			
			
			private function onRollOver(value:Number):void {
				_pop = new SettingsExample();
				switch (value) {
					case 1:
						_pop.stringToShow = ResourceManager.getInstance().getString('drilldown', 'screenshot1');
						_pop.imageClass = 'url1';
						_pop.imgWidth = 351;
						_pop.imgHeight = 156;
						
						break;
					case 2:
						_pop.stringToShow = ResourceManager.getInstance().getString('drilldown', 'screenshot1');
						_pop.imageClass = 'url2';
						_pop.imgWidth = 278;
						_pop.imgHeight = 191;
						break;
					case 3:
						_pop.stringToShow = ResourceManager.getInstance().getString('drilldown', 'screenshot3') +
						"\n" + ResourceManager.getInstance().getString('drilldown', 'screenshot1');
						_pop.imageClass = 'url3';
						_pop.imgWidth = 289;
						_pop.imgHeight = 100;
						break;
				}
				PopUpManager.addPopUp(_pop, this, true);
				PopUpManager.centerPopUp(_pop);
			}
			
			private function onHelp():void {
				var e:GeneralNonCairngormEvent = new GeneralNonCairngormEvent(EntryDetailsWin.HELP_REQUEST, true);
				e.data = helpAnchor;
				dispatchEvent(e);
			}
			
			
			private function fmeExport():void {
				var xml:XML = <flashmedialiveencoder_profile>
						<preset>
							<name>Custom</name>
							<description></description>
						</preset>
						<capture>
							<video>
								<device></device>
								<crossbar_input></crossbar_input>
								<frame_rate></frame_rate>
								<size>
									<width></width>
									<height></height>
								</size>
							</video>
							<audio>
								<device></device>
								<crossbar_input></crossbar_input>
								<sample_rate></sample_rate>
								<channels></channels>
								<input_volume></input_volume>
							</audio>
						</capture>
						<encode>
							<video>
								<format></format>
								<datarate></datarate>
								<outputsize></outputsize>
								<advanced>
									<profile></profile>
									<level></level>
									<keyframe_frequency></keyframe_frequency>
								</advanced>
								<autoadjust>
									<enable></enable>
									<maxbuffersize></maxbuffersize>
									<dropframes>
										<enable></enable>
									</dropframes>
									<degradequality>
										<enable></enable>
										<minvideobitrate></minvideobitrate>
										<preservepfq></preservepfq>
									</degradequality>
								</autoadjust>
							</video>
							<audio>
								<format></format>
								<datarate></datarate>
							</audio>
						</encode>
						<restartinterval>
							<days></days>
							<hours></hours>
							<minutes></minutes>
						</restartinterval>
						<reconnectinterval>
							<attempts></attempts>
							<interval></interval>
						</reconnectinterval>
						<output>
							<rtmp>
								<url></url>
								<backup_url></backup_url>
								<stream></stream>
							</rtmp>
						</output>
						<metadata>
							<entry>
								<key></key>
								<value></value>
							</entry>
							<entry>
								<key></key>
								<value></value>
							</entry>
							<entry>
								<key></key>
								<value></value>
							</entry>
							<entry>
								<key></key>
								<value></value>
							</entry>
							<entry>
								<key></key>
								<value></value>
							</entry>
							<entry>
								<key></key>
								<value></value>
							</entry>
						</metadata>
						<preview>
							<video>
								<input>
									<zoom></zoom>
								</input>
								<output>
									<zoom></zoom>
								</output>
							</video>
							<audio></audio>
						</preview>
						<log>
							<level></level>
							<directory></directory>
						</log>
					</flashmedialiveencoder_profile>;
				
				//assign outputs 
				var outputXML:XML = xml.output[0];
				(outputXML.rtmp.url[0] as XML).appendChild(_selectedEntry.primaryBroadcastingUrl);
				(outputXML.rtmp.backup_url[0] as XML).appendChild(_selectedEntry.secondaryBroadcastingUrl);
				(outputXML.rtmp.stream[0] as XML).appendChild(_selectedEntry.streamName);
				
				//assign bitrates
				var bitratesString:String = "";
				var dimenssionsStrings:String = "";
				if (bitrate1.selected) {
					bitratesString += bitrateCombo1.value.toString() + ";";
					dimenssionsStrings += bitrate1Width.value.toString() + "x" +
						bitrate1Height.value.toString() + ";";
				}
				if (bitrate2.selected) {
					bitratesString += bitrateCombo2.value.toString() + ";";
					dimenssionsStrings += bitrate2Width.value.toString() + "x" +
						bitrate2Height.value.toString() + ";";
				}
				if (bitrate3.selected) {
					bitratesString += bitrateCombo3.value.toString() + ";";
					dimenssionsStrings += bitrate3Width.value.toString() + "x" +
						bitrate3Height.value.toString() + ";";
				}
				var encode:XML = xml.encode[0] as XML;
				(encode.video.datarate[0] as XML).appendChild(bitratesString);
				(encode.video.outputsize[0] as XML).appendChild(dimenssionsStrings);
				
				var myFile:FileReference = new FileReference();
				myFile.save(xml.toXMLString(),
					ResourceManager.getInstance().getString('drilldown', 'ExportToFme.xml'));
				
			}
		]]>
	</mx:Script>
	<!--<mx:Label text="{ResourceManager.getInstance().getString('drilldown', 'BroadcastingInfo')}"
	styleName="drillDownTitleLabel"/>-->
	<mx:Label text="{ResourceManager.getInstance().getString('drilldown', 'brodcastingSettings')}" styleName="drillDownLabel"/>
	
	<mx:Text width="100%" text="{ResourceManager.getInstance().getString('drilldown', 'broadcastingText')}" selectable="false"/>
	<mx:LinkButton label="{ResourceManager.getInstance().getString('drilldown', 'liveLink')}"
				   click="{onHelp()}"/>
	
	<mx:Spacer height="20"/>
	<mx:Label text="{ResourceManager.getInstance().getString('drilldown', 'Broadcastingurls')}" styleName="drillDownLabel"/>
	
	<mx:HBox width="100%">
		<mx:Label text="{ResourceManager.getInstance().getString('drilldown', 'PrimaryURL')}" width="{_prefixesWidth}"
				  styleName="drillDownLabel"/>
		<mx:Label id="primaryUrl" text="{_selectedEntry.primaryBroadcastingUrl}" selectable="true"
				  width="{_broadcastingWidth}"/>
	</mx:HBox>
	
	<mx:HBox width="100%">
		<mx:Label text="{ResourceManager.getInstance().getString('drilldown', 'BackupURL')}" width="{_prefixesWidth}"
				  styleName="drillDownLabel"/>
		<mx:Label id="backupUrl" text="{_selectedEntry.secondaryBroadcastingUrl}" selectable="true"
				  width="{_broadcastingWidth}"/>
		<mx:Spacer width="30"/>
		<mx:Button styleName="help" click="{onRollOver(1)}" buttonMode="true"/>
	</mx:HBox>
	
	<mx:HBox width="100%">
		<mx:Label text="{ResourceManager.getInstance().getString('drilldown', 'streamName')}" width="{_prefixesWidth}"
				  styleName="drillDownLabel"/>
		<mx:Label id="streamName"
				  text="{_selectedEntry.streamName}"
				  selectable="true" width="{_broadcastingWidth}"/>
	</mx:HBox>
	
	<mx:Spacer height="20"/>
	
	<mx:Label text="{ResourceManager.getInstance().getString('drilldown', 'bitrateConfiguration')}" styleName="drillDownLabel"/>
	<mx:Text width="100%" text="{ResourceManager.getInstance().getString('drilldown', 'bitrateText')}"/>
	
	<mx:Label text="{'\t\t '+resourceManager.getString('drilldown', 'bitRate')+'\t\t\t\t\t'+resourceManager.getString('drilldown', 'widthTitle')+'\t\t\t  '+resourceManager.getString('drilldown', 'heightTitle')}"
			  styleName="drillDownLabel"/>
	<mx:HBox width="100%" id="bitrate1Info" disabledOverlayAlpha="0">
		<mx:CheckBox id="bitrate1" label="1." labelPlacement="left" selected="{_bitrates.getItemAt(0).width}"/>
		<mx:ComboBox id="bitrateCombo1" editable="true" text="{_bitrates.getItemAt(0).bitrate}"
					 dataProvider="{_bitratese}" enabled="{bitrate1.selected}"/>
		<mx:Label text="Kbps"/>
		<mx:Spacer width="10"/>
		<mx:NumericStepper id="bitrate1Width" width="55" maximum="9999" enabled="{bitrate1.selected}"
						   value="{_bitrates.getItemAt(0).width}"/>
		<mx:Label text="x"/>
		<mx:NumericStepper id="bitrate1Height" width="55" maximum="9999" enabled="{bitrate1.selected}"
						   value="{_bitrates.getItemAt(0).height}"/>
		<mx:Spacer width="30"/>
	</mx:HBox>
	<mx:HBox width="100%" id="bitrate2Info" disabledOverlayAlpha="0">
		<mx:CheckBox id="bitrate2" label="2." labelPlacement="left" selected="{_bitrates.getItemAt(1).width}"/>
		<mx:ComboBox id="bitrateCombo2" editable="true" text="{_bitrates.getItemAt(1).bitrate}"
					 dataProvider="{_bitratese}" enabled="{bitrate2.selected}"/>
		<mx:Label text="Kbps"/>
		<mx:Spacer width="10"/>
		<mx:NumericStepper id="bitrate2Width" width="55" maximum="9999" enabled="{bitrate2.selected}"
						   value="{_bitrates.getItemAt(1).width}"/>
		<mx:Label text="x"/>
		<mx:NumericStepper id="bitrate2Height" width="55" maximum="9999" enabled="{bitrate2.selected}"
						   value="{_bitrates.getItemAt(1).height}"/>
		<mx:Spacer width="30"/>
		<mx:Button styleName="help" click="{onRollOver(3)}" buttonMode="true"/>
	</mx:HBox>
	<mx:HBox width="100%" id="bitrate3Info" disabledOverlayAlpha="0">
		<mx:CheckBox id="bitrate3" label="3." labelPlacement="left" selected="{_bitrates.getItemAt(2).width}"/>
		<mx:ComboBox id="bitrateCombo3" editable="true" text="{_bitrates.getItemAt(2).bitrate}"
					 dataProvider="{_bitratese}" enabled="{bitrate3.selected}"/>
		<mx:Label text="Kbps"/>
		<mx:Spacer width="10"/>
		<mx:NumericStepper id="bitrate3Width" width="55" maximum="9999" enabled="{bitrate3.selected}"
						   value="{_bitrates.getItemAt(2).width}"/>
		<mx:Label text="x"/>
		<mx:NumericStepper id="bitrate3Height" width="55" maximum="9999" enabled="{bitrate3.selected}"
						   value="{_bitrates.getItemAt(2).height}"/>
		<mx:Spacer width="30"/>
	</mx:HBox>
	
	<mx:Spacer height="20"/>
	<mx:Label text="{ResourceManager.getInstance().getString('drilldown', 'broadcastinCredential')}"
			  styleName="drillDownLabel"/>
	
	<mx:HBox width="100%">
		<mx:Label text="{ResourceManager.getInstance().getString('drilldown', 'userName')}" width="{_prefixesWidth}"
				  styleName="drillDownLabel"/>
		<mx:Label id="userName" text="{_selectedEntry.streamUsername}" selectable="true"/>
		<mx:Spacer width="30"/>
		<mx:Button styleName="help" click="{onRollOver(2)}" buttonMode="true"/>
	</mx:HBox>
	
	<mx:HBox width="100%">
		<mx:Label text="{ResourceManager.getInstance().getString('drilldown', 'password')}" width="{_prefixesWidth}"
				  styleName="drillDownLabel"/>
		<mx:Label id="password" text="{_selectedEntry.streamPassword}" selectable="true"/>
	</mx:HBox>
	
	<mx:Spacer height="20"/>
	<mx:Label text="{ResourceManager.getInstance().getString('drilldown', 'encodingIp')}" styleName="drillDownLabel"/>
	
	<mx:HBox width="100%">
		<mx:Label text="{ResourceManager.getInstance().getString('drilldown', 'primaryIp')}" width="{_prefixesWidth}"
				  styleName="drillDownLabel"/>
		<mx:Label id="primaryIp" text="{_selectedEntry.encodingIP2}" selectable="true"/>
	</mx:HBox>
	
	<mx:HBox width="100%">
		<mx:Label text="{ResourceManager.getInstance().getString('drilldown', 'secondaryIp')}" width="{_prefixesWidth}"
				  styleName="drillDownLabel"/>
		<mx:Label id="secondaryIp" text="{_selectedEntry.encodingIP2}" selectable="true"/>
	</mx:HBox>
	<mx:Button id="exportBtn" label="{ResourceManager.getInstance().getString('drilldown', 'exportToFme')}" click="{fmeExport()}"/>
</mx:Module>
