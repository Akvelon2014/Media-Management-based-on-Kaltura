<?xml version="1.0" encoding="utf-8"?>
<!--
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 Modified by Akvelon Inc.
 2014-06-30
 http://www.akvelon.com/contact-us
-->
<!---
Flavours tab of EntryDetailsWin
-->
<mx:Module layout="vertical" xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:entryDetails="com.kaltura.edw.view.*" width="100%"
		   height="100%" creationComplete="onCreationComplete()" implements="com.kaltura.edw.business.IDrilldownPanel"
		   xmlns:edw="com.kaltura.edw.*" xmlns:view="com.kaltura.edw.view.*" xmlns:control="com.kaltura.edw.control.*"
		   label="{resourceManager.getString('drilldown', 'videoFiles')}">
	<mx:Metadata>
		[Event(name="validationComplete", type="com.kaltura.edw.events.ValidationResultEvent")] 
		[Event(name="panelDataSaved", type="com.kaltura.edw.events.InternalKedEvent")] 
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTracker;
			import com.kaltura.analytics.KAnalyticsTrackerConsts;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.constants.FileTypes;
			import com.kaltura.edw.constants.PanelConsts;
			import com.kaltura.edw.control.events.DropFolderEvent;
			import com.kaltura.edw.control.events.FlavorAssetEvent;
			import com.kaltura.edw.control.events.KedEntryEvent;
			import com.kaltura.edw.control.events.MediaEvent;
			import com.kaltura.edw.control.events.ProfileEvent;
			import com.kaltura.edw.events.InternalKedEvent;
			import com.kaltura.edw.events.KedDataEvent;
			import com.kaltura.edw.events.ValidationResultEvent;
			import com.kaltura.edw.model.datapacks.ContextDataPack;
			import com.kaltura.edw.model.datapacks.DistributionDataPack;
			import com.kaltura.edw.model.datapacks.DropFolderDataPack;
			import com.kaltura.edw.model.datapacks.EntryDataPack;
			import com.kaltura.edw.model.datapacks.FlavorsDataPack;
			import com.kaltura.edw.model.datapacks.PermissionsDataPack;
			import com.kaltura.edw.model.types.DropFolderListType;
			import com.kaltura.edw.view.window.flavors.AddFlavorAssetsWindow;
			import com.kaltura.edw.view.window.flavors.MatchFromDropFolderWindow;
			import com.kaltura.edw.vo.FlavorAssetWithParamsVO;
			import com.kaltura.edw.vo.UploadFileVo;
			import com.kaltura.kmvc.model.IDataPackRepository;
			import com.kaltura.types.KalturaEntryReplacementStatus;
			import com.kaltura.types.KalturaEntryStatus;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.types.KalturaStatsKmcEventType;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaFlavorAssetWithParams;
			import com.kaltura.vo.KalturaMediaEntry;
			import com.kaltura.vo.KalturaMixEntry;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.Application;
			import mx.managers.PopUpManager;
			
			
			// =====================================================================
			// Data
			// =====================================================================
			[Bindable]
			private var _selectedEntry:KalturaBaseEntry;
			
			public function get selectedEntry():KalturaBaseEntry {
				return _selectedEntry;
			}
			
			
			public function set selectedEntry(value:KalturaBaseEntry):void {
				if (!value)
					return;
				
				_selectedEntry = value;
				
				setTextsAndButtons();
				
			}
			
			
			// =====================================================================
			// Permissions
			// =====================================================================
			[Bindable]
			/**
			 * show action buttons for no_content entry
			 * (for r&p)
			 * */
			public var allowAddMedia:Boolean = true;
			
			[Bindable]
			/**
			 * show action buttons for ready entry
			 * (for r&p)
			 * */
			public var allowReplaceMedia:Boolean = true;
			
			[Bindable]
			/**
			 * allow upload option, will be used in flavorAssetAction item renderer
			 * (for r&p)
			 * */
			public var allowUpload:Boolean = true;
			
			[Bindable]
			/**
			 * allow match option, will be used in flavorAssetAction item renderer
			 * (for r&p)
			 * */
			public var allowMatchFromDrop:Boolean = true;
			
			[Bindable]
			/**
			 * allow link option, will be used in flavorAssetAction item renderer
			 * (for r&p)
			 * */
			public var allowLink:Boolean = false;
			
			[Bindable]
			/**
			 * allow import option, will be used in flavorAssetAction item renderer
			 * (for r&p)
			 * */
			public var allowImport:Boolean = true;
			
			public function set showTagsColumn(value:Boolean):void{
				dg.tagsCol.visible = value;
				//				for each (var col:DataGridColumn in dg.columns) {
				//					col.width = col.width;
				//				}
			}
			
			public function get showTagsColumn():Boolean{
				return true;
			}
			
			// =====================================================================
			// More Stuff
			// =====================================================================
			
			[Bindable]
			/**
			 * show action buttons based on business logic
			 * */
			private var _showActions:Boolean;
			
			[Bindable]
			private var _approveEnabled:Boolean;
			
			
			[Bindable]
			private var _showReplacenentInfo:Boolean;
			
			
			
			[Bindable]
			public var flavorAssets:ArrayCollection;
			
			/**
			 * for uploading multiple files as new flavours
			 * */
			private var _fileReferenceList:FileReferenceList;
			
			/**
			 * for uploading a single file as new source flavour
			 * */
			private var _fileReference:FileReference;
			
			/**
			 * the flavour selected for "edit"
			 * */
			private var _selectedFlavorWithParams:KalturaFlavorAssetWithParams;
			
			
			// =====================================================================
			// Change Watchers
			// =====================================================================
			
			private var _flavorsWatcher:ChangeWatcher;
			private var _repStatWchr:ChangeWatcher;
			private var _repIdWchr:ChangeWatcher;
			private var _statWchr:ChangeWatcher;
			
			/*
			* watchers for binding to matchFromDropFolderWindow
			* */
			private var _dfw1:ChangeWatcher;
			private var _dfw2:ChangeWatcher;
			private var _dfw3:ChangeWatcher;
			
			
			/*
			* watchers for binding to addFlavorAssetsWindow
			* */
			private var _convProfilesWatcher:ChangeWatcher;
			private var _storageProfsWatcher:ChangeWatcher;
			
			
			// =====================================================================
			// More Stuff
			// =====================================================================
			/**
			 * if there is a pending request to open drilldown
			 * */
			private var _drillDownClicked:Boolean = false;
			
			private var _multiFlavorsIngestionAllowed:Boolean = true;
			private var _replacementStatus:String;
			private var _replacingEntryId:String;
			
			
			/**
			 * entry status
			 * */
			private var _status:String;
			
			
			private var _dpModel:IDataPackRepository;
			private var _distributionData:DistributionDataPack;
			
		
			
			private function setTextsAndButtons():void{
				if (_selectedEntry.replacingEntryId) {
					replacementEntryId.text = _selectedEntry.replacingEntryId;
					_showActions = false;
					_showReplacenentInfo = true;
					_approveEnabled = true;
					
					switch (_selectedEntry.replacementStatus) {
						case KalturaEntryReplacementStatus.APPROVED_BUT_NOT_READY:
							_approveEnabled = false;
						case KalturaEntryReplacementStatus.NOT_READY_AND_NOT_APPROVED:
							stateLabel.text = resourceManager.getString('drilldown', 'readyState') + resourceManager.getString('drilldown', 'replacementProcessState');
							replacementStatusBtn.label = resourceManager.getString('drilldown', 'processClickToReview');
							break;
						case KalturaEntryReplacementStatus.READY_BUT_NOT_APPROVED:
							stateLabel.text = resourceManager.getString('drilldown', 'readyState') + resourceManager.getString('drilldown', 'replacementRFRState');
							replacementStatusBtn.label = resourceManager.getString('drilldown', 'readyClickToReview');
							break;
					}
				}
				else {
					_showReplacenentInfo = false;
					// sets labels according to entry's status
					switch (_selectedEntry.status) {
						case KalturaEntryStatus.NO_CONTENT:
							stateLabel.text = resourceManager.getString('drilldown', 'noContentState');
							setActionsLabel((_selectedEntry as KalturaMediaEntry).mediaType, _selectedEntry.status);
							break;
						case KalturaEntryStatus.READY:
							// if this is a replacement entry
							if (_selectedEntry.replacedEntryId) {
								stateLabel.text = resourceManager.getString('drilldown', 'replacementReadyState');
								_showActions = false;
							}
							else {
								stateLabel.text = resourceManager.getString('drilldown', 'readyState');
								setActionsLabel((_selectedEntry as KalturaMediaEntry).mediaType, _selectedEntry.status);
							}
							break;
						case KalturaEntryStatus.ERROR_CONVERTING:
						case KalturaEntryStatus.ERROR_IMPORTING:
							stateLabel.text = resourceManager.getString('drilldown', 'errorState');
							setActionsLabel((_selectedEntry as KalturaMediaEntry).mediaType, _selectedEntry.status);
							if (_selectedEntry.replacedEntryId) {
								_showActions = false;
							}
							break;
						default:
							stateLabel.text = resourceManager.getString('drilldown', 'notReadyState');
							_showActions = false;
					}
				}
			}
			
			
			public function get dataPackModel():IDataPackRepository{
				return _dpModel;
			}
			public function set dataPackModel(value:IDataPackRepository):void{
				_dpModel = value;
				_distributionData = _dpModel.getDataPack(DistributionDataPack) as DistributionDataPack;
			}
			
			public function get helpAnchor():String{
				var anchor:String;
				if (_selectedEntry.replacedEntryId) {
					
					// this is a replacement entry
					anchor = 'entry_replacement';
				} else {
					// this is a normal entry
					anchor = 'entry_flavors';
				}
				return anchor;
			}
			
			
			public function clear():void {
				if ((_selectedEntry is KalturaMixEntry || 
					(_selectedEntry is KalturaMediaEntry && (_selectedEntry as KalturaMediaEntry).mediaType == KalturaMediaType.IMAGE))) {
					_distributionData.clearFlavorUpdates();
				}
				
				if (_repStatWchr) {
					_repStatWchr.unwatch();
				}
				if (_repIdWchr) {
					_repIdWchr.unwatch();
				}
				if (_statWchr) {
					_statWchr.unwatch();
				}
			}
			
			public function isChanged():Boolean {
				// save action cannot be required because of this panel
				return false;
			}
			
			
			public function save():void {
				// this panel's data is saved as it changes, so save here isn't required
				dispatchEvent(new InternalKedEvent(InternalKedEvent.PANEL_DATA_SAVED));
			}
			
			public function validate():void {
				// this panel's info cannot be invalid
				dispatchEvent(new ValidationResultEvent(ValidationResultEvent.VALIDATION_COMPLETE, true));
			}
			
			
			
			
			
			
			public function get status():String {
				return _status;
			}
			
			
			public function set status(value:String):void {
				if (value && (!_status || (_status != value))) {
					_distributionData.refreshFlavors();
				}
				_status = value;
				setTextsAndButtons();
			}
			
			
			
			public function get replacementStatus():String {
				return _replacementStatus;
			}
			
			
			public function set replacementStatus(value:String):void {
				// if replacement status was not changed, this binding won't fire. 
				if (_drillDownClicked) {
					if (value && (value != KalturaEntryReplacementStatus.NONE)) {
						openReplacementDrilldown();
					}
					//if replacement entry doesn't exist anymore
					else {
						Alert.show(resourceManager.getString('drilldown', 'replacementNotExistMsg'), resourceManager.getString('drilldown', 'replacementNotExistTitle'));
					}
					_drillDownClicked = false;
				}
				
				if (value && (!_replacementStatus || (_replacementStatus != value))) {
					_distributionData.refreshFlavors();
				}
				_replacementStatus = value;
				setTextsAndButtons();
			}
			
			
			public function get replacingEntryId():String {
				return _replacingEntryId;
			}
			
			
			public function set replacingEntryId(value:String):void {
				//if we have a replacement entry that we didn't have before, request the entry from server
				if (value && (!_replacingEntryId || (_replacingEntryId != value))) {
					var getReferenceEntry:KedEntryEvent = new KedEntryEvent(KedEntryEvent.GET_REPLACEMENT_ENTRY, null, _selectedEntry.replacingEntryId);
					controller.dispatch(getReferenceEntry);
				}
				
				_replacingEntryId = value;
//				selectedEntry = _selectedEntry;
				setTextsAndButtons();
			}
			
			
			
			/**
			 * allow multiple flavours to be ingested simultaneously
			 * */
			public function get multiFlavorsIngestionAllowed():Boolean {
				return _multiFlavorsIngestionAllowed;
			}
			
			
			[Bindable]
			/**
			 * @private
			 */
			public function set multiFlavorsIngestionAllowed(value:Boolean):void {
				_multiFlavorsIngestionAllowed = value;
			}
			
			public function init():void {
				var ddp:DistributionDataPack = _dpModel.getDataPack(DistributionDataPack) as DistributionDataPack;
				if (!_flavorsWatcher) {
					_flavorsWatcher = BindingUtils.bindProperty(this, "flavorAssets", ddp, "flavorParamsAndAssetsByEntryId");
				}
				//the following data is required for the actions buttons
				var profileEvent:ProfileEvent = new ProfileEvent(ProfileEvent.LIST_CONVERSION_PROFILES_AND_FLAVOR_PARAMS);
				controller.dispatch(profileEvent);
				// if partner has remote storage feature, list profiles. 
				/*
				if ((_dpModel.getDataPack(PermissionsDataPack) as PermissionsDataPack).remoteStorageEnabled) {
					profileEvent = new ProfileEvent(ProfileEvent.LIST_STORAGE_PROFILES);
					controller.dispatch(profileEvent);
				}
				*/
				FileTypes.setFileTypes((_dpModel.getDataPack(FlavorsDataPack) as FlavorsDataPack).fileFilters);
				
				PermissionManager.getInstance().applyAllAttributes(this, PanelConsts.ASSETS_PANEL);
			}
			
			
			/**
			 * loads required data from server
			 * */
			public function initData():void {
				_repStatWchr = BindingUtils.bindProperty(this, "replacementStatus", _selectedEntry, "replacementStatus");
				_repIdWchr = BindingUtils.bindProperty(this, "replacingEntryId", _selectedEntry, "replacingEntryId");
				_statWchr = BindingUtils.bindProperty(this, "status", _selectedEntry, "status");
				
				_distributionData.loadFlavors(controller, _selectedEntry)
			}
			
			
			public function destroy():void {
				dg.removeEventListener(FlavorsTable.UPLOAD_FLAVOR, onFlavorUploadSelected);
				dg.removeEventListener(FlavorsTable.MATCH_FLAVOR, onFlavorMatchSelected);
				dg.removeEventListener(FlavorsTable.LINK_FLAVOR, onFlavorLinkSelected);
				dg.removeEventListener(FlavorsTable.IMPORT_FLAVOR, onFlavorImportSelected);
				dg.removeEventListener(FlavorsTable.CONVERT_FLAVOR, actionHandler);
				dg.removeEventListener(FlavorsTable.DELETE_FLAVOR, actionHandler);
				dg.removeEventListener(FlavorsTable.DOWNLOAD_FLAVOR, actionHandler);
				dg.removeEventListener(FlavorsTable.PREVIEW_FLAVOR, actionHandler);
				_distributionData.clearFlavorUpdates();
				if (_flavorsWatcher)
					_flavorsWatcher.unwatch();
			}
			
			
			/**
			 * load flavors
			 * */
			private function refreshData(refreshEntry:Boolean):void {
				if (_selectedEntry != null) {
					var cgEvent:KedEntryEvent = new KedEntryEvent(KedEntryEvent.GET_FLAVOR_ASSETS, _selectedEntry);
					controller.dispatch(cgEvent);
					if (refreshEntry) {
						cgEvent = new KedEntryEvent(KedEntryEvent.UPDATE_SELECTED_ENTRY_REPLACEMENT_STATUS, null, _selectedEntry.id);
						controller.dispatch(cgEvent);
					}
					
				}
			}
			
			
			private function onCreationComplete():void {
				
				dg.addEventListener(FlavorsTable.UPLOAD_FLAVOR, onFlavorUploadSelected);
				dg.addEventListener(FlavorsTable.MATCH_FLAVOR, onFlavorMatchSelected);
				dg.addEventListener(FlavorsTable.LINK_FLAVOR, onFlavorLinkSelected);
				dg.addEventListener(FlavorsTable.IMPORT_FLAVOR, onFlavorImportSelected);
				dg.addEventListener(FlavorsTable.CONVERT_FLAVOR, actionHandler);
				dg.addEventListener(FlavorsTable.DELETE_FLAVOR, actionHandler);
				dg.addEventListener(FlavorsTable.DOWNLOAD_FLAVOR, actionHandler);
				dg.addEventListener(FlavorsTable.PREVIEW_FLAVOR, actionHandler);
			}
			
			
			private function actionHandler(event:Event):void {
				var _flavorWithParams:FlavorAssetWithParamsVO = event.target.data as FlavorAssetWithParamsVO;
				switch (event.type) {
					case FlavorsTable.CONVERT_FLAVOR:
						var convEvent:FlavorAssetEvent = new FlavorAssetEvent(FlavorAssetEvent.CREATE_FLAVOR_ASSET, _flavorWithParams.kalturaFlavorAssetWithParams);
						controller.dispatch(convEvent);
						break;
					case FlavorsTable.DELETE_FLAVOR:
						var delEvent:FlavorAssetEvent = new FlavorAssetEvent(FlavorAssetEvent.DELETE_FLAVOR_ASSET, _flavorWithParams.kalturaFlavorAssetWithParams);
						controller.dispatch(delEvent);
						break;
					case FlavorsTable.DOWNLOAD_FLAVOR:
						var dlEvent:FlavorAssetEvent = new FlavorAssetEvent(FlavorAssetEvent.DOWNLOAD_FLAVOR_ASSET, _flavorWithParams.kalturaFlavorAssetWithParams);
						controller.dispatch(dlEvent);
						KAnalyticsTracker.getInstance().sendEvent(KAnalyticsTrackerConsts.CONTENT, KalturaStatsKmcEventType.CONTENT_DOWNLOAD, "EntryDrillDown>FlavorTab>DownloadAsset", _flavorWithParams.kalturaFlavorAssetWithParams.entryId);
						break;
					case FlavorsTable.PREVIEW_FLAVOR:
						var preEvent:FlavorAssetEvent = new FlavorAssetEvent(FlavorAssetEvent.PREVIEW_FLAVOR_ASSET, _flavorWithParams.kalturaFlavorAssetWithParams);
						controller.dispatch(preEvent);
						break;
				}
			}
			
			/**
			 * open the AFAW with a single vo, representing relevant flavorAsset / assetParams.
			 * @internal
			 * handler for dropdown "import" selection
			 * */
			private function onFlavorImportSelected(event:Event):void {
				_selectedFlavorWithParams = (event.target.data as FlavorAssetWithParamsVO).kalturaFlavorAssetWithParams;
				var uploadFile:UploadFileVo = new UploadFileVo();
				if (_selectedFlavorWithParams) {
					if (_selectedFlavorWithParams.flavorAsset)
						uploadFile.flavorAssetId = _selectedFlavorWithParams.flavorAsset.id
					else if (_selectedFlavorWithParams.flavorParams)
						uploadFile.flavorParamId = _selectedFlavorWithParams.flavorParams.id.toString();
				}
				var filesList:ArrayCollection = new ArrayCollection(new Array(uploadFile));
				openAddFlavorsWindow(AddFlavorAssetsWindow.ACTION_IMPORT, filesList, false);
				//resets data
				_selectedFlavorWithParams = null;
			}
			
			
			/**
			 * open the AFAW with a single vo, representing relevant flavorAsset / assetParams.
			 * @internal
			 * handler for dropdown "link" selection
			 * */
			private function onFlavorLinkSelected(event:Event):void {
				_selectedFlavorWithParams = (event.target.data as FlavorAssetWithParamsVO).kalturaFlavorAssetWithParams;
				var uploadFile:UploadFileVo = new UploadFileVo();
				if (_selectedFlavorWithParams) {
					if (_selectedFlavorWithParams.flavorAsset)
						uploadFile.flavorAssetId = _selectedFlavorWithParams.flavorAsset.id
					else if (_selectedFlavorWithParams.flavorParams)
						uploadFile.flavorParamId = _selectedFlavorWithParams.flavorParams.id.toString();
				}
				var filesList:ArrayCollection = new ArrayCollection(new Array(uploadFile));
				openAddFlavorsWindow(AddFlavorAssetsWindow.ACTION_LINK, filesList, false);
				//resets data
				_selectedFlavorWithParams = null;
			}
			
			
			/**
			 * will be called when selecting to upload a specific flavor
			 * */
			private function onFlavorUploadSelected(event:Event):void {
				_selectedFlavorWithParams = (event.target.data as FlavorAssetWithParamsVO).kalturaFlavorAssetWithParams;
				uploadSingleFlavor();
			}
			
			
			private function onUploadBtnClick():void {
				if (multiFlavorsIngestionAllowed)
					uploadMultiFlavors();
				else
					uploadSingleFlavor();
				
				// analytics
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVORS_UPLOAD);
			}
			
			
			/**
			 * will open a browse window and allow a single selection
			 * */
			private function uploadSingleFlavor():void {
				_fileReference = new FileReference();
				var fileFilter:FileFilter = getTypeFilter(parseInt(_selectedEntry.mediaType));
				if (fileFilter) {
					_fileReference.addEventListener(Event.SELECT, onFlavorSelected);
					_fileReference.browse(new Array(fileFilter));
				}
			}
			
			
			/**
			 * will open a browse window and allow multiple selection
			 * */
			private function uploadMultiFlavors():void {
				_fileReferenceList = new FileReferenceList();
				var fileFilter:FileFilter = getTypeFilter(parseInt(selectedEntry.mediaType));
				if (fileFilter) {
					_fileReferenceList.addEventListener(Event.SELECT, onFlavorsSelected);
					_fileReferenceList.browse(new Array(fileFilter));
				}
			}
			
			
			/**
			 * user selects to match from a drop folder a selected flavor
			 * */
			private function onFlavorMatchSelected(event:Event):void {
				_selectedFlavorWithParams = (event.target.data as FlavorAssetWithParamsVO).kalturaFlavorAssetWithParams;
				openMatchFromDropFolderWindow();
			}
			
			
			/**
			 * handles user selection for a single flavor
			 * */
			private function onFlavorSelected(event:Event):void {
				_fileReference.removeEventListener(Event.SELECT, onFlavorSelected);
				
				var uploadFile:UploadFileVo = new UploadFileVo();
				uploadFile.fileName = _fileReference.name;
				uploadFile.fileData = _fileReference;
				if (_selectedFlavorWithParams) {
					if (_selectedFlavorWithParams.flavorAsset)
						uploadFile.flavorAssetId = _selectedFlavorWithParams.flavorAsset.id
					else if (_selectedFlavorWithParams.flavorParams)
						uploadFile.flavorParamId = _selectedFlavorWithParams.flavorParams.id.toString();
				}
				
				openAddFlavorsWindow(AddFlavorAssetsWindow.ACTION_UPLOAD, new ArrayCollection(new Array(uploadFile)), false);
				//resets data
				_selectedFlavorWithParams = null;
			}
			
			
			/**
			 * set actions box according to media type
			 * @param mediaType	current entry's media type
			 * */
			private function setActionsLabel(mediaType:int, entryStatus:String):void {
				_showActions = true;
				if (mediaType == KalturaMediaType.VIDEO) {
					if (entryStatus == KalturaEntryStatus.NO_CONTENT) {
						actionLabel.text = resourceManager.getString('drilldown', 'addVideo');
					}
					else {
						actionLabel.text = resourceManager.getString('drilldown', 'replaceVideo');
					}
				}
				else if (mediaType == KalturaMediaType.AUDIO) {
					if (entryStatus == KalturaEntryStatus.NO_CONTENT) {
						actionLabel.text = resourceManager.getString('drilldown', 'addAudio');
					}
					else {
						actionLabel.text = resourceManager.getString('drilldown', 'replaceAudio');
					}
				}
			}
			
			
			public function set hideColumns(value:String):void {
				var cols:Array = value.split(',');
				for (var col:String in cols) {
					var arrCol:ArrayCollection = new ArrayCollection(dg.columns);
					for (var i:int = 0; i < arrCol.length; ++i) {
						if (arrCol[i].headerText == resourceManager.getString('drilldown', cols[col])) {
							arrCol.removeItemAt(i);
							break;
						}
					}
				}
				dg.columns = arrCol.source;
				for each (var col2:DataGridColumn in arrCol) {
					col2.width = col2.width;
				}
			}
			
			
			public function get hideColumns():String {
				return '';
			}
			
			
			/**
			 * returns the suitable fileFilter according to given mediaType
			 * */
			private function getTypeFilter(mediaType:int):FileFilter {
				var fileFilter:FileFilter;
				if (mediaType == KalturaMediaType.VIDEO)
					fileFilter = new FileFilter(resourceManager.getString('drilldown', 'video') + "(" + FileTypes.VIDEO_TYPES + ")", FileTypes.VIDEO_TYPES);
				else if (mediaType == KalturaMediaType.AUDIO)
					fileFilter = new FileFilter(resourceManager.getString('drilldown', 'audio') + "(" + FileTypes.AUDIO_TYPES + ")", FileTypes.AUDIO_TYPES);
				
				return fileFilter;
			}
			
			
			/**
			 * opens AddFlavorsAssetsWindow according to given params
			 * @param action		the action to apply upon submit
			 * @param filesList		list of UploadFileVo objects
			 * @param allowAddFiles	should the popup allow adding more files after being opened
			 * */
			private function openAddFlavorsWindow(action:String, filesList:ArrayCollection, allowAddFiles:Boolean):void {
				var addFlavorsAssetsWindow:AddFlavorAssetsWindow = new AddFlavorAssetsWindow();
				addFlavorsAssetsWindow.controller = controller;
				addFlavorsAssetsWindow.windowState = _selectedFlavorWithParams ? AddFlavorAssetsWindow.SINGLE_FILE_STATE : AddFlavorAssetsWindow.MULTI_FILES_STATE;
				var fdp:FlavorsDataPack = _dpModel.getDataPack(FlavorsDataPack) as FlavorsDataPack;
				_convProfilesWatcher = BindingUtils.bindProperty(addFlavorsAssetsWindow, "conversionProfiles", fdp, "conversionProfsWFlavorParams");
				_storageProfsWatcher = BindingUtils.bindProperty(addFlavorsAssetsWindow, "storageProfiles", fdp, "storageProfiles");
				addFlavorsAssetsWindow.filesList = filesList;
				addFlavorsAssetsWindow.allowAddFiles = allowAddFiles;
				addFlavorsAssetsWindow.windowAction = action;
				addFlavorsAssetsWindow.flavorAssetName = _selectedFlavorWithParams ? _selectedFlavorWithParams.flavorParams.name : '';
				addFlavorsAssetsWindow.entry = _selectedEntry;
				addFlavorsAssetsWindow.addEventListener(AddFlavorAssetsWindow.CLOSE_WINDOW, onAddFlavorsWindowClose);
				PopUpManager.addPopUp(addFlavorsAssetsWindow, Application.application as DisplayObject, true);
				PopUpManager.centerPopUp(addFlavorsAssetsWindow);
			}
			
			
			/**
			 * remove binding and close addFlavorAssetWindow
			 * */
			private function onAddFlavorsWindowClose(event:Event):void {
				if (_convProfilesWatcher)
					_convProfilesWatcher.unwatch();
				if (_storageProfsWatcher)
					_storageProfsWatcher.unwatch();
				
				PopUpManager.removePopUp(event.target as AddFlavorAssetsWindow);
			}
			
			
			/**
			 * handle user files selection to upload
			 * */
			private function onFlavorsSelected(event:Event):void {
				_fileReferenceList.removeEventListener(Event.SELECT, onFlavorsSelected);
				
				var filesList:ArrayCollection = new ArrayCollection();
				for each (var fileReference:FileReference in _fileReferenceList.fileList) {
					var uploadFile:UploadFileVo = new UploadFileVo();
					uploadFile.fileName = fileReference.name;
					uploadFile.fileData = fileReference;
					filesList.addItem(uploadFile);
				}
				
				openAddFlavorsWindow(AddFlavorAssetsWindow.ACTION_UPLOAD, filesList, true);
			}
			
			
			/**
			 * opens another entry drill down window, for the replacement entry
			 * */
			private function onReplacementStatusBtnClick():void {
				//replacement entry is processing - check for updates (Atar: this happens anyway when opening replacement, in WindowsManager)
//				if ((_selectedEntry.replacementStatus == KalturaEntryReplacementStatus.NOT_READY_AND_NOT_APPROVED) || (_selectedEntry.replacementStatus == KalturaEntryReplacementStatus.APPROVED_BUT_NOT_READY)) {
//					_drillDownClicked = true;
//					var entryid:String = (_dpModel.getDataPack(EntryDataPack) as EntryDataPack).selectedEntry.id;
//					var getSelectedEntry:KedEntryEvent = new KedEntryEvent(KedEntryEvent.UPDATE_SELECTED_ENTRY_REPLACEMENT_STATUS, null, entryid);
//					controller.dispatch(getSelectedEntry);
//				}
//				else {
					openReplacementDrilldown();
//				}
			}
			
			
			/**
			 * opens another entry drill down window, for the replacement entry
			 * */
			private function openReplacementDrilldown():void {
				var dispatcher:IEventDispatcher = (_dpModel.getDataPack(ContextDataPack) as ContextDataPack).dispatcher;
				dispatcher.dispatchEvent(new KedDataEvent(KedDataEvent.OPEN_REPLACEMENT));
			}
			
			
			/**
			 * cancel entry replacement
			 * */
			private function onCancelReplacementClick():void {
				var cancelReplacement:MediaEvent = new MediaEvent(MediaEvent.CANCEL_REPLACEMENT, (_selectedEntry as KalturaMediaEntry));
				controller.dispatch(cancelReplacement);
				
				// analytics
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVORS_REJECT);
			}
			
			
			/**
			 * approve replacement
			 * */
			private function onApproveReplacementClick():void {
				var approveReplacement:MediaEvent = new MediaEvent(MediaEvent.APPROVE_REPLACEMENT, (_selectedEntry as KalturaMediaEntry));
				controller.dispatch(approveReplacement);
				
				// analytics
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVORS_APPROVE);
			}
			
			
			private function openMatchFromDropFolderWindow():void {
				var matchFromDropFodlerWin:MatchFromDropFolderWindow = new MatchFromDropFolderWindow();
				matchFromDropFodlerWin.controller = controller;
				var listFolders:DropFolderEvent;
				if (_selectedFlavorWithParams) {
					if (_selectedFlavorWithParams.flavorAsset) {
						matchFromDropFodlerWin.flavorAssetId = _selectedFlavorWithParams.flavorAsset.id;
					}
					else if (_selectedFlavorWithParams.flavorParams) {
						matchFromDropFodlerWin.flavorParamsId = _selectedFlavorWithParams.flavorParams.id;
					}
					listFolders = new DropFolderEvent(DropFolderEvent.LIST_FOLDERS, null, DropFolderListType.MATCH_OR_KEEP | DropFolderListType.MATCH_OR_NEW | DropFolderListType.ADD_NEW);
					controller.dispatch(listFolders);
				}
				else {
					listFolders = new DropFolderEvent(DropFolderEvent.LIST_FOLDERS, null, DropFolderListType.MATCH_OR_KEEP | DropFolderListType.MATCH_OR_NEW);
					controller.dispatch(listFolders);
				}
				matchFromDropFodlerWin.entry = _selectedEntry;
				var dfdp:DropFolderDataPack = _dpModel.getDataPack(DropFolderDataPack) as DropFolderDataPack;
				var fdp:FlavorsDataPack = _dpModel.getDataPack(FlavorsDataPack) as FlavorsDataPack;
				_dfw1 = BindingUtils.bindProperty(matchFromDropFodlerWin, "files", dfdp, "dropFolderFiles");
				_dfw2 = BindingUtils.bindProperty(matchFromDropFodlerWin, "folders", dfdp, "dropFolders");
				_dfw3 = BindingUtils.bindProperty(matchFromDropFodlerWin, "conversionProfiles", fdp, "conversionProfsWFlavorParams");
				matchFromDropFodlerWin.addEventListener(MatchFromDropFolderWindow.CLOSE_WINDOW, onDropFolderWindowClose);
				PopUpManager.addPopUp(matchFromDropFodlerWin, Application.application as DisplayObject, true);
				PopUpManager.centerPopUp(matchFromDropFodlerWin);
				//resets data
				_selectedFlavorWithParams = null;
				
				// analytics
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVORS_MATCH);
			}
			
			
			private function onDropFolderWindowClose(e:Event):void {
				_dfw1.unwatch();
				_dfw2.unwatch();
				_dfw3.unwatch();
				PopUpManager.removePopUp(e.target as MatchFromDropFolderWindow);
				if ((e.target as MatchFromDropFolderWindow).isEntryRefreshRequired) {
					refreshData(true);
				}
			}
			
			
			/**
			 * @param entryState	show the actions button according to entry state
			 * @param allowAdd		allow adding media to a no_content entry
			 * @param allowReplace	allow replacing media of a ready entry
			 * */
			private function showActionsBox(entryState:Boolean, allowAdd:Boolean, allowReplace:Boolean, entry:KalturaBaseEntry):Boolean {
				var result:Boolean = entryState;
				if (entry && (entry.status == KalturaEntryStatus.NO_CONTENT)) {
					result &&= allowAdd;
				}
				else {
					result &&= allowReplace;
				}
				return result;
			}
			
			
			protected function onImportBtnClick(event:MouseEvent):void {
				openAddFlavorsWindow(AddFlavorAssetsWindow.ACTION_IMPORT, new ArrayCollection([new UploadFileVo()]), multiFlavorsIngestionAllowed);
				// analytics
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVORS_IMPORT);
			}
			
			
			protected function onLinkBtnClick(event:MouseEvent):void {
				openAddFlavorsWindow(AddFlavorAssetsWindow.ACTION_LINK, new ArrayCollection([new UploadFileVo()]), multiFlavorsIngestionAllowed);
				// analytics
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_DRILLDOWN_FLAVORS_LINK);
			}
		]]>
	</mx:Script>
	
	<control:FlavorsTabController id="controller" />
	
	<!-- Current entry state description -->
	<mx:HBox>
		<mx:Label text="{resourceManager.getString('drilldown','currentState')}" styleName="drillDownLabel"/>
		<mx:Label id="stateLabel" styleName="drillDownSubLabel"/>
	</mx:HBox>
	<!-- action buttons -->
	<mx:HBox visible="{showActionsBox(_showActions, allowAddMedia, allowReplaceMedia, _selectedEntry)}"
			 includeInLayout="{showActionsBox(_showActions, allowAddMedia, allowReplaceMedia, _selectedEntry)}">
		<mx:Label id="actionLabel" styleName="drillDownLabel"/>
		<mx:Button id="uploadFilesBtn"
				   label="{multiFlavorsIngestionAllowed ? resourceManager.getString('drilldown','uploadFiles') : resourceManager.getString('drilldown','uploadFile')}"
				   click="{onUploadBtnClick()}" styleName="dataGridBtn" visible="{allowUpload}"
				   includeInLayout="{allowUpload}"/>
		<mx:Button id="importFilesBtn"
				   label="{multiFlavorsIngestionAllowed ? resourceManager.getString('drilldown','importFiles') : resourceManager.getString('drilldown','importFile')}"
				   click="onImportBtnClick(event)" styleName="dataGridBtn" visible="{allowImport}"
				   includeInLayout="{allowImport}"/>
		<mx:Button id="matchFromDropBtn" label="{resourceManager.getString('drilldown','matchFromDrop')}"
				   click="{openMatchFromDropFolderWindow()}" styleName="dataGridBtn" visible="{allowMatchFromDrop}"
				   includeInLayout="{allowMatchFromDrop}"/>
	</mx:HBox>
	
	<!-- replacement info -->
	<mx:VBox visible="{_showReplacenentInfo}" includeInLayout="{_showReplacenentInfo}" width="100%"
			 styleName="flavorsReplacementVBox">
		<mx:HBox>
			<mx:Label text="{resourceManager.getString('drilldown','replementDetailsTitle')}" styleName="drillDownLabel"/>
			<mx:Label text="{resourceManager.getString('drilldown','replacementNote')}" styleName="drillDownSubLabel"/>
		</mx:HBox>
		<mx:HBox id="replacementInfoHBox" horizontalGap="0">
			<mx:Label text="{resourceManager.getString('drilldown','replacementEntryId')}" styleName="drillDownLabel"/>
			<mx:Label id="replacementEntryId" styleName="drillDownSubLabel" selectable="true"/>
			<mx:Label text="|" width="15" enabled="false"/>
			<mx:Label text="{resourceManager.getString('drilldown','status') + ':'}" styleName="drillDownLabel"/>
			<mx:LinkButton id="replacementStatusBtn" paddingLeft="0" click="{onReplacementStatusBtnClick()}"/>
			<mx:HBox id="replacementActionsHBox" horizontalGap="0" paddingLeft="0">
				<mx:Label text="|" width="15" enabled="false"/>
				<mx:LinkButton label="{resourceManager.getString('drilldown','cancelReplacement')}"
							   click="{onCancelReplacementClick()}" styleName="deleteIcon"/>
				<mx:Label text="/" width="15" enabled="false"/>
				<mx:LinkButton label="{resourceManager.getString('drilldown','approveReplacement')}"
							   click="{onApproveReplacementClick()}" styleName="yesIcon" enabled="{_approveEnabled}"/>
			</mx:HBox>
		</mx:HBox>
	</mx:VBox>
	<mx:HRule width="100%"/>
	
	<!-- flavors table -->
	<mx:HBox width="100%">
		<mx:Text text="{resourceManager.getString('drilldown','flavorAssetsDescription')}" width="100%"/>
		<mx:LinkButton click="refreshData(true)" label="{resourceManager.getString('drilldown','refresh')}"
					   styleName="recycleIcon"/>
	</mx:HBox>
	<view:FlavorsTable id="dg" dataProvider="{flavorAssets}" allowImport="{allowImport}" allowLink="{allowLink}"
					   allowMatch="{allowMatchFromDrop}" allowUpload="{allowUpload}"/>
</mx:Module>
