<?xml version="1.0" encoding="utf-8"?>
<!---
Thumbnails tab of EntryDetailsWin
-->
<mx:Module layout="vertical" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
		   label="{resourceManager.getString('drilldown', 'thumbnails')}"
		   implements="com.kaltura.edw.business.IDrilldownPanel" xmlns:control="com.kaltura.edw.control.*">
	<mx:Metadata>
		[Event(name="validationComplete", type="com.kaltura.edw.events.ValidationResultEvent")] 
		[Event(name="panelDataSaved", type="com.kaltura.edw.events.InternalKedEvent")] 
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.analytics.GoogleAnalyticsConsts;
			import com.kaltura.analytics.GoogleAnalyticsTracker;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.constants.PanelConsts;
			import com.kaltura.edw.constants.ThumbnailsActionType;
			import com.kaltura.edw.control.events.ThumbnailAssetEvent;
			import com.kaltura.edw.control.events.UploadFromImageThumbAssetEvent;
			import com.kaltura.edw.events.InternalKedEvent;
			import com.kaltura.edw.events.ValidationResultEvent;
			import com.kaltura.edw.model.datapacks.ContextDataPack;
			import com.kaltura.edw.model.datapacks.DistributionDataPack;
			import com.kaltura.edw.model.datapacks.FilterDataPack;
			import com.kaltura.edw.view.ir.ThumbAssetDistributionProfilesRenderer;
			import com.kaltura.edw.view.window.CropThumbnailWindow;
			import com.kaltura.edw.view.window.GrabFromVideoWindow;
			import com.kaltura.edw.vo.ThumbnailWithDimensions;
			import com.kaltura.kmvc.model.IDataPackRepository;
			import com.kaltura.types.KalturaEntryStatus;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaMixEntry;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			
			public static const IMAGE_TYPES:String = "*.jpg;*.jpeg;*.gif;*.png";
			
			/**
			 * upload new thumbnail FR
			 * */
			private var _fileReference:FileReference;
			
			/**
			 * @copy #selectedEntry
			 * */
			private var _selectedEntry:KalturaBaseEntry;
			
			public function get selectedEntry():KalturaBaseEntry {
				return _selectedEntry;
			}
			
			
			public function set selectedEntry(value:KalturaBaseEntry):void {
				if (!value)
					return;
				_selectedEntry = value;
				
				//set the available operations for current entry
				_uploadThumbnailActionsDP = new Array(resourceManager.getString('drilldown', 'upload'));
				if ((_selectedEntry.status != KalturaEntryStatus.NO_CONTENT) && ((_selectedEntry is KalturaMixEntry) || (int(_selectedEntry.mediaType) == KalturaMediaType.VIDEO))) {
					_uploadThumbnailActionsDP.push(resourceManager.getString('drilldown', 'grabFromVideo'));
					if (int(_selectedEntry.mediaType) == KalturaMediaType.VIDEO)
						_uploadThumbnailActionsDP.push(resourceManager.getString('drilldown', 'cropNewThumbnail'));
				}
			}
			
			
			/**
			 * change watcher for thumbnailDimensions array on the distribution profile info
			 * */
			private var _tumbDimCW:ChangeWatcher;
			
			/**
			 * distribution info
			 * */
			private var _distributionModel:DistributionDataPack;
			
			

			private var _context:ContextDataPack;
			
			public function get context():ContextDataPack {
				return _context;
			}
			
			public function set context(value:ContextDataPack):void {
				_context = value;
			}
			

			[Bindable]
			private var _dimensionsArray:Array;
			
			[Bindable]
			private var _uploadThumbnailActionsDP:Array;
			
			private var _cropperWindow:CropThumbnailWindow;
			
			
			/**
			 * when user requests to delete an asset, the asset to delete.
			 * */
			private var _thumbAsset:ThumbnailWithDimensions;
			
			private var _distibutionEnabled:Boolean = false;
			
			/**
			 * will add the "profiles" column if we have distribution
			 * */
			public function set enableDistribution(value:Boolean):void {
				if (value && !_distibutionEnabled) {
					var columnsArray:Array = dataGrid.columns;
					columnsArray.splice(3, 0, partnersCol);
					dataGrid.columns = columnsArray;
				}
				
				_distibutionEnabled = value;
			}
			
			public function set showTagsColumn(value:Boolean):void{
				tagsCol.visible = value;
			}
			
			public function get showTagsColumn():Boolean{
				return true;
			}

			
			private var _dpModel:IDataPackRepository;
			
			public function get dataPackModel():IDataPackRepository{
				return _dpModel;
			}
			
			public function set dataPackModel(value:IDataPackRepository):void{
				_dpModel = value;
				var filterData:FilterDataPack = _dpModel.getDataPack(FilterDataPack) as FilterDataPack;
				enableDistribution = filterData.filterModel.enableDistribution;
				context = _dpModel.getDataPack(ContextDataPack) as ContextDataPack;
				distributionModel = _dpModel.getDataPack(DistributionDataPack) as DistributionDataPack;
				
				var filterDP:FilterDataPack = _dpModel.getDataPack(FilterDataPack) as FilterDataPack;
				enableDistribution = filterDP.filterModel.enableDistribution;
			}
			
			public function get helpAnchor():String{
				return "entry_thumbnails";
			}
			
			public function validate():void {
				// this panel's data cannot be invalid
				dispatchEvent(new ValidationResultEvent(ValidationResultEvent.VALIDATION_COMPLETE, true));
			}
			
			public function save():void {
				// this panel's data is saved as it changes, so save here isn't required
				dispatchEvent(new InternalKedEvent(InternalKedEvent.PANEL_DATA_SAVED));
			}
			
			public function isChanged():Boolean {
				// save action cannot be required because of this panel
				return false;
			}
			
			public function initData():void {
//				var listThumbs:ThumbnailAssetEvent = new ThumbnailAssetEvent(ThumbnailAssetEvent.LIST);
//				controller.dispatch(listThumbs);
				_distributionModel.loadThumbs(controller, _selectedEntry);
			}
			
			
			public function destroy():void {
				_tumbDimCW.unwatch();
				dataGrid.addEventListener(ThumbnailsActionType.SET_DEFAULT, thumbActionHandler);
				dataGrid.addEventListener(ThumbnailsActionType.DOWNLOAD, thumbActionHandler);
				dataGrid.addEventListener(ThumbnailsActionType.DELETE, thumbActionHandler);
			}
			
			
			public function clear():void {
				
			}
			
			public function init():void {
				dataGrid.addEventListener(ThumbnailsActionType.SET_DEFAULT, thumbActionHandler);
				dataGrid.addEventListener(ThumbnailsActionType.DOWNLOAD, thumbActionHandler);
				dataGrid.addEventListener(ThumbnailsActionType.DELETE, thumbActionHandler);
				
				PermissionManager.getInstance().applyAllAttributes(this, PanelConsts.THUMBNAILS_PANEL);
			}
			
			
			
			
			public function get distributionModel():DistributionDataPack {
				return _distributionModel;
			}
			
			
			public function set distributionModel(value:DistributionDataPack):void {
				_distributionModel = value;
				if (_tumbDimCW) {
					_tumbDimCW.unwatch();
				}
				
				if (_distributionModel) {
					_tumbDimCW = BindingUtils.bindSetter(setDimensionsArray, _distributionModel.distributionInfo, "thumbnailDimensions");
				}
				
			}
			
			
			
			
			public function set editable(value:Boolean):void {
				if (!value) {
					actionCB.visible = false;
					//remove action column from datagrid
					var arrCol:ArrayCollection = new ArrayCollection(dataGrid.columns);
					for (var i:int = 0; i < arrCol.length; ++i) {
						if (arrCol[i].headerText == resourceManager.getString('drilldown', 'actionCol')) {
							arrCol.removeItemAt(i);
							break;
						}
					}
					dataGrid.columns = arrCol.source;
				}
			}
			
			
			public function get editable():Boolean {
				return true;
			}
			
			
			private function setDimensionsArray(array:Array):void {
				_dimensionsArray = array;
				if (_cropperWindow)
					_cropperWindow.thumbnailsList = array;
			}
			
			
			
			
			/**
			 * trigger the different options to add new thumbnail 
			 * */
			private function addThumb(event:Event):void {
				switch (actionCB.selectedItem) {
					case resourceManager.getString('drilldown', 'upload'):
						uploadNewThumbnail();
						break;
					case resourceManager.getString('drilldown', 'grabFromVideo'):
						openGrabFromVideoPopup();
						break;
					case resourceManager.getString('drilldown', 'cropNewThumbnail'):
						openCropThumbPopup();
						break;
				}
				//to set the prompt back
				actionCB.selectedIndex = -1;
			}
			
			
			private function uploadNewThumbnail():void {
				_fileReference = new FileReference();
				_fileReference.addEventListener(Event.SELECT, onThumbnailSelected);
				_fileReference.browse(new Array(getImageTypeFilter()));
			}
			
			
			private function getImageTypeFilter():FileFilter {
				return new FileFilter("Images (" + IMAGE_TYPES + ")", IMAGE_TYPES);
			}
			
			
			private function onThumbnailSelected(event:Event):void {
				var uploadThumbnailEvent:UploadFromImageThumbAssetEvent = new UploadFromImageThumbAssetEvent(UploadFromImageThumbAssetEvent.ADD_FROM_IMAGE, selectedEntry.id, _fileReference);
				controller.dispatch(uploadThumbnailEvent);
				GoogleAnalyticsTracker.getInstance().sendToGA(GoogleAnalyticsConsts.CONTENT_DRILLDOWN_THUMBNAIL_ADD, GoogleAnalyticsConsts.CONTENT);
			}
			
			
			private function openGrabFromVideoPopup():void {
				var grabWindow:GrabFromVideoWindow = new GrabFromVideoWindow();
				grabWindow.selectedEntry = _selectedEntry;
				grabWindow.context = _context;
				grabWindow.controller = controller;
				PopUpManager.addPopUp(grabWindow, (Application.application as DisplayObject), true);
				PopUpManager.centerPopUp(grabWindow);
			}
			
			
			private function openCropThumbPopup():void {
				_cropperWindow = new CropThumbnailWindow();
				_cropperWindow.width = this.stage.stageWidth;
				_cropperWindow.height = this.stage.stageHeight;
				_cropperWindow.thumbnailsList = _distributionModel.distributionInfo.thumbnailDimensions;
				//				_cropperWindow.entryDetailsModel = _entryDetailsModel;  //Atar: not used?
				_cropperWindow.selectedEntry = selectedEntry;
				_cropperWindow.controller = controller;
				_cropperWindow.addEventListener(CropThumbnailWindow.WINDOW_CLOSE, onCropperClosed);
				PopUpManager.addPopUp(_cropperWindow, (Application.application as DisplayObject), true);
				PopUpManager.centerPopUp(_cropperWindow);
			}
			
			
			private function onCropperClosed(event:Event):void {
				PopUpManager.removePopUp(_cropperWindow);
				_cropperWindow = null;
			}
			
			
			private function compareDimensions(obj1:ThumbnailWithDimensions, obj2:ThumbnailWithDimensions):int {
				if (obj1.width < obj2.width)
					return -1;
				if (obj1.width == obj2.width) {
					if (obj1.height < obj2.height)
						return -1;
					if (obj1.height == obj2.height)
						return 0;
					return 1;
				}
				return 1;
			}
			
			// ======================================================================================
			
			/**
			 * handler for thumb actions
			 * */
			private function thumbActionHandler(event:Event):void {
				var gaEvent:String;
				var thAs:ThumbnailWithDimensions = event.target.data as ThumbnailWithDimensions;
				switch (event.type){
					case ThumbnailsActionType.SET_DEFAULT:
						var setDefaultEvent:ThumbnailAssetEvent = new ThumbnailAssetEvent(ThumbnailAssetEvent.SET_AS_DEFAULT, thAs);
						controller.dispatch(setDefaultEvent);
						gaEvent = GoogleAnalyticsConsts.CONTENT_DRILLDOWN_THUMBNAIL_DEFAULT;
						break;
					
					case ThumbnailsActionType.DOWNLOAD:
						var urlRequest:URLRequest = new URLRequest(thAs.thumbUrl);
						navigateToURL(urlRequest , '_self');
						gaEvent = GoogleAnalyticsConsts.CONTENT_DRILLDOWN_THUMBNAIL_DNLD;
						break;
					
					case ThumbnailsActionType.DELETE:
						_thumbAsset = thAs;
						Alert.show(resourceManager.getString('drilldown','deleteThumbnailMsg'), 
							resourceManager.getString('drilldown','deleteThumbnailTitle'), Alert.YES | Alert.NO, null, deleteHandler);		
						gaEvent = GoogleAnalyticsConsts.CONTENT_DRILLDOWN_THUMBNAIL_DELETE;
						break;
				}
				if (gaEvent) {
					GoogleAnalyticsTracker.getInstance().sendToGA(gaEvent, GoogleAnalyticsConsts.CONTENT);
				}
			}
			
			
			/**
			 * delete a thumb asset (after user confirmation)
			 * */
			private function deleteHandler(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					var deleteThumbEvent:ThumbnailAssetEvent = new ThumbnailAssetEvent(ThumbnailAssetEvent.DELETE, _thumbAsset);
					controller.dispatch(deleteThumbEvent);
				}
			}
		]]>
	</mx:Script>
	<control:ThumbTabController id="controller" />
	
	<mx:DataGridColumn id="partnersCol" headerText="{resourceManager.getString('drilldown','distributionPartnersCol')}"
					   itemRenderer="com.kaltura.edw.view.ir.ThumbAssetDistributionProfilesRenderer"
					   sortable="false" width="135"/>
	<mx:ComboBox id="actionCB" prompt="{resourceManager.getString('drilldown','addThumbnail')}"
				 dataProvider="{_uploadThumbnailActionsDP}" change="{addThumb(event)}" selectedIndex="-1"
				 tabIndex="0"/>
	
	<mx:DataGrid id="dataGrid" width="100%" height="100%" dataProvider="{_dimensionsArray}" draggableColumns="false"
				 selectable="false" rowHeight="100" editable="false">
		<mx:columns>
			<mx:DataGridColumn id="thumbCol" headerText="{resourceManager.getString('drilldown','thumbnailCol')}"
							   editable="false" sortable="false" width="130"
							   itemRenderer="com.kaltura.edw.view.ir.ThumbAssetRenderer" />
			<mx:DataGridColumn id="dimensionsCol" headerText="{resourceManager.getString('drilldown','dimensionsCol')}"
							   editable="false" sortable="true" sortCompareFunction="{compareDimensions}"
							   itemRenderer="com.kaltura.edw.view.ir.ThumbAssetDimensionsRenderer" />
			<mx:DataGridColumn id="sizeCol" headerText="{resourceManager.getString('drilldown','thumbSizeCol')}"
							   editable="false" sortable="false"
							   itemRenderer="com.kaltura.edw.view.ir.ThumbAssetSizeRenderer" />
			<mx:DataGridColumn id="statusCol" headerText="{resourceManager.getString('drilldown','statusCol')}"
							   editable="false" sortable="false" 
							   itemRenderer="com.kaltura.edw.view.ir.ThumbAssetStatusRenderer" />
			<mx:DataGridColumn id="tagsCol" headerText="{resourceManager.getString('drilldown','tagsCol')}"
							   editable="false" sortable="false" width="130"
							   itemRenderer="com.kaltura.edw.view.ir.ThumbAssetTagsRenderer" />
			<mx:DataGridColumn id="actionCol" headerText="{resourceManager.getString('drilldown','actionCol')}"
							   editable="false" sortable="false" minWidth="115"
							   itemRenderer="com.kaltura.edw.view.ir.ThumbAssetActionRenderer" />
		</mx:columns>
	</mx:DataGrid>
</mx:Module>
