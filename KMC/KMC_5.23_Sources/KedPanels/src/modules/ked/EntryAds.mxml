<?xml version="1.0" encoding="utf-8"?>
<mx:Module layout="vertical" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
		   implements="com.kaltura.edw.business.IDrilldownPanel" xmlns:controls="com.kaltura.controls.*"
		   hide="hideHandler(event)" xmlns:control="com.kaltura.edw.control.*"
		   label="{resourceManager.getString('drilldown','ads')}">
	<mx:Metadata>
		[Event(name="validationComplete", type="com.kaltura.edw.events.ValidationResultEvent")] 
		[Event(name="panelDataSaved", type="com.kaltura.edw.events.InternalKedEvent")] 
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.constants.PanelConsts;
			import com.kaltura.edw.control.events.CuePointEvent;
			import com.kaltura.edw.events.InternalKedEvent;
			import com.kaltura.edw.events.ValidationResultEvent;
			import com.kaltura.edw.model.datapacks.ContextDataPack;
			import com.kaltura.edw.model.datapacks.CuePointsDataPack;
			import com.kaltura.edw.vo.EntryDetailsValidationError;
			import com.kaltura.events.KClipErrorCodes;
			import com.kaltura.events.KClipEventTypes;
			import com.kaltura.events.KdpEventTypes;
			import com.kaltura.kmvc.model.IDataPackRepository;
			import com.kaltura.types.KalturaAdProtocolType;
			import com.kaltura.types.KalturaAdType;
			import com.kaltura.types.KalturaCuePointType;
			import com.kaltura.types.KalturaEntryStatus;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.utils.ObjectUtil;
			import com.kaltura.vo.KalturaAdCuePoint;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaMediaEntry;
			
			import flash.utils.setTimeout;
			
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import mx.controls.Alert;
			import mx.controls.Image;
			import mx.controls.SWFLoader;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.resources.ResourceManager;
			
			
			private static const BULK_ACTIONS:Array = [{label: ResourceManager.getInstance().getString('drilldown', 'ads_bulk_upload'), value: 'ads_bulk_upload'},
				{label: ResourceManager.getInstance().getString('drilldown', 'ads_bulk_download'), value: 'ads_bulk_download'},
				{label: ResourceManager.getInstance().getString('drilldown', 'ads_bulk_sample'), value: 'ads_bulk_sample'}];
			
			private static const AD_TYPES:Array = [{label: ResourceManager.getInstance().getString('drilldown', 'type_midroll'), value: KalturaAdType.VIDEO},
				{label: ResourceManager.getInstance().getString('drilldown', 'type_overlay'), value: KalturaAdType.OVERLAY}];
			
			private static const PROVIDERS:Array = [{label: ResourceManager.getInstance().getString('drilldown', 'provider_vast'), value: 'vast'},
				{label: ResourceManager.getInstance().getString('drilldown', 'provider_other'), value: 'other'}];
			
			private const LABEL_WIDTH:int = 80;
			
			public static const XML_EXL:String = "*.xml";
			
			/**
			 * clipper ruler is kept between different
			 * instances of the window as optimisation
			 * */
			private var _kClip:DisplayObject;
			private static var kClipLoader:SWFLoader;
			
			/**
			 * a flag used to determine we can talk with the kClip
			 * */
			private var _kClipReady:Boolean = false;
			
			/**
			 * player is kept between different
			 * instances of the window as optimisation
			 * */
			private var _kdp:DisplayObject;
			private static var kdpLoader:SWFLoader;
			
			
			/**
			 * to stop loop between updating playhead in kclip/kdp
			 * */
			private var _kdpInitiatedUpdate:Boolean = false;
			
			/**
			 * so that we won't add listeners to kclip and KDP every time
			 * initData is called (when paging between entries)
			 * */
			private var _listenersAddedKDP:Boolean = false;
			private var _listenersAddedKClip:Boolean = false;
			
			[Bindable]
			/**
			 * should components in the tab be editable
			 * */
			public var editable:Boolean = true;
			
			/**
			 * disable alerts in KDP
			 * */
			public var disableKDPAlerts:Boolean = true;
			
			public var context:ContextDataPack;
			
			
			/**
			 * data for this panel
			 * */
			public var model:CuePointsDataPack;
			
			[Bindable]
			/**
			 * number of currently present cuepoints on kClip
			 * */
			private var _counter:int = 0;
			
			/**
			 * change watcher to update kclip when entry duration changes
			 * */
			private var _durationWatcher:ChangeWatcher;
			
			[Bindable]
			/**
			 * @copy #selectedEntry
			 * */
			private var _selectedEntry:KalturaBaseEntry;
			
			private var _dpModel:IDataPackRepository;
			/**
			 * the entry being edited
			 * */
			public function get selectedEntry():KalturaBaseEntry {
				return _selectedEntry;
			}
			public function set selectedEntry(value:KalturaBaseEntry):void {
				if (_durationWatcher) {
					// unbind
					_durationWatcher.unwatch();
				}
				_selectedEntry = value;
				if (_kClip != null && _selectedEntry != null){
					_durationWatcher = BindingUtils.bindSetter(myFunc, _selectedEntry, "duration");
				}
			}
			
			public function get dataPackModel():IDataPackRepository{
				return _dpModel;
			}
			public function set dataPackModel(value:IDataPackRepository):void{
				_dpModel = value;
				context = _dpModel.getDataPack(ContextDataPack) as ContextDataPack;
				model = _dpModel.getDataPack(CuePointsDataPack) as CuePointsDataPack;
			}
			
			public function get helpAnchor():String{
				return "entry_ads";
			}
			
			[Bindable]
			/**
			 * is the cuepoints details form enabled
			 * */
			private var _formEnabled:Boolean = false;
			
			[Bindable]
			/**
			 * the cuepoint currently being edited
			 * */
			private var _selectedCuePoint:KalturaAdCuePoint;
			
			/**
			 * change watcher for reacting to cueopints count being set on model
			 * */
			private var _watchCPCount:ChangeWatcher;
			/**
			 * change watcher for reacting to reloadCuePoints being set on model
			 * */
			private var _watchCPReload:ChangeWatcher;
			
			/**
			 * image for KDP when entry is in no_content status
			 * */
			private var _img:Image;
			
			/**
			 * file reference object used for bulk upload
			 * */
			private var _bulkUpldFileRef:FileReference;
			
			/**
			 * current playhead position, in ms.
			 * */
			private var _playheadPosition:Number;
			
			private var _doValidation:Boolean = false;
			
			
			/**
			 * validate all the cuepoints on kClip
			 * */
			public function validate():void {
				var success:Boolean = true;	// validation result
				var errorMessage:String;
				var errorTitle:String;
				
				_selectedCuePoint = null;
				_formEnabled = false;
				if (_kClipReady) {
					var cpresult:Boolean;
					var cps:Array = getCuepoints();
					for each (var cp:KalturaAdCuePoint in cps) {
						cpresult = validateCuePoint(cp);
						// mark this cp as in/valid
						_kClip["setError"](!cpresult, cp.id);
						success &&= cpresult;
						
					}
					if (!success) {
						errorMessage = resourceManager.getString('drilldown', 'ads_error_string'); 
						errorTitle = resourceManager.getString('drilldown', 'ads_error_title'); 
					}
					_doValidation = true;
				}
				// otherwise, the component wasn't ready so no data 
				// could have changed to invalid data
				
				var e:ValidationResultEvent = new ValidationResultEvent(ValidationResultEvent.VALIDATION_COMPLETE, success, errorMessage, errorTitle);
				dispatchEvent(e);
			}
			
			
			public function clear():void {
			}
			
			
			public function init():void {
				Security.allowDomain("*");
				PermissionManager.getInstance().applyAllAttributes(this, PanelConsts.ADS_PANEL);
				
				if (!_watchCPCount) {
					_watchCPCount = BindingUtils.bindSetter(adjustBulkActions, model, "cuepointsCount");
				}
				if (!_watchCPReload) {
					_watchCPReload = BindingUtils.bindSetter(callReloadCuePoints, model, "reloadCuePoints");
				}
			}
			
			/**
			 * reset kclip to accept new duration
			 * */
			private function myFunc(newDuration:Number):void {
				if (_selectedEntry.status == KalturaEntryStatus.READY) {
					if (_kClip) {
						_kClip["setEntryId"](_selectedEntry.id);
					}
					if (_kdp) {
						_kdp["sendNotification"](KdpEventTypes.CHANGE_MEDIA, {entryId: _selectedEntry.id});
					}
				}
			}
			
			/**
			 * trace the error instead of crashing the browser
			 * */
			private function uncaughtErrorHandler(event:Event):void {
				event.preventDefault();
				trace("uncaughtErrorHandler (EntryAds): ", event, event["error"]);
			}
			
			
			
			/**
			 * stop KDP if it happens to be playing
			 * */
			private function hideHandler(event:FlexEvent):void {
				if (_kdp){
					_kdp["sendNotification"](KdpEventTypes.DO_PAUSE);
				}
			}
			
			
			public function destroy():void {
				if (_kdp) {
					_kdp.removeEventListener(KdpEventTypes.PLAYER_PLAYED, handleKdpEvents, false);
					_kdp.removeEventListener(KdpEventTypes.PLAYER_PAUSED, handleKdpEvents, false);
					_kdp.removeEventListener(KdpEventTypes.PLAYER_PLAY_END, handleKdpEvents, false);
					_kdp.removeEventListener(KdpEventTypes.DO_SEEK, handleKdpEvents, false);
					_kdp["sendNotification"](KdpEventTypes.DO_PAUSE);
				}
				if (_kClip) {
					removeKClipListeners();
				}
				if (_watchCPCount) {
					_watchCPCount.unwatch();
				}
				if (_watchCPReload) {
					_watchCPReload.unwatch();
				}
				if (_durationWatcher) {
					_durationWatcher.unwatch();
				}
			}
			
			
			public function initData():void {
				_doValidation = false;
				_selectedCuePoint = null;
				_formEnabled = false;
				// reset number of cuepoints
				var cg:CuePointEvent = new CuePointEvent(CuePointEvent.RESET_CUEPOINTS_COUNT);
				controller.dispatch(cg);
				loadWidgets();
				// get number of entry cuepoints
				cg = new CuePointEvent(CuePointEvent.COUNT_CUEPOINTS);
				cg.data = _selectedEntry.id;
				controller.dispatch(cg);
			}
			
			
			
			/**
			 * reload cue points if true
			 * @internal
			 * used after bulk uploads - the command changes this value on the model.
			 * */
			private function callReloadCuePoints(value:Boolean):void {
				if (value && _kClip) {
					// reload cue points
					_kClip["loadCuePoints"]();
				}
			}
			
			
			
			private function updateKClipStatus(setEntryId:Boolean = true):void {
				var sm:KalturaMediaEntry = _selectedEntry as KalturaMediaEntry;
				if (sm.status != KalturaEntryStatus.READY || (sm.mediaType != KalturaMediaType.AUDIO && sm.mediaType != KalturaMediaType.VIDEO)) {
					if (_kClip["isReady"]()) {
						_kClip["setDisabled"](true);
					}
				}
				else {
					if (setEntryId && _kClip["isReady"]()) {
						_kClipReady = false;
						_kClip["setEntryId"](_selectedEntry.id);
					}
				}
				
				if (_durationWatcher == null && sm != null){
					_durationWatcher = BindingUtils.bindSetter(myFunc, _selectedEntry, "duration");
				}
			}
			
			
			private function updateKdpStatus(setEntryId:Boolean = true):void {
				if (_selectedEntry.status != KalturaEntryStatus.READY) {
					// entry not ready, show image and hide KDP
					if (!_img) {
						_img = new Image();
					}
					_img.source = StyleManager.getStyleDeclaration(".imageBank").getStyle("noContentImg");
					if (!_img.parent) {
						kdpHolder.addChild(_img);
					}
					if (_kdp && kdpLoader.parent) {
						kdpHolder.removeChild(kdpLoader);
					}
				}
				else {
					// add kdp, remove image, set entry id
					if (_kdp) {
						if (!kdpLoader.parent) {
							kdpHolder.addChild(kdpLoader);
						}
						if (setEntryId) {
							_kdp["sendNotification"](KdpEventTypes.CHANGE_MEDIA, {entryId: _selectedEntry.id});
						}
					}
					if (_img && _img.parent) {
						kdpHolder.removeChild(_img);
					}
				}
			}
			
			
			
			
			public function save():void {
				if (isChanged()) {
//					_kClip.addEventListener(KClipEventTypes.SAVED, handleKClipEvents);
					_kClip["save"]();
				}
				else {
					dispatchEvent(new InternalKedEvent(InternalKedEvent.PANEL_DATA_SAVED));
				}
			}
			
			
			/**
			 * has the data in the panel changed since last save?
			 * */
			public function isChanged():Boolean {
				if (_kClipReady) {
					return _kClip["isSaveRequired"]();
				}
				return false;
			}
			
			
			
			/**
			 * set the given CP's values in the details form.
			 * */
			private function showCuePointDetails(o:Object):void {
				var cp:KalturaAdCuePoint = new KalturaAdCuePoint();
				ObjectUtil.copyObject(o, cp);
				_selectedCuePoint = cp;
				// if roles and permissions allow editing, make the form editable
				if (editable) {
					_formEnabled = true;
				}
				cbType.selectedIndex = getAdType(_selectedCuePoint);
				cbProvider.selectedItem = getAdProvider(_selectedCuePoint);
				if (_doValidation) {
					validateCuePoint(_selectedCuePoint, true);
				}
			}
			
			
			/**
			 * was the given cuepoint already saved to DB
			 * @param cp 	cuepoint to check
			 * */
			private function isNewCuepoint(cp:KalturaAdCuePoint):Boolean {
				return cp.createdAt == int.MIN_VALUE;
			}
			
			
			/**
			 * load KDP and KClip or add them to stage, as needed.
			 * */
			private function loadWidgets():void {
				if (EntryAds.kClipLoader) {
					kClipHolder.addChild(kClipLoader);
					_kClip = kClipLoader.content["application"] as DisplayObject;
					_kClip.width = kClipHolder.width;
					addKClipListeners();
					if (selectedEntry) {
						updateKClipStatus(true);
					}
				}
				else {
					var url:String = context.protocol + context.cdnHost + "/kgeneric/ui_conf_id/" + context.kClipAdsUiconf;
					EntryAds.kClipLoader = new SWFLoader();
					kClipLoader.trustContent = true;
					kClipHolder.addChild(kClipLoader);
					kClipLoader.addEventListener(Event.COMPLETE, onKClipLoaded);
					kClipLoader.scaleContent = true;
					kClipLoader.percentWidth = 100;
					kClipLoader.percentHeight = 100;
					kClipLoader.loaderContext = new LoaderContext(false, new ApplicationDomain(), SecurityDomain.currentDomain);
					kClipLoader.load(url);
				}
				
				if (EntryAds.kdpLoader) {
					kdpHolder.addChild(kdpLoader);
					_kdp = kdpLoader.content;
					if (!_listenersAddedKDP) {
						
						addKDPListeners();
						_listenersAddedKDP = true;
					}
					if (selectedEntry) {
						updateKdpStatus(true);
					}
				}
				else {
					if (_selectedEntry && _selectedEntry.status == KalturaEntryStatus.READY) {
						var newUrl:String = context.protocol + context.cdnHost + "/kwidget/wid/_" + context.kc.partnerId + "/ui_conf_id/" + context.drilldownAdsUiconf + "/nowrapper/1";
						EntryAds.kdpLoader = new SWFLoader();
						kdpLoader.addEventListener(Event.COMPLETE, onKdpLoaded);
						kdpLoader.scaleContent = false;
						kdpLoader.loaderContext = new LoaderContext(true, new ApplicationDomain(), SecurityDomain.currentDomain);
						kdpLoader.load(newUrl);
					}
					else {
						updateKdpStatus(false);
					}
				}
			}
			
			private function addKDPListeners():void {
				_kdp.addEventListener(KdpEventTypes.PLAYER_PLAYED, handleKdpEvents, false, 0, true);
				_kdp.addEventListener(KdpEventTypes.PLAYER_PAUSED, handleKdpEvents, false, 0, true);
				_kdp.addEventListener(KdpEventTypes.PLAYER_PLAY_END, handleKdpEvents, false, 0, true);
				_kdp.addEventListener(KdpEventTypes.DO_SEEK, handleKdpEvents, false, 0, true);
			}
			
			/**
			 * wait for kClip application to be ready
			 * */
			private function onKClipLoaded(e:Event):void {
				kClipLoader.removeEventListener(Event.COMPLETE, onKClipLoaded);
				kClipLoader.width = kClipHolder.width;
				kClipLoader.height = kClipHolder.height;
				kClipLoader.content.addEventListener(FlexEvent.APPLICATION_COMPLETE, onKClipApplicationReady);
			}
			
			
			private function onKClipApplicationReady(e:Event):void {
				// e.target is the systemManager for KClip
				e.target.removeEventListener(FlexEvent.APPLICATION_COMPLETE, onKClipApplicationReady);
				_kClip = e.target.application as DisplayObject;
				initKClip();
			}
			
			
			/**
			 * initialize kClip
			 * */
			private function initKClip():void {
				var params:Object = {};
				params.ks = context.kc.ks;
				params.host = context.rootUrl;
				params.protocol = context.protocol;
				params.cdnHost = context.cdnHost;
				params.state = "cuePointsState";
				params.showControlBar = "true";
				params.partner_id = context.kc.partnerId;
				params.uiconf_id = context.kClipAdsUiconf;
				params.cuepointType = KalturaCuePointType.AD;
				addKClipListeners();
				_kClip["init"](params);
				_kClip.width = kClipHolder.width;
			}
			
			
			private function addKClipListeners():void {
				if (!_listenersAddedKClip) {
					_kClip.addEventListener(KClipEventTypes.PLAYHEAD_UPDATED, handleKClipEvents);
					_kClip.addEventListener(KClipEventTypes.SELECTED_ASSET_REMOVED, handleKClipEvents);
					_kClip.addEventListener(KClipEventTypes.ALL_ASSETS_REMOVED, handleKClipEvents);
					_kClip.addEventListener(KClipEventTypes.CUE_POINT_CHANGED, handleKClipEvents);
					_kClip.addEventListener(KClipEventTypes.SELECTED_ASSET_CHANGED, handleKClipEvents);
					_kClip.addEventListener(KClipEventTypes.ENTRY_READY, handleKClipEvents);
					_kClip.addEventListener(KClipEventTypes.CLIPPER_ERROR, handleKClipEvents);
					_kClip.addEventListener(KClipEventTypes.CUE_POINT_ADDED, handleKClipEvents);
					_kClip.addEventListener(KClipEventTypes.CLIPPER_READY, handleKClipEvents);
					_kClip.addEventListener(KClipEventTypes.PLAYHEAD_DRAG_DROP, handleKClipEvents);
					_kClip.addEventListener(KClipEventTypes.PLAYHEAD_DRAG_START, handleKClipEvents);
					_kClip.addEventListener(KClipEventTypes.ZOOM_CHANGED, handleKClipEvents);
					_kClip.addEventListener(KClipEventTypes.SAVED, handleKClipEvents);
					_listenersAddedKClip = true;
				}
			}
			
			
			private function removeKClipListeners():void {
				_kClip.removeEventListener(KClipEventTypes.PLAYHEAD_UPDATED, handleKClipEvents);
				_kClip.removeEventListener(KClipEventTypes.SELECTED_ASSET_REMOVED, handleKClipEvents);
				_kClip.removeEventListener(KClipEventTypes.ALL_ASSETS_REMOVED, handleKClipEvents);
				_kClip.removeEventListener(KClipEventTypes.CUE_POINT_CHANGED, handleKClipEvents);
				_kClip.removeEventListener(KClipEventTypes.SELECTED_ASSET_CHANGED, handleKClipEvents);
				_kClip.removeEventListener(KClipEventTypes.ENTRY_READY, handleKClipEvents);
				_kClip.removeEventListener(KClipEventTypes.CLIPPER_ERROR, handleKClipEvents);
				_kClip.removeEventListener(KClipEventTypes.CUE_POINT_ADDED, handleKClipEvents);
				_kClip.removeEventListener(KClipEventTypes.CLIPPER_READY, handleKClipEvents);
				_kClip.removeEventListener(KClipEventTypes.PLAYHEAD_DRAG_DROP, handleKClipEvents);
				_kClip.removeEventListener(KClipEventTypes.PLAYHEAD_DRAG_START, handleKClipEvents);
				_kClip.removeEventListener(KClipEventTypes.ZOOM_CHANGED, handleKClipEvents);
				_kClip.removeEventListener(KClipEventTypes.SAVED, handleKClipEvents);
			}
			
			
			/**
			 * handle all kClip events
			 * */
			private function handleKClipEvents(e:Event):void {
				e.stopImmediatePropagation();
				switch (e.type) {
					case KClipEventTypes.PLAYHEAD_DRAG_START:
						_kClip.removeEventListener(KClipEventTypes.PLAYHEAD_UPDATED, handleKClipEvents);
						break;
					case KClipEventTypes.PLAYHEAD_DRAG_DROP:
						_playheadPosition = parseFloat(e["data"]);
						_kClip.addEventListener(KClipEventTypes.PLAYHEAD_UPDATED, handleKClipEvents);
						updateKdpPlayhead(_playheadPosition / 1000);
						break;
					
					case KClipEventTypes.CLIPPER_READY:
						updateKClipStatus(true);
						break;
					case KClipEventTypes.ENTRY_READY:
						// we get this after kclip finished loading entry data
						_kClipReady = true;
						_kClip["setDisabled"](!editable);
						break;
					case KClipEventTypes.PLAYHEAD_UPDATED:
						var value:Number = parseFloat(e["data"]);
						if (value != _playheadPosition) {
							updateKdpPlayhead(value / 1000);
							_playheadPosition = value;
						}
						break;
					case KClipEventTypes.SELECTED_ASSET_REMOVED:
						_formEnabled = false;
						_selectedCuePoint = null;
						_counter--;
						if (_counter < 0) {
							_counter = 0;
							trace("removing more cuepoints than we have..");
						}
						break;
					case KClipEventTypes.ALL_ASSETS_REMOVED:
						_formEnabled = false;
						_counter = 0;
						break;
					case KClipEventTypes.CUE_POINT_CHANGED:
					case KClipEventTypes.SELECTED_ASSET_CHANGED:
						showCuePointDetails(e["data"]);
						break;
					case KClipEventTypes.CLIPPER_ERROR:
						onKClipError(e["data"]);
						break;
					case KClipEventTypes.CUE_POINT_ADDED:
						_counter++;
						break;
					case KClipEventTypes.SAVED:
						dispatchEvent(new InternalKedEvent(InternalKedEvent.PANEL_DATA_SAVED));
						break;
					case KClipEventTypes.ZOOM_CHANGED:
						// pause KDP
						if (_kdp) {
							_kdp["sendNotification"](KdpEventTypes.DO_PAUSE);
						}
						break;
				}
			}
			
			
			/**
			 * show user the error.
			 * @internal
			 * error localization should be done in kClip, not KMC.
			 * */
			private function onKClipError(errorVo:Object):void {
				// errorVo.messageText, errorVo.messageCode
				//TODO KClipErrorCodes.CUEPOINT_LOCATION_FAILED - don't show error right away, wait for 
				// the panel to show and only then show.
				if (errorVo.messageCode != KClipErrorCodes.CUEPOINT_LOCATION_FAILED) {
					Alert.show(errorVo.messageText);
				}
			}
			
			
			
			private function onKdpLoaded(e:Event):void {
				var loader:SWFLoader = e.target as SWFLoader;
				loader.width = kdpHolder.width;
				loader.height = kdpHolder.height;
				_kdp = loader.content;
				updateKdpStatus(false);
				if (!kdpLoader.parent) {
					kdpHolder.addChild(kdpLoader);
				}
				if (_img && _img.parent) {
					kdpHolder.removeChild(_img);
				}
				if (kdpLoader.loaderInfo.hasOwnProperty("uncaughtErrorEvents"))
					IEventDispatcher(kdpLoader.loaderInfo["uncaughtErrorEvents"]).addEventListener("uncaughtError", uncaughtErrorHandler, false, 1, true);
				initKdp();
			}
			
			
			/**
			 * initialize KDP
			 */
			private function initKdp():void {
				//set kdp params
				var params:Object = new Object();
				params.entryId = _selectedEntry.id;
				params.ks = context.kc.ks;
				params.partnerId = context.kc.partnerId;
				params.subpId = context.kc.partnerId + "00";
				params.cdnHost = context.cdnHost;
				
				params.allowCookies = true;
				params.debugMode = context.debugMode; 
				params.disableAlerts = disableKDPAlerts;
				
				_kdp["flashvars"] = params;
				//start the loading sequence of the kdp	
				_kdp["init"]();
				addKDPListeners();
			}
			
			
			private function handleKdpEvents(e:Event):void {
				switch (e.type) {
					case KdpEventTypes.PLAYER_PLAYED:
						if (_kClip) {
							_kClip.removeEventListener(KClipEventTypes.PLAYHEAD_UPDATED, handleKClipEvents, false);
						}
						_kdp.addEventListener(KdpEventTypes.PLAYER_UPDATE_PLAYHEAD, handleKdpEvents, false, 0, true);
						break;
					case KdpEventTypes.PLAYER_PAUSED:
					case KdpEventTypes.PLAYER_PLAY_END:
						if (_kClip) {
							_kClip["scrollToPoint"](_playheadPosition, true);
							_kdp.removeEventListener(KdpEventTypes.PLAYER_UPDATE_PLAYHEAD, handleKdpEvents, false);
							_kClip.addEventListener(KClipEventTypes.PLAYHEAD_UPDATED, handleKClipEvents, false, 0, true);
						}
						break;
					case KdpEventTypes.DO_SEEK:
						if (_kClipReady) {
							if (_kdpInitiatedUpdate)  {
								if (!isNaN(parseFloat(e["data"]))) {
									// when seeking in KDP we want kClip to load images.
									_kClip["scrollToPoint"](parseFloat(e["data"]) * 1000, true);
								}
							}
							else {
								_kdpInitiatedUpdate = true;
							}
						}
						break;
					case KdpEventTypes.PLAYER_UPDATE_PLAYHEAD:
						if (_kClipReady) {
							if (!isNaN(parseFloat(e["data"]))) {
								// we only listen to playhead update while in "play" mode, 
								// and in this case we don't want kClip to load images.
								_playheadPosition = parseFloat(e["data"]) * 1000;
								_kClip["scrollToPoint"](_playheadPosition, false);
							}
						}
						break;
				}
			}
			
			
			/**
			 * update kdp with new time
			 * @param n new time in seconds
			 * */
			private function updateKdpPlayhead(n:Number):void {
				_kdpInitiatedUpdate = false;
//				if (_kdp) {
//					if (_kdpFirstPlayed) {
//						// kdp played before. just seek
						_kdp["sendNotification"](KdpEventTypes.DO_SEEK, n);
//					}
//					else {
//						// cause first play
//						_kClipInitiatedPlay = true;
//						_kdp["setAttribute"]("mediaProxy", "mediaPlayFrom", n);
//						_kdp["sendNotification"](KdpEventTypes.DO_PLAY);
//					}
//				}
			}
			
			
			private function updateCuePointData(e:Event):void {
				// timing
				_selectedCuePoint.startTime = teTiming.getTimeAsSeconds() * 1000;
				// name
				_selectedCuePoint.title = tiName.text;
				// provider
				var value:String = cbProvider.selectedItem.value;
				if (value == "vast") {
					_selectedCuePoint.protocolType = KalturaAdProtocolType.VAST;
					_selectedCuePoint.tags = '';
				}
				else {
					// "other" provider
					_selectedCuePoint.protocolType = KalturaAdProtocolType.CUSTOM;
					_selectedCuePoint.tags = tiProvider.text;
				}
				// source url
				_selectedCuePoint.sourceUrl = tiUrl.text;
				// ad type
				_selectedCuePoint.adType = (cbType.selectedItem) ? cbType.selectedItem.value : null;
				// duration
				if (_selectedCuePoint.adType == KalturaAdType.VIDEO) {
					_selectedCuePoint.endTime = _selectedCuePoint.startTime;
				}
				else {
					_selectedCuePoint.endTime = _selectedCuePoint.startTime + teDuration.getTimeAsSeconds() * 1000;
				}
				// update
				_kClip["updateCuePoint"](_selectedCuePoint);
			}
			
			
			
			
			
			/**
			 * validate required fields of the given cuepoint
			 * @param cp	cuepoint to test
			 * @return true if validation passed, false otherwise.
			 * */
			private function validateCuePoint(cp:KalturaAdCuePoint, showUI:Boolean = false):Boolean {
				var result:Boolean = true;
				// ad type - must have value
				if (cp.adType != KalturaAdType.VIDEO && cp.adType != KalturaAdType.OVERLAY) {
					if (showUI) {
						cbType.errorString = "no adType selected";
					}
					result = false;
				}
				else if (showUI) {
					cbType.errorString = "";
				}
				// duration
				if (cp.adType == KalturaAdType.OVERLAY) {
					if (cp.endTime < cp.startTime) {
						if (showUI) {
							teDuration.errorString = "endTime before startTime";
						}
						result &&= false;
					}
					else if (cp.endTime > (_selectedEntry as KalturaMediaEntry).duration * 1000) {
						if (showUI) {
							teDuration.errorString = "endTime after entry.duration";
						}
						result &&= false;
					}
					else if (showUI) {
						teDuration.errorString = "";
					}
				}
				else if (showUI) {
					teDuration.errorString = "";
				}
				// for vast - url is mandatory
				if (cp.protocolType == KalturaAdProtocolType.VAST && !cp.sourceUrl) {
					if (showUI) {
						tiUrl.errorString = "vast, no sourceUrl";
					}
					result &&= false;
				}
				else if (showUI) {
					tiUrl.errorString = "";
				}
				return result;
			}
			
			
			/**
			 * retreive a list of cuepoints from kClip.
			 * @return all cuepoints currently displayed on kClip.
			 *
			 * @internal
			 * we have to translate kclip cps to kmc cps, because
			 * of the different ApplicationDomains.
			 * */
			private function getCuepoints():Array {
				var kclipcps:Array = _kClip["getAll"]();
				var cps:Array = new Array();
				var cp:KalturaAdCuePoint;
				for each (var o:Object in kclipcps) {
					cp = new KalturaAdCuePoint();
					ObjectUtil.copyObject(o, cp);
					cps.push(cp);
				}
				return cps;
			}
			
			
			
			/**
			 * calculate cuepoint duration
			 * */
			private function getDuration(acp:KalturaAdCuePoint):Object {
				if (acp.adType == KalturaAdType.VIDEO) {
					return teDuration.getTimeAsObject(0);
				}
				else if (acp.endTime != int.MIN_VALUE && acp.endTime != acp.startTime) {
					return teDuration.getTimeAsObject((acp.endTime - acp.startTime) / 1000);
				}
				else {
					return teDuration.getTimeAsObject(4);
				}
			}
			
			
			/**
			 * return the correct string to show in the ad provider text field,
			 * i.e. nothing for vast, or the tags string for "other".
			 * */
			private function getAdProviderText(acp:KalturaAdCuePoint):String {
				if (!acp || acp.protocolType == KalturaAdProtocolType.VAST) {
					return '';
				}
				else if (acp.protocolType == KalturaAdProtocolType.CUSTOM) {
					if (acp.tags) {
						return acp.tags;
					}
					else {
						return resourceManager.getString('drilldown', 'ads_default_provider');
					}
				}
				return resourceManager.getString('drilldown', 'ads_default_provider');
			}
			
			
			/**
			 * get the object in PROVIDERS that represents the tags of the given CP
			 * @param cp
			 * */
			private function getAdProvider(cp:KalturaAdCuePoint):Object {
				var value:String;
				if (cp.protocolType == KalturaAdProtocolType.VAST) {
					value = "vast"
				}
				else if (cp.protocolType == KalturaAdProtocolType.CUSTOM) {
					value = "other";
				}
				
				for (var i:int = 0; i < PROVIDERS.length; i++) {
					if (PROVIDERS[i].value == value) {
						return PROVIDERS[i];
					}
				}
				// the last object is the "Other"
				return PROVIDERS[PROVIDERS.length - 1];
			}
			
			
			/**
			 * get the object in AD_TYPES that represents the adType of the given CP
			 * @param cp
			 * */
			private function getAdType(cp:KalturaAdCuePoint):int {
				for (var i:int = 0; i < AD_TYPES.length; i++) {
					if (AD_TYPES[i].value == cp.adType) {
						return i;
					}
				}
				return -1;
			}
			
			
			
			private function removeAllCuePoints(event:MouseEvent):void {
				if (_kClipReady) {
					_kClip["removeAll"]();
				}
			}
			
			
			
			
			// =====================================================================
			// BULK RELATED STUFF
			// =====================================================================
			
			/**
			 * adjust the dataprovider for file actions dropdown
			 * @param cuepoints count
			 * */
			private function adjustBulkActions(value:Object):void {
				// copy the array for the new entry
				var ar:Array = BULK_ACTIONS.concat();
				var i:int;
				if (value != null && value == 0) {
					// remove the download option
					for (i = 0; i<ar.length; i++) {
						if (ar[i].value == "ads_bulk_download") {
							ar.splice(i, 1);
							break;
						}
					}
				}
				if (!editable) {
					// remove the upload action
					for (i = 0; i<ar.length; i++) {
						if (ar[i].value == "ads_bulk_upload") {
							ar.splice(i, 1);
							break;
						}
					}
				}
				cbActions.dropdown.dataProvider = ar;
				cbActions.dataProvider = ar;
				cbActions.selectedIndex = -1;
				cbActions.enabled = true;
			}
			
			
			private function handleBulkActions(event:ListEvent):void {
				var action:String = (event.target as ComboBox).selectedItem.value;
				switch (action) {
					case 'ads_bulk_upload':
						_bulkUpldFileRef = new FileReference();
						_bulkUpldFileRef.addEventListener(Event.SELECT, addBulkUpload);
						_bulkUpldFileRef.browse(new Array(new FileFilter(resourceManager.getString('drilldown', 'files') + ' (' + XML_EXL + ')', XML_EXL)));
						break;
					case 'ads_bulk_download':
						var cg:CuePointEvent = new CuePointEvent(CuePointEvent.DOWNLOAD_CUEPOINTS);
						cg.data = _selectedEntry.id;
						controller.dispatch(cg);
						break;
					case 'ads_bulk_sample':
						// download samples file
						_bulkUpldFileRef = new FileReference();
						var req:URLRequest = new URLRequest(model.cuepointsSamplesUrl);
						_bulkUpldFileRef.download(req);
						break;
				}
				cbActions.selectedIndex = -1;
			}
			
			
			/**
			 * on buld file selected
			 * */
			private function addBulkUpload(event:Event):void {
				_bulkUpldFileRef.removeEventListener(Event.SELECT, addBulkUpload);
				var cg:CuePointEvent = new CuePointEvent(CuePointEvent.UPLOAD_CUEPOINTS);
				cg.data = _bulkUpldFileRef;
				controller.dispatch(cg);
			}
			
			
			/**
			 * after changing the CB dataprovider, fix dropdown size
			 * (Flex 3.5 bug)
			 * */
			private function cbActions_updateCompleteHandler(event:FlexEvent):void {
				if (cbActions.dropdown) {
					cbActions.dropdown.width = cbActions.width;
				}
			}
			
			// =====================================================================
			
			/**
			 * stop KDP whenever the user interacts with kclip
			 * */
			protected function kClipHolder_mouseDownHandler(event:MouseEvent):void {
				if (_kdp && _kdp.hasEventListener(KdpEventTypes.PLAYER_UPDATE_PLAYHEAD)) {
					_kdp["sendNotification"](KdpEventTypes.DO_PAUSE);
				}
			}
		]]>
	</mx:Script>
	<control:AdsTabController id="controller" />
	<mx:HBox width="100%">
		<mx:VBox width="100%" height="{kdpHolder.height}">
			<mx:HBox width="100%">
				<mx:ComboBox id="cbActions" width="100%" change="handleBulkActions(event)"
							 updateComplete="cbActions_updateCompleteHandler(event)"
							 prompt="{resourceManager.getString('drilldown', 'ads_bulk_actions')}" enabled="false"/>
				<mx:Spacer width="100%"/>
			</mx:HBox>
			<mx:Spacer height="10"/>
			<mx:HRule width="100%"/>
			<mx:Spacer height="10"/>
			<mx:Text htmlText="{resourceManager.getString('drilldown', 'ads_explain')}" width="100%" styleName="adsExplain"
					 visible="{!_formEnabled}" includeInLayout="{!_formEnabled}"/>
			<mx:VBox id="details" width="100%" visible="{_formEnabled}" includeInLayout="{_formEnabled}">
				<mx:HBox styleName="noPadding">
					<mx:Label text="{resourceManager.getString('drilldown', 'timing')}" styleName="formLabel"
							  width="{LABEL_WIDTH}"/>
					<controls:TimeStepper id="teTiming" enabled="{_formEnabled}" styleName="timeEntry"
										  maximum="{(_selectedEntry as KalturaMediaEntry).duration}"
										  timeValue="{teTiming.getTimeAsObject(_selectedCuePoint.startTime/1000)}"
										  showHours="true" showSeconds="true" showMiliseconds="true" is24Hour="true"
										  change="updateCuePointData(event)"/>
				</mx:HBox>
				<mx:HBox width="100%" styleName="noPadding">
					<mx:Label text="{resourceManager.getString('drilldown', 'ads_type')}" styleName="formLabel"
							  width="{LABEL_WIDTH}"/>
					<mx:ComboBox id="cbType" width="100%" enabled="{_formEnabled}" dataProvider="{AD_TYPES}"
								 prompt="{resourceManager.getString('drilldown', 'ads_ad_type')}"
								 change="updateCuePointData(event)"/>
					<mx:Spacer/>
					<mx:Label text="{resourceManager.getString('drilldown', 'durationLabel')}" styleName="formLabel"
							  enabled="{teDuration.enabled}"/>
					<controls:TimeStepper id="teDuration" enabled="{_formEnabled &amp;&amp; cbType.selectedIndex == 1}"
										  showHours="true" showMiliseconds="true" showSeconds="true" is24Hour="true"
										  timeValue="{getDuration(_selectedCuePoint)}"
										  change="updateCuePointData(event)" styleName="timeEntry"/>
				</mx:HBox>
				<mx:HBox width="100%" styleName="noPadding">
					<mx:Label text="{resourceManager.getString('drilldown', 'ads_provider')}" styleName="formLabel"
							  width="{LABEL_WIDTH}"/>
					<mx:VBox width="100%" styleName="noPadding">
						<mx:ComboBox id="cbProvider" enabled="{_formEnabled &amp;&amp; isNewCuepoint(_selectedCuePoint)}" dataProvider="{PROVIDERS}"
									 change="updateCuePointData(event)"/>
						<controls:DefaultLabelTextArea id="tiProvider" width="100%" height="{tiUrl.height}"
													   defaultLabel="{resourceManager.getString('drilldown', 'ads_default_provider')}"
													   enabled="{cbProvider.selectedItem.value == 'other'}"
													   defaultLabelStyleName="textAreaDefaultLabel"
													   change="updateCuePointData(event)"/>
					</mx:VBox>
				</mx:HBox>
				<mx:HBox width="100%" styleName="noPadding">
					<mx:Label text="{resourceManager.getString('drilldown', 'ads_url')}" styleName="formLabel"
							  width="{LABEL_WIDTH}"/>
					<mx:TextInput id="tiUrl" width="100%" text="{_selectedCuePoint.sourceUrl}"
								  change="updateCuePointData(event)" styleName="drilldownInput"/>
				</mx:HBox>
				<mx:HBox width="100%" styleName="noPadding">
					<mx:Label text="{resourceManager.getString('drilldown', 'ads_name')}" styleName="formLabel"
							  width="{LABEL_WIDTH}"/>
					<mx:TextInput id="tiName" width="100%" enabled="{_formEnabled}" text="{_selectedCuePoint.title}"
								  change="updateCuePointData(event)" styleName="drilldownInput"/>
				</mx:HBox>
			</mx:VBox>
		</mx:VBox>
		<mx:HBox id="kdpHolder" width="300" height="255" tabChildren="false" tabEnabled="false"/>
	</mx:HBox>
	<mx:HBox id="kClipHolder" width="754" height="120" mouseDown="kClipHolder_mouseDownHandler(event)"/>
	<mx:HBox width="100%">
		<mx:Spacer width="100%"/>
		<mx:LinkButton label="{resourceManager.getString('drilldown', 'ads_remove_all')}" click="removeAllCuePoints(event)"
					   visible="{_counter > 0 &amp;&amp; editable}"
					   includeInLayout="{_counter > 0  &amp;&amp; editable}"/>
	</mx:HBox>

</mx:Module>
