<?xml version="1.0" encoding="utf-8"?>
<!---
scheduling tab of EntryDetailsWin.
also used in SetSchedulingWin.
-->
<mx:Module layout="vertical" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" styleName="schedulingVbox"
		   xmlns:controls="com.kaltura.controls.*" implements="com.kaltura.edw.business.IDrilldownPanel"
		   label="{resourceManager.getString('drilldown', 'scheduling')}">
	<mx:Metadata>
		[Event(name="validationComplete", type="com.kaltura.edw.events.ValidationResultEvent")] 
		[Event(name="panelDataSaved", type="com.kaltura.edw.events.InternalKedEvent")] 
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import com.kaltura.KalturaClient;
			import com.kaltura.edw.business.IDrilldownPanel;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.constants.PanelConsts;
			import com.kaltura.edw.events.InternalKedEvent;
			import com.kaltura.edw.events.ValidationResultEvent;
			import com.kaltura.kmvc.model.IDataPackRepository;
			import com.kaltura.utils.DateFieldWithTimeStepperLogic;
			import com.kaltura.utils.KUtils;
			import com.kaltura.vo.KalturaBaseEntry;
			
			
			[Bindable]
			/**
			 * roles and permissions way of disabling
			 * things that are already bound to app logic
			 * */
			public var editable:Boolean = true;
			
			
			private var _timeManager:DateFieldWithTimeStepperLogic;
			
			
			private var _selectedEntry:KalturaBaseEntry;
			private var _dpModel:IDataPackRepository;
			
			public function get selectedEntry():KalturaBaseEntry {
				return _selectedEntry;
			}
			public function set selectedEntry(selectedEntry:KalturaBaseEntry):void {
				_selectedEntry = selectedEntry;
			}
			
			public function get dataPackModel():IDataPackRepository{
				return _dpModel;
			}
			public function set dataPackModel(value:IDataPackRepository):void{
				_dpModel = value;
			}
			
			public function get helpAnchor():String{
				return "entry_scheduling";
			}
			
			/**
			 * see all data on the panel is legal and save data
			 * @return an object with error code
			 * */
			public function validate():void {
				var success:Boolean = true;	// validation result
				var errorMessage:String;
				var errorTitle:String;
				
				if (isInit()) {
					
					if (spcificRangeRBtn.selected && sepcificStartDate.selectedDate == null) {
						success = false;
						errorMessage = resourceManager.getString('drilldown', 'scedualingStartDateError'); 
						errorTitle = resourceManager.getString('drilldown', 'scedualingErrorTitle');
					}
					else if (specificEndCBBtn.selected && specificEndDate.selectedDate == null) {
						success = false;
						errorMessage = resourceManager.getString('drilldown', 'scedualingEndDateError'); 
						errorTitle = resourceManager.getString('drilldown', 'scedualingErrorTitle');
					}
				}
				// if the panel didn't init no data was changed and therefore is legal. hopefully.
				var e:ValidationResultEvent = new ValidationResultEvent(ValidationResultEvent.VALIDATION_COMPLETE, success, errorMessage, errorTitle);
				dispatchEvent(e);
			}
			
			
			
			/**
			 * @internal
			 * date update matrix :
			 * 		
			 * 						| value > 0				| value = -1 (no value)					
			 * -------------------------------------------------------------------------------------
			 * entry.date > 0		| entry.date = value	| entry.date = Client.NULL_INT (remove existing)
			 * -------------------------------------------------------------------------------------
			 * entry.date = MINVAL	| entry.date = value	| entry.date = int.MIN_VALUE (don't send)
			 * -------------------------------------------------------------------------------------
			 * */
			public function save():void {
				var startTime:int = getStartTime();
				var endTime:int = getEndTime();
				
				if (_selectedEntry.startDate > 0) {
					_selectedEntry.startDate = (startTime > 0) ? startTime : KalturaClient.NULL_INT;
				}
				else if (startTime > 0) {
					// was not set before and is set now
					_selectedEntry.startDate =  startTime;
				}
				
				if (_selectedEntry.endDate > 0) {
					_selectedEntry.endDate = (endTime > 0) ? endTime : KalturaClient.NULL_INT;
				}
				else if (endTime > 0) {
					// was not set before and is set now
					_selectedEntry.endDate =  endTime;
				}
				dispatchEvent(new InternalKedEvent(InternalKedEvent.PANEL_DATA_SAVED));
			}
			
			
			/**
			 * @inheritDoc
			 *
			 * @internal
			 * this panel doesn't require any special destructors, so the implementation is empty
			 * */
			public function destroy():void {
				
			}
			
			
			public function clear():void {
				
			}
			
			/**
			 * @inheritDoc
			 *
			 * */
			public function initData():void {
				setSchedulerData();
			}
			
			
			public function init():void {
				_timeManager = new DateFieldWithTimeStepperLogic(sepcificStartDate, specificEndDate, sepcificStartHour, specificEndHour);
				
				
				PermissionManager.getInstance().applyAllAttributes(this, PanelConsts.SCHEDULING_PANEL);
			}
			
			
			
			private function isInit():Boolean {
				return (spcificRangeRBtn != null);
			}
			
			
			/**
			 * retrieves the selected start time
			 * @return start time in seconds, or -1 if no start time was selected
			 * 
			 * @internal used DYNAMICALLY by SetSchedulingWinn
			 * */
			public function getStartTime():int {
				var res:int;
				if (anyTimeRBtn.selected || sepcificStartDate.selectedDate == null) {
					res = -1;
				} else {
					res = getTimeInSeconds(sepcificStartDate, sepcificStartHour);
				}
				return res;
			}
			
			/**
			 * retrieves the selected end time
			 * @return end time in seconds, or -1 if no end time was selected
			 * 
			 * @internal used DYNAMICALLY by SetSchedulingWinn
			 * */
			public function getEndTime():int {
				var res:int;
				if (anyTimeRBtn.selected || !specificEndCBBtn.selected || specificEndDate.selectedDate == null) {
					res = -1;
				}
				else {
					res = getTimeInSeconds(specificEndDate, specificEndHour);
				}
				return res;
			}
			
			
			/**
			 * return true if dates were changed
			 * */
			public function isChanged():Boolean {
				var result:Boolean = false;
				var startTime:int = getStartTime();
				var endTime:int = getEndTime();
				
				if (_selectedEntry.startDate > 0) {
					if (startTime != _selectedEntry.startDate) {
						result = true;
					}
				}
				else if (startTime >= 0) {
					result = true;
				}
				
				if (_selectedEntry.endDate > 0) {
					if (endTime != _selectedEntry.endDate) {
						result = true;
					}
				}
				else if (endTime >= 0) {
					result = true;
				}
				return result;
				
			}
			
			
			private function setSchedulerData():void {
				if (_selectedEntry != null) {
					var startTime:int = _selectedEntry.startDate;
					var endTime:int = _selectedEntry.endDate;
					
					if (((startTime == -1) || (startTime == int.MIN_VALUE)) && ((endTime == -1) || (endTime == int.MIN_VALUE))) {
						anyTimeRBtn.selected = true;
						clearDates();
					}
					else {
						spcificRangeRBtn.selected = true;
						specificEndCBBtn.selected = (endTime != int.MIN_VALUE) && (endTime != -1);
						
						if ((startTime != int.MIN_VALUE) && (startTime != -1)) {
							var startDate:Date = new Date(startTime * 1000);
							sepcificStartDate.selectedDate = startDate;
							_timeManager.setTime(sepcificStartHour, startDate.hours, startDate.minutes);
						}
						else {
							// else clear values 
							sepcificStartDate.selectedDate = null;
							setTime(sepcificStartHour, 0, 0);
						}
						
						if ((endTime != int.MIN_VALUE) && (endTime != -1)) {
							var endDate:Date = new Date(endTime * 1000);
							specificEndDate.selectedDate = endDate;
							_timeManager.setTime(specificEndHour, endDate.hours, endDate.minutes);
						}
						else {
							// else clear values 
							specificEndDate.selectedDate = null;
							setTime(specificEndHour, 0, 0);
						}
					}
				}
			}
			
			
			private function setTime(timeEntry:SM_TimeEntry, hours:int, minutes:int):void {
				timeEntry.minute = minutes;
				timeEntry.am_pm = hours >= 12 ? 'pm' : 'am'
				timeEntry.hour = hours % 12;
				if (timeEntry.hour == 0) {
					timeEntry.hour = 12;
				}
			}
			
			
//			private function onGridCreationComplete(event:Event):void {
//				var today:Date = new Date();
//				sepcificStartDate.disabledRanges = [{rangeEnd: new Date(today.fullYear, today.month, today.date - 1)}];
//				specificEndDate.disabledRanges = [{rangeEnd: new Date(today.fullYear, today.month, today.date - 1)}];
//			}
			
			private var oldStartDate:Date = null;
			private var oldEndDate:Date = null;
			
			
			private function validateTimes():void {
				_timeManager.validateTimes();
			}
			
			
			private function getTimeInSeconds(dateField:DateField, timeEntry:SM_TimeEntry):int {
				var seconds:int = 0;
				seconds += dateField.selectedDate.time / 1000;
				seconds += _timeManager.calculateTime(timeEntry.timeValue, timeEntry.am_pm);
				return seconds;
			}
			
			
			
			
			private function clearDates():void {
				sepcificStartDate.selectedDate = null;
				setTime(sepcificStartHour, 0, 0);
				specificEndDate.selectedDate = null;
				setTime(specificEndHour, 0, 0);
				specificEndCBBtn.selected = false;
			}
			
			
			private function setTimeZoneLabel():void {
				var now:Date = new Date();
				var zoneTimeOffset:int = (now.getTimezoneOffset() / 60) * (-1);
				var ztStr:String = (zoneTimeOffset == 0) ? '' : (zoneTimeOffset > 0) ? ('+' + zoneTimeOffset) : zoneTimeOffset + '';
				timeZoneLabel.text = resourceManager.getString('drilldown', 'timeOffsetLabel').replace("(NUM)", ztStr);
			}
			
			
			
			
			
			private function timeGroup_changeHandler(event:Event):void {
				if (anyTimeRBtn.selected) {
					specificEndCBBtn.selected = false;
				}
				else {
					validateTimes()
				}
			}
		]]>
	</mx:Script>
	<mx:VBox id="topContainer" width="100%" height="100%">
		<mx:RadioButtonGroup id='timeGroup' change="timeGroup_changeHandler(event)"/>
		<mx:RadioButton label="{resourceManager.getString('drilldown', 'ANY_TIME')}" groupName="timeGroup"
						id="anyTimeRBtn" selected="true"/>
		<mx:RadioButton label="{resourceManager.getString('drilldown', 'rangeRadioBtn')}" groupName="timeGroup"
						id="spcificRangeRBtn"/>
		<mx:VBox width="100%">
			<mx:Grid verticalGap="10" >
				<mx:GridRow width="100%" height="30">
					<mx:GridItem width="100%" height="100%" colSpan="4" horizontalAlign="center">
						<mx:Label width="100%" id='timeZoneLabel' enabled="{spcificRangeRBtn.selected}"
								  creationComplete="{setTimeZoneLabel()}"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="30">
					<mx:GridItem width="100%" height="100%">
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%" horizontalAlign="right" verticalAlign="middle">
						<mx:Label text="{resourceManager.getString('drilldown', 'startDateLabel')}"
								  enabled="{spcificRangeRBtn.selected}"/>
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
						<mx:DateField id='sepcificStartDate' showToday="true" width="120"
									  enabled="{KUtils.logicalAnd(editable, spcificRangeRBtn.selected)}"
									  change="validateTimes()"/>
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
						<controls:SM_TimeEntry height="25" showAMPMLabel="true" showHours="true" id="sepcificStartHour"
											   styleName="timeEntry"
											   enabled="{KUtils.logicalAnd(editable, spcificRangeRBtn.selected)}"
											   click="validateTimes()"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow width="100%" height="30">
					<mx:GridItem width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
						<mx:CheckBox id="specificEndCBBtn"
									 enabled="{KUtils.logicalAnd(editable, spcificRangeRBtn.selected)}"/>
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%" horizontalAlign="right" verticalAlign="middle">
						<mx:Label text="{resourceManager.getString('drilldown', 'endDateLabel')}"
								  enabled="{KUtils.logicalAnd(specificEndCBBtn.selected, spcificRangeRBtn.selected)}"/>
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
						<mx:DateField 
							enabled="{KUtils.logicalAnd(editable, KUtils.logicalAnd(specificEndCBBtn.selected, spcificRangeRBtn.selected))}"
							id='specificEndDate' width="120" change="validateTimes()"/>
					</mx:GridItem>
					<mx:GridItem width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
						<controls:SM_TimeEntry height="25" showAMPMLabel="true" showHours="true"
											   enabled="{KUtils.logicalAnd(editable, KUtils.logicalAnd(specificEndCBBtn.selected, spcificRangeRBtn.selected))}"
											   id='specificEndHour' styleName="timeEntry" click="validateTimes()"/>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
			<mx:LinkButton id='clearDatesBtn' label="{resourceManager.getString('drilldown', 'clearDates')}"
						   enabled="{spcificRangeRBtn.selected}" click="clearDates()" height="17"
						   styleName="clearDateButton"/>
		</mx:VBox>
	</mx:VBox>
</mx:Module>
