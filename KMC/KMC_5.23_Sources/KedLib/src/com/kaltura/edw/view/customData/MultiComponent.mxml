<?xml version="1.0" encoding="utf-8"?>
<!---
	A wrapper component that wraps together multiple MultiFieldComponents and adds an "add" button at the bottom.
	The component handles creation and layout of inner components.
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml">
	<mx:Script>
		<![CDATA[
			import com.kaltura.edw.business.base.FormBuilderBase;
			import com.kaltura.edw.model.MetadataDataObject;
			
			import mx.collections.ArrayCollection;
			import mx.core.Container;
			import mx.core.UIComponent;

			private var _childXML:XML;

			/**
			 * nested fields in children of type container
			 * */
			public var nestedFieldsArray:ArrayCollection = new ArrayCollection();

			public var formBuilder:FormBuilderBase;

			/**
			 * the bound object that listens to the inserted metadata
			 * */
			public var metadataObject:MetadataDataObject;



			/**
			 * create a MultiFieldComponent with the given child and add it to the MultiComponent
			 * */
			override public function addChild(child:DisplayObject):DisplayObject {
				if (child == linkButton)
					return super.addChild(child);

				var newField:MultiFieldComponent = new MultiFieldComponent();
				newField.addEventListener(MultiFieldComponent.REMOVE_CLICKED, removeItem);
				newField.addChildAt(child, 0);
				var index:int = 0;
				//always adds as the last child (beside the "add" button child)
				if (this.numChildren > 0) {
					if (this.getChildByName("linkButton"))
						index = this.numChildren - 1; //we want to add the child before the button
					else
						index = this.numChildren;
				}
				return addChildAt(newField, index);
			}


			/**
			 * remove the correct child as well as relevant metadata
			 * */
			override public function removeChild(child:DisplayObject):DisplayObject {
				if (child == linkButton)
					return super.removeChild(linkButton);
				//reset metadataData object, so the saved data will be erased
				if (child is Container)
					metadataObject[(child as Container).getChildAt(0).name] = new MetadataDataObject();
				else
					metadataObject[child.name] = new MetadataDataObject();

				return super.removeChild(child);
			}


			private function removeItem(e:Event):void {
				var child:MultiFieldComponent = e.target as MultiFieldComponent;
				if (child.parent == this) {
					removeChild(child);
				}
			}


			/**
			 * this function adds a nested component,
			 * it uses the _nestedComponentName in order to create the suitable uiComponent
			 * it binds the _metadataData property to the model
			 * */
			private function addComponent():void {
				if (!childXML)
					return;
				var newField:MultiFieldComponent = new MultiFieldComponent();
				newField.addEventListener(MultiFieldComponent.REMOVE_CLICKED, removeItem);
				var index:int = numChildren - 1;
				var newChildXML:XML = childXML.copy();
				newChildXML.@name = name + index;
				newChildXML.@parentName = name;
				resetAllXMLFields(newChildXML);

				var newComponent:UIComponent = formBuilder.buildComponent(newChildXML, metadataObject, nestedFieldsArray);
				newField.addChildAt(newComponent, 0);
				addChildAt(newField, index);
			}


			/**
			 * this function resets all metadata data attributes in the given XML
			 * */
			private function resetAllXMLFields(xml:XML):void {
				if (xml.children().length() > 0) {
					for each (var child:XML in xml.children()) {
						resetAllXMLFields(child);
					}
				}
				else
					resetMetadataData(xml);

			}


			/**
			 * reset the metadataData attribute in the given node
			 * */
			private function resetMetadataData(xml:XML):void {
				var propertyName:String = xml.@metadataData.toString();
				if (propertyName != "") {
					delete xml.@[propertyName];
				}
			}


			/**
			 * the XML that represents the uicomponent that will be added with
			 * every click on "add" button
			 * */
			public function get childXML():XML {
				return _childXML;
			}


			/**
			 * @private
			 * sets the XML that represents that uicomponent that will be added with every
			 * click on "add" button.
			 * also sets _metadataProperty from the given XML, or _metadataPropertyArray in case of nested fields inside the childXML
			 * */
			public function set childXML(value:XML):void {
				_childXML = value;
			}
		]]>
	</mx:Script>
	<mx:LinkButton id="linkButton" label="{resourceManager.getString('drilldown','MultiAdd')}" click="{addComponent()}"
				   styleName="multiComponentAddButton"/>
</mx:VBox>
