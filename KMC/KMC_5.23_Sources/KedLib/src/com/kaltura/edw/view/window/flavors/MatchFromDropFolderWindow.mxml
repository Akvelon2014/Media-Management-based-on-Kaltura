<?xml version="1.0" encoding="utf-8"?>
<containers:HelpTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:containers="com.kaltura.containers.*"
							layout="vertical" width="550" height="528" showCloseButton="true"
							close="closeHandler(event)" showHelpButton="true" help="helpHandler(event)" visible="false"
							creationComplete="creationCompleteHandler(event)">
	<mx:Script>
		<![CDATA[
			import com.kaltura.KalturaClient;
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.control.events.DropFolderEvent;
			import com.kaltura.edw.control.events.DropFolderFileEvent;
			import com.kaltura.edw.control.events.KedEntryEvent;
			import com.kaltura.edw.control.events.MediaEvent;
			import com.kaltura.edw.events.GeneralNonCairngormEvent;
			import com.kaltura.edw.model.datapacks.EntryDataPack;
			import com.kaltura.edw.view.EntryDetailsWin;
			import com.kaltura.edw.vo.ConversionProfileWithFlavorParamsVo;
			import com.kaltura.kmvc.control.KMvCController;
			import com.kaltura.kmvc.control.KMvCEvent;
			import com.kaltura.kmvc.model.KMvCModel;
			import com.kaltura.types.KalturaDropFolderFileStatus;
			import com.kaltura.types.KalturaEntryStatus;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.vo.KalturaAssetParamsResourceContainer;
			import com.kaltura.vo.KalturaAssetsParamsResourceContainers;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaConversionProfileAssetParams;
			import com.kaltura.vo.KalturaDropFolder;
			import com.kaltura.vo.KalturaDropFolderFile;
			import com.kaltura.vo.KalturaDropFolderFileResource;
			import com.kaltura.vo.KalturaMediaEntry;
			
			import mx.collections.ArrayCollection;
			import mx.collections.HierarchicalData;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.resources.IResourceManager;
			import mx.resources.ResourceManager;


			/*
			   Events
			 */
			public static const CLOSE_WINDOW:String = "closeWindow";


			/**
			 * window state - handling a single flavour
			 * */
			private static const SINGLE_FLAVOUR:String = "single_flavour";

			/**
			 * window state - handling all entry's flavours.
			 * */
			private static const MULTI_FLAVOUR:String = "multi_flavour";

			/**
			 * application controller
			 * */
			public var controller:KMvCController;
			
			/**
			 * conversion profiles with matching asset params (cpaps)
			 * */
			public var conversionProfiles:ArrayCollection;

			/**
			 * for roles and permissions, when user doesn't have
			 * CONTENT_INGEST_REFERENCE_MODIFY this is set to false.
			 * */
			public var allowSetRefid:Boolean = true;

			/**
			 * @copy #flavorAssetId
			 * */
			private var _flavorAssetId:String;

			/**
			 * @copy #flavorParamsId
			 * */
			private var _flavorParamsId:int = int.MIN_VALUE;

			[Bindable]
			/**
			 * current window state (single_flavour / multi_flavour)
			 * */
			private var _windowState:String = MULTI_FLAVOUR;

			/**
			 * @copy #entry
			 * */
			private var _entry:KalturaBaseEntry;

			private var _folders:ArrayCollection;

			/**
			 * currently selected drop folder
			 * */
			private var _selectedFolder:KalturaDropFolder;


			[Bindable]
			/**
			 * the hierarchicalData displayed in the datagrid
			 * */
			private var _filesHierarchy:HierarchicalData;

			/**
			 * files data, used as source for the DG's dataprovider
			 * */
			private var _files:ArrayCollection;


			/**
			 * for slug based folder, the slug currently selected.
			 * for simple folders, the selected file.
			 * */
			private var _selectedSlug:KalturaDropFolderFile;


			/**
			 * true if entry drilldown data need to be refreshed after the window is closed.
			 * */
			public var isEntryRefreshRequired:Boolean = false;


			protected function creationCompleteHandler(event:FlexEvent):void {
				addEventListener(Event.CHANGE, onRadioChange, false, 0, true);
				// assuming any flavour data was passed before the popup was
				// added to the display list, this is a good time to set appearance
				setAppearance(_windowState == MULTI_FLAVOUR);
				if (_folders && _folders.length > 0) {
					var fl:KalturaDropFolder = _folders.getItemAt(0) as KalturaDropFolder;
					cbFolders.selectedItem = fl;
					cbFolders.dispatchEvent(new ListEvent(ListEvent.CHANGE));
				}
				PermissionManager.getInstance().applyAllAttributes(this, "matchFromDropWin");
			}


			/**
			 * mark the relevant VO as selected
			 * */
			private function onRadioChange(e:Event):void {
				e.stopPropagation();
				// set all buttons to false
				for each (var vo:KalturaDropFolderFile in _files) {
					vo.imSelected = false;
				}
				// set the last clicked to true
				e.target.data.imSelected = true;
				// save needed values
				_selectedSlug = e.target.data as KalturaDropFolderFile;
				_entry.referenceId = _selectedSlug.parsedSlug;
				// enable / disable action buttons according to slug status
				updateBtn.enabled = _selectedSlug.status != KalturaDropFolderFileStatus.WAITING && allowSetRefid; // and permission
				submitBtn.enabled = _selectedSlug.status == KalturaDropFolderFileStatus.WAITING || _windowState == SINGLE_FLAVOUR;
			}


			/**
			 * for first level (has files list) returns slug name + number of files in the sub-group.
			 * for second level returns file name.
			 * @param item		IR's data, KalturaDropFolderFile object
			 * @param column	the column in which to display the data
			 * @return	text to show
			 * */
			private function slugNameLabel(item:Object, column:AdvancedDataGridColumn):String {
				var s:String;
				// if is group
				if (item.files) {
					s = item.parsedSlug + " (" + item.files.length;
					if (item.status == KalturaDropFolderFileStatus.WAITING) {
						s += ", " + ResourceManager.getInstance().getString('cms', 'fileWaiting');
					}
					s += ")";
				}
				else {
					s = item.fileName;
				}
				return s;
			}


			/**
			 * issue a request to search drop folder
			 * */
			protected function btnSearch_clickHandler():void {
				if (btnSearch.selected) {
					// should clean search
					searchText.text = '';
					btnSearch.selected = false;
				}
				else {
					// should search for text
					if (searchText.text) {
						btnSearch.selected = true;
					}
					else {
						btnSearch.selected = false;
					}
				}
				// issue request:
				listFolderContents();
			}


			/**
			 * show "X" icon on search button
			 * */
			protected function searchText_changeHandler(event:Event):void {
				if (btnSearch.selected) {
					btnSearch.selected = false;
				}
			}



			/**
			 * set the selected referenceId to the selelcted entry
			 * */
			protected function updateHandler(event:MouseEvent):void {
				/* this is the ugliest line in the world, and it will handle the case that
				 * a reference id was saved from this window but the user discarded changes
				 * in the main drilldown window, and ended up with a "wrong" value for this
				 * field on the object in the entries list because it was not refreshed.
				 */
				var modelSelectedEntry:KalturaBaseEntry = (KMvCModel.getInstance().getDataPack(EntryDataPack) as EntryDataPack).selectedEntry;
				modelSelectedEntry.referenceId = _selectedSlug.parsedSlug;
				var ee:KedEntryEvent = new KedEntryEvent(KedEntryEvent.UPDATE_SINGLE_ENTRY, _entry);
				controller.dispatch(ee);
				Alert.show(ResourceManager.getInstance().getString('cms', 'setRefidNotification'));
				closeHandler(null);
			}


			/**
			 * update media with KalturaDropFolderFileResource-s
			 * */
			protected function submitHandler(event:MouseEvent):void {

				if (!_selectedSlug) {
					Alert.show(ResourceManager.getInstance().getString('cms', 'noSelectedFile'));
				}
				else {
					confirmAddFiles(_windowState == SINGLE_FLAVOUR);
					closeHandler(null);
				}
			}



			/**
			 * add or replace a single flavour
			 * +*/
			protected function updateSingleFile(e:CloseEvent):void {
				if (e.detail == Alert.YES) {
					isEntryRefreshRequired = true
					if (_flavorAssetId) {
						// replacing existing flavor
						updateFlavor();
					}
					else if (_flavorParamsId != int.MIN_VALUE) {
						// adding new flavor
						addFlavor();
					}
					else {
						// never supposed to get here
						trace("Error #720: window state is single but flavour data is missing.");
					}
				}
			}


			/**
			 * replace a flavor
			 * */
			protected function updateFlavor():void {
				var resource:KalturaDropFolderFileResource = new KalturaDropFolderFileResource();
				resource.dropFolderFileId = _selectedSlug.id;
				var dffe:MediaEvent = new MediaEvent(MediaEvent.UPDATE_SINGLE_FLAVOR, _entry as KalturaMediaEntry);
				dffe.data = {flavorAssetId: flavorAssetId, resource: resource};
				controller.dispatch(dffe);
			}


			/**
			 * add new flavor
			 * */
			protected function addFlavor():void {
				var resource:KalturaDropFolderFileResource = new KalturaDropFolderFileResource();
				resource.dropFolderFileId = _selectedSlug.id;
				var dffe:MediaEvent = new MediaEvent(MediaEvent.ADD_SINGLE_FLAVOR, _entry as KalturaMediaEntry);
				dffe.data = {flavorParamsId: flavorParamsId, resource: resource};
				controller.dispatch(dffe);
			}


			/**
			 * show confirmation request
			 * */
			protected function confirmAddFiles(isSingle:Boolean):void {
				if (isSingle) {
					Alert.show(ResourceManager.getInstance().getString('cms', 'addFilesConfirm'), '', Alert.YES | Alert.NO, null, updateSingleFile);
				}
				else {
					Alert.show(ResourceManager.getInstance().getString('cms', 'addFilesConfirm'), '', Alert.YES | Alert.NO, null, updateMediaFiles);
				}
			}


			/**
			 * get asset param id by flavour system name and conversion profile id
			 * */
			protected function getAssetParamsId(convProfId:int, flavorName:String):int {
				for each (var cp:ConversionProfileWithFlavorParamsVo in conversionProfiles) {
					if (cp.profile.id == convProfId) {
						for each (var cpap:KalturaConversionProfileAssetParams in cp.flavors) {
							if (cpap.systemName == flavorName) {
								return cpap.assetParamsId;
							}
						}
						break;
					}
				}
				return -1;
			}


			/**
			 * if user confirmed, add selected files to the entry
			 * @param e		alert closing event holding user's response
			 */
			protected function updateMediaFiles(e:CloseEvent):void {
				if (e.detail == Alert.YES) {
					isEntryRefreshRequired = true;
					// the actual resource we send is a list of the containers for the resources we want to replace.                
					var mediaResource:KalturaAssetsParamsResourceContainers = new KalturaAssetsParamsResourceContainers();
					mediaResource.resources = new Array();

					// select the file as source for transcoding

					for each (var dff:KalturaDropFolderFile in _selectedSlug.files) {
						// the first resource of the flavor we want to replace
						var subSubResource:KalturaDropFolderFileResource = new KalturaDropFolderFileResource();
						subSubResource.dropFolderFileId = dff.id;

						// container for the resource we want to replace
						var subResource:KalturaAssetParamsResourceContainer = new KalturaAssetParamsResourceContainer();
						subResource.resource = subSubResource;
						//NOTE if matching failed, this has no value (but then we shouldn't be able to select this group)
						subResource.assetParamsId = getAssetParamsId(_selectedFolder.conversionProfileId, dff.parsedFlavor);

						// add to list
						mediaResource.resources.push(subResource);

					}
					// dispatch the event with required data
					var ce:MediaEvent = new MediaEvent(MediaEvent.UPDATE_MEDIA, _entry as KalturaMediaEntry);
					ce.data = {conversionProfileId: _selectedFolder.conversionProfileId, resource: mediaResource};
					controller.dispatch(ce);
				}
			}




			/**
			 * close popup
			 * */
			protected function closeHandler(event:CloseEvent):void {
				if (event) {
					event.stopImmediatePropagation();
				}
				// reset the selected folder
				var cg:KMvCEvent = new DropFolderEvent(DropFolderEvent.SET_SELECTED_FOLDER, null);
				controller.dispatch(cg);
				// reset files list
				cg = new DropFolderFileEvent(DropFolderFileEvent.RESET_DROP_FOLDERS_AND_FILES);
				controller.dispatch(cg);
				// remove popup 
				dispatchEvent(new Event(CLOSE_WINDOW));
			}


			/**
			 * open help with correct anchore
			 * */
			protected function helpHandler(event:Event):void {
				var e:GeneralNonCairngormEvent = new GeneralNonCairngormEvent(EntryDetailsWin.HELP_REQUEST, true);
				e.data = 'section_flavor_dropfolder';
				dispatchEvent(e);
			}


			/**
			 * refresh files list according to search string
			 * */
			protected function listFolderContents(event:MouseEvent = null):void {
				var txt:String = searchText.text;
				// search with or without slug
				var ce:KMvCEvent;
				if (_windowState == SINGLE_FLAVOUR) {
					ce = new DropFolderFileEvent(DropFolderFileEvent.LIST_BY_SELECTED_FOLDER_FLAT, _entry, txt ? txt : null);
				}
				else {
					ce = new DropFolderFileEvent(DropFolderFileEvent.LIST_BY_SELECTED_FOLDER_HIERCH, _entry, txt ? txt : null);
				}
				controller.dispatch(ce);
			}


			/**
			 * set window appearance and list folder contents
			 * */
			protected function folderChangeHandler(event:ListEvent):void {
				// select the folder
				_selectedFolder = event.target.selectedItem as KalturaDropFolder;
				var ce:KMvCEvent = new DropFolderEvent(DropFolderEvent.SET_SELECTED_FOLDER, _selectedFolder);
				controller.dispatch(ce);

				// list new folder contents
				listFolderContents();
			}


			/**
			 * set window texts and appearance by folder config
			 * @param isSlug	is the folder configured for slug matching
			 * */
			protected function setAppearance(showGrouped:Boolean):void {
				if (showGrouped) {
					// header
					headerLbl.htmlText = ResourceManager.getInstance().getString('cms', 'hdrLblSlug');
					// instructions
					instructionsTxt.htmlText = ResourceManager.getInstance().getString('cms', 'instrLblSlug');
					// submit
					submitBtn.label = ResourceManager.getInstance().getString('cms', 'addFilesActionLabel');

					slug.headerText = ResourceManager.getInstance().getString('cms', 'groupNameHeader');
				}
				else {
					// header
					headerLbl.htmlText = ResourceManager.getInstance().getString('cms', 'hdrLblNoSlug');
					// instructions
					instructionsTxt.htmlText = ResourceManager.getInstance().getString('cms', 'instrLblNoSlug');
					// submit
					submitBtn.label = ResourceManager.getInstance().getString('cms', 'addFileActionLabel');

					slug.headerText = ResourceManager.getInstance().getString('cms', 'fileNameHeader');
				}
				// reference id field
				refidHdrLbl.visible = refidHdrLbl.includeInLayout = showGrouped;
				refidLbl.visible = refidLbl.includeInLayout = showGrouped;
			}


			/**
			 * if deleting refid, show an empty string.
			 * */
			protected function getRefIdText(entry:KalturaBaseEntry):String {
				if (entry.referenceId != KalturaClient.NULL_STRING) {
					return entry.referenceId;
				}
				else
					return '';
			}


			[Bindable]
			/**
			 * drop folder files list.
			 * elements of type KalturaDropFolderFile
			 * */
			public function get files():ArrayCollection {
				return _files;
			}


			/**
			 * @private
			 * */
			public function set files(value:ArrayCollection):void {
				_files = value;
				_filesHierarchy = new HierarchicalData(_files);
				_filesHierarchy.childrenField = "files";
				adg.dataProvider = _filesHierarchy;
			}


			[Bindable]
			/**
			 * the entry being edited
			 * */
			public function get entry():KalturaBaseEntry {
				return _entry;
			}


			/**
			 * @private
			 * */
			public function set entry(value:KalturaBaseEntry):void {
				_entry = value;
				var mediaType:String = '';
				if ((value as KalturaMediaEntry).mediaType == KalturaMediaType.AUDIO) {
					mediaType = ResourceManager.getInstance().getString('cms', 'audio');
				} else if ((value as KalturaMediaEntry).mediaType == KalturaMediaType.VIDEO){
					mediaType = ResourceManager.getInstance().getString('cms', 'video');
				}
				if (value.status == KalturaEntryStatus.NO_CONTENT) {
					title = ResourceManager.getInstance().getString('cms', 'windowTitleAdd', [mediaType]);
				}
				else {
					title = ResourceManager.getInstance().getString('cms', 'windowTitleUpdate', [mediaType]);
				}
			}


			/**
			 * When replacing an existing asset, the id of the asset being replaced.
			 * */
			public function get flavorAssetId():String {
				return _flavorAssetId;
			}


			/**
			 * @private
			 */
			public function set flavorAssetId(value:String):void {
				_flavorAssetId = value;
				_windowState = SINGLE_FLAVOUR;
			}


			/**
			 * when creating a new flavor asset, the id of the flavorparams to use.
			 * */
			public function get flavorParamsId():int {
				return _flavorParamsId;
			}


			/**
			 * @private
			 */
			public function set flavorParamsId(value:int):void {
				_flavorParamsId = value;
				_windowState = SINGLE_FLAVOUR;
			}


			[Bindable]
			/**
			 * list of drop folders for this partner
			 * */
			public function get folders():ArrayCollection {
				return _folders;
			}


			/**
			 * @private
			 */
			public function set folders(value:ArrayCollection):void {
				if (_folders == value)
					return;
				_folders = value;

				if (value) {
					if (value.length > 0) {
						// got drop folders, show window
						visible = true;
						if (cbFolders) {
							// if DP is set via binding, we can't set selectedItem here.
							cbFolders.dataProvider = value;
							var fl:KalturaDropFolder = _folders.getItemAt(0) as KalturaDropFolder;
							cbFolders.selectedItem = fl;
							cbFolders.dispatchEvent(new ListEvent(ListEvent.CHANGE));
						}
					}
					else {
						// no drop folders, alert user and close popup
						var rm:IResourceManager = ResourceManager.getInstance();
						Alert.show(rm.getString('cms', 'noDropFolders'));
						closeHandler(null);
					}
				}
			}
		]]>
	</mx:Script>

	<mx:HBox width="100%">
		<mx:Label id="headerLbl" styleName="simpleBoldText"/>
		<mx:ComboBox id="cbFolders" labelField="name" change="folderChangeHandler(event)" width="100%"/>
	</mx:HBox>
	<mx:Text id="instructionsTxt" width="100%" styleName="simpleText"/>
	<mx:HBox width="100%">
		<mx:Label text="{ResourceManager.getInstance().getString('cms', 'searchLbl')}:" styleName="simpleBoldText"/>
		<mx:HBox horizontalGap="0">
			<mx:TextInput id="searchText" width="250" styleName="searchTextInput" enter="btnSearch_clickHandler()"
						  change="searchText_changeHandler(event)"/>
			<mx:Button id="btnSearch" styleName="searchButton" click="btnSearch_clickHandler()"
					   buttonMode="{btnSearch.enabled}"/>
		</mx:HBox>
	</mx:HBox>
	<mx:AdvancedDataGrid id="adg" width="100%" height="100%" displayItemsExpanded="false" sortExpertMode="true"
						 treeColumn="{slug}" draggableColumns="false" styleName="tableHeaderAlignLeft">
		<mx:columns>
			<mx:AdvancedDataGridColumn width="30" editable="true"
									   itemRenderer="com.kaltura.edw.view.window.flavors.ir.SelectedRenderer"/>
			<mx:AdvancedDataGridColumn headerText="{ResourceManager.getInstance().getString('cms', 'fileNameHeader')}"
									   labelFunction="slugNameLabel" id="slug" dataField="parsedSlug"/>
			<mx:AdvancedDataGridColumn dataField="createdAt"
									   headerText="{ResourceManager.getInstance().getString('cms', 'createAt')}"
									   itemRenderer="com.kaltura.edw.view.window.flavors.ir.DateRenderer"/>
		</mx:columns>
		<mx:rendererProviders>
			<mx:AdvancedDataGridRendererProvider columnIndex="0" columnSpan="1" depth="2"
												 renderer="com.kaltura.edw.view.window.flavors.ir.NoRadioRenderer"/>
		</mx:rendererProviders>
	</mx:AdvancedDataGrid>
	<mx:HBox width="100%">
		<mx:Label id="refidHdrLbl" text="{ResourceManager.getInstance().getString('cms', 'refid')}:"
				  styleName="simpleBoldText"/>
		<mx:Label id="refidLbl" styleName="simpleText" text="{getRefIdText(entry)}"/>
		<mx:Spacer width="100%"/>
		<mx:LinkButton label="{ResourceManager.getInstance().getString('cms', 'refreshDropFolder')}"
					   click="listFolderContents(event)" styleName="recycleIcon"/>
	</mx:HBox>
	<mx:ControlBar horizontalGap="10">
		<mx:Button id="updateBtn" click="updateHandler(event)" visible="{_windowState == MULTI_FLAVOUR}"
				   includeInLayout="{_windowState == MULTI_FLAVOUR}" enabled="false"
				   label="{ResourceManager.getInstance().getString('cms', 'updateRefIdActionLabel')}"/>
		<mx:Button id="submitBtn" click="submitHandler(event)" enabled="{_windowState == SINGLE_FLAVOUR}"
				   label="{ResourceManager.getInstance().getString('cms', 'addFilesActionLabel')}"/>
	</mx:ControlBar>
</containers:HelpTitleWindow>
