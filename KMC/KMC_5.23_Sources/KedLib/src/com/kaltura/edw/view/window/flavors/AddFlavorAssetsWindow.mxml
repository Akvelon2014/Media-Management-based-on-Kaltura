<?xml version="1.0" encoding="utf-8"?>
<!---
	A popup window that allows matching files with the flavor they represent. 
	The same window with different configurations will be used for upload, link and import.
-->
<containers:HelpTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
		xmlns:containers="com.kaltura.containers.*" 
		xmlns:flavors="com.kaltura.kmc.modules.content.view.window.flavors.*"
		xmlns:validators="com.kaltura.validators.*" 
		width="550" styleName="TitleWindowType2" visible="false"
		showCloseButton="true" close="closeHandler(event)"
		showHelpButton="true" help="helpHandler(event)"
		creationComplete="titlewindow1_creationCompleteHandler(event)" 
		xmlns:flavors1="com.kaltura.edw.view.window.flavors.*" >

	<mx:Script>
		<![CDATA[
			import com.kaltura.edw.constants.FileTypes;
			import com.kaltura.edw.control.events.MediaEvent;
			import com.kaltura.edw.events.GeneralNonCairngormEvent;
			import com.kaltura.edw.view.EntryDetailsWin;
			import com.kaltura.edw.vo.ConversionProfileWithFlavorParamsVo;
			import com.kaltura.edw.vo.UploadFileVo;
			import com.kaltura.kmvc.control.KMvCController;
			import com.kaltura.managers.FileUploadManager;
			import com.kaltura.types.KalturaAssetParamsOrigin;
			import com.kaltura.types.KalturaEntryStatus;
			import com.kaltura.types.KalturaFlavorReadyBehaviorType;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.vo.KalturaAssetParamsResourceContainer;
			import com.kaltura.vo.KalturaAssetsParamsResourceContainers;
			import com.kaltura.vo.KalturaBaseEntry;
			import com.kaltura.vo.KalturaConversionProfileAssetParams;
			import com.kaltura.vo.KalturaMediaEntry;
			import com.kaltura.vo.KalturaRemoteStorageResource;
			import com.kaltura.vo.KalturaStorageProfile;
			import com.kaltura.vo.KalturaUrlResource;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.Application;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.resources.ResourceManager;
			
			/*
				Events
			*/
			public static const CLOSE_WINDOW:String = "closeWindow";
			
			
			/*
				window states
			*/
			public static const SINGLE_FILE_STATE:String = "single_file_state"; 
			public static const MULTI_FILES_STATE:String = "multi_files_state";
			
			/*
				actions
			*/
			public static const ACTION_UPLOAD:String = "action_upload";
			public static const ACTION_IMPORT:String = "action_import";
			public static const ACTION_LINK:String = "action_link";
			
			
//			private const strRegex:String = "^((https?)|(ftp)):\\/\\/" +
//				"(([0-9a-zA-Z_!~*'().&=+$%-]+:)?[0-9a-zA-Z_!~*'().&=+$%-]+@)?" + //user@
//				"(([0-9]{1,3}\\.){3}[0-9]{1,3}" + // IP- 199.194.52.184
//				"|" + // allows either IP or domain
//				"([0-9a-zA-Z_!~*'()-]+\\.)*" + // tertiary domain(s)- www.
//				"([0-9a-zA-Z][0-9a-zA-Z-]{0,61})?[0-9a-zA-Z]\\." + // second level domain
//				"[a-zA-Z]{2,6})" + // first level domain- .com or .museum
//				"(.[a-zA-Z]{2,6})*" + // additional domain level .il
//				"(:[0-9]{1,4})?" + // port number- :80
//				"((\\/?)|" + // a slash isn't required if there is no file name
//				"(\\/[0-9a-zA-Z_!~*'().;?:@&=+$,%#-]+)+)$";
			
			/**
			 * application controller;
			 * */
			public var controller:KMvCController
			
			[Bindable]
			/**
			 * windowState is the state the window is currently functioning at.
			 * MULTI_FILES_STATE means this is replacement of all flavours of the entry,
			 * while SINGLE_FILE_STATE means we only replace a single flavour.
			 * note that this is not affected by the partner multiple files 
			 * ingestion permission, and shouldn't be.
			 * */
			public var windowState:String;
			
			[Bindable]
			/**
			 * @copy #windowAction
			 * */
			private var _windowAction:String;
			
			[Bindable]
			/**
			 * hide the "add more files" options,
			 * */
			public var allowAddFiles:Boolean = true;
			
			/**
			 * when editing a single flavor, it's name
			 * */
			public var flavorAssetName:String;
			
			
			/**
			 * @copy #selectedCPAssetParams
			 * */
			protected var _selectedCPAssetParams:ArrayCollection;
			
			private var _fileReferenceList:FileReferenceList;
			
			/**
			 * @copy #entry
			 * */
			private var _entry:KalturaBaseEntry;
			
			[Bindable]
			/**
			 * list of available conversion profiles and their
			 * respective flavorparam ids
			 * <code>ConversionProfileWithFlavorParamsVo</code> objects
			 * */
			public var conversionProfiles:ArrayCollection;
			
			/**
			 * partner's storage profiles
			 * */
			public var storageProfiles:ArrayCollection;
			
			[Bindable]
			private var _selectedStorageProfile:KalturaStorageProfile;
			
			[Bindable]
			/**
			 * <code>UploadFileVo</code> objects. <br>
			 * when passed from outside the objects only have fileData and fileName attributes popuplated. <br>
			 * flavors attribute is set in FilesTable.(set)flavors.<br>
			 * flavorParamId attribute is initialized in FlavorRenderer.selectFlavor and set 
			 * 		in FilesTable.flavorSelected
			 * */
			public var filesList:ArrayCollection;


			/**
			 * make sure the same flavour is not selected for more than one file
			 * ---------------------------------- 
			 * • more than one file is associated to the same conversion flavor settings.
			 * • Some of the files are exceeding system upload file size limitation 
			 * 	(currently set to X GB). please import these files to the system by 
			 * 	utilizing other ingestion options, applicable in your account (e.g. 
			 * 	import, drop folder etc)" 
			 * • Some files required for entry’s readiness for publishing are missing.
			 * */
			protected function validate():Boolean {
				var result:Boolean = true;
				if (!validateMultipleFilesSingleFlavour()) {
					Alert.show(ResourceManager.getInstance().getString('cms', 'multipleFilesFlavor'), 
						ResourceManager.getInstance().getString('cms', 'error'));
					result = false;
				}
				// only test file size when in upload mode
				else if (_windowAction == AddFlavorAssetsWindow.ACTION_UPLOAD && !validateFileSize()) {
					Alert.show(ResourceManager.getInstance().getString('common', 'filesTooBig', [getUploadLimit()]), 
						ResourceManager.getInstance().getString('cms', 'error'));
					result = false;
				}
				// only validate urls for import
				else if (_windowAction == AddFlavorAssetsWindow.ACTION_IMPORT && !validateURLs()){
					Alert.show(ResourceManager.getInstance().getString('cms', 'urlValidationError'), 
						ResourceManager.getInstance().getString('cms', 'error'));
					result = false;
				}
				return result;
			}
			
			
			protected function getUploadLimit():Number {
				return Application.application.parameters.maxUploadSize;
			}
			
			
			protected function validateURLs():Boolean {
//				var e:ValidationResultEvent;
//				for each (var ff:UploadFileVo in filesList) {
//					e = regExpV.validate(ff.fileName);
////					e = urlValidator.validate(ff.fileName);
//					if (e.results) {
//						return false;
//					}
//				}
				return true;
			}
			
			/**
			 * if file size of any file exceeds partner limit, return false
			 * */
			protected function validateFileSize():Boolean {
				var result:Boolean = true;
				var bytesInMega:int = 1024*1024;
				var maxSize:Number = getUploadLimit();
				for each (var file:UploadFileVo in filesList) {
					if ((file.fileData.size/bytesInMega) > maxSize) {
						result = false;
						break;
					}
				}
				return result;
			}
			
			
			/**
			 * if the same flavour is selected for more than one file, return false.
			 * */
			protected function validateMultipleFilesSingleFlavour():Boolean {
				// when replaceing a single flavour, this is not a problem.
				if (!allowAddFiles) return true;
				// scan files list and put each flavor id in an array.
				// if the same flavor appears twice - fail, else return true.
				var ar:Vector.<String> = new Vector.<String>();
				for each (var file:UploadFileVo in filesList) {
					for (var i:int = 0; i<ar.length; i++) {
						if (file.flavorParamId == ar[i]) {
							return false;
						}
					}
					ar.push(file.flavorParamId);
				}
				return true;
			}
			
			
			/**
			 * run validations sequence
			 * */
			protected function initSubmitSequence(event:MouseEvent):void {
				if (validate()) {
					validateReadyCriteria();
				}
			}
			
			
			/**
			 * test entry readiness criteria, approve / cancel, continue accordingly.
			 * */
			protected function validateReadyCriteria():void {
				var isOk:Boolean = true;
				var cpaps:Array = (cnvrtProfCb.selectedItem as ConversionProfileWithFlavorParamsVo).flavors.source;
				
				// scan the flavors list and see if any required flavors are missing
				for each(var cpap:KalturaConversionProfileAssetParams in cpaps) {
					var bFound:Boolean = false;
					if (cpap.readyBehavior == KalturaFlavorReadyBehaviorType.REQUIRED && cpap.origin == KalturaAssetParamsOrigin.INGEST) {
						for each (var fuv:UploadFileVo in filesList) {
							if (fuv.flavorParamId == cpap.assetParamsId.toString()) {
								bFound = true;
								break;
							}
						}
						if (!bFound) {
							isOk = false;
							break;
						}
					}
				}
				if (isOk) {
					// save
					submit();
				}
				else {
					// alert user
					Alert.show(ResourceManager.getInstance().getString('cms', 'missingRequired'),
						ResourceManager.getInstance().getString('cms', 'warning'), Alert.OK|Alert.CANCEL, null, handleWarning);
				}
				
			}
			
			
			/**
			 * if the user wishes to upload partial files list, do so.
			 * */
			protected function handleWarning(e:CloseEvent):void {
				if (e.detail == Alert.OK) {
					submit();
				}
			}
			
				
			
			/**
			 * Submit handler: trigger relevant submission
			 * */
			protected function submit():void {
				switch (_windowAction){
					case AddFlavorAssetsWindow.ACTION_UPLOAD:
						submitUpload();
						break;
					case AddFlavorAssetsWindow.ACTION_IMPORT:
					case AddFlavorAssetsWindow.ACTION_LINK:
						submitImportLink();
						break;
				}
				// close the popup
				closeHandler();
			}
			
			
			
			/**
			 * trigger media.updateContent with matching KalturaURLResource or
			 * KalturaRemoteStorageResource objects
			 * */
			protected function submitImportLink():void {
				if (windowState == AddFlavorAssetsWindow.MULTI_FILES_STATE) {
					handleMultipleFlavours();
				}
				else {
					// only one file
					handleSingleFlavour(filesList[0] as UploadFileVo);
				}
			}
			
			
			/**
			 * update entry with new resources
			 * */
			protected function handleMultipleFlavours():void {
				// conversion profile id
				var cnvrtProfId:String = (cnvrtProfCb.selectedItem as ConversionProfileWithFlavorParamsVo).profile.id.toString();
				// remote storage id
				var remoteStorageId:int = (cnvrtProfCb.selectedItem as ConversionProfileWithFlavorParamsVo).profile.storageProfileId;
				// the actual resource we send is a list of the containers for the resources we want to replace.                
				var mediaResource:KalturaAssetsParamsResourceContainers = new KalturaAssetsParamsResourceContainers();
				mediaResource.resources = new Array();
				
				for each (var ufv:UploadFileVo in filesList) {
					// the first resource of the flavor we want to replace
					var subSubResource:KalturaUrlResource;
					if (_windowAction == AddFlavorAssetsWindow.ACTION_IMPORT) {
						subSubResource = new KalturaUrlResource();
						subSubResource.url = ufv.fileName;
					}
					else if (_windowAction == AddFlavorAssetsWindow.ACTION_LINK) {
						subSubResource = new KalturaRemoteStorageResource();
						subSubResource.url = ufv.fileName;
						(subSubResource as KalturaRemoteStorageResource).storageProfileId = remoteStorageId;
					}
					
					// container for the resource we want to replace
					var subResource:KalturaAssetParamsResourceContainer = new KalturaAssetParamsResourceContainer();
					subResource.resource = subSubResource;
					subResource.assetParamsId = parseInt(ufv.flavorParamId);
					
					// add to list
					mediaResource.resources.push(subResource);
					
				}
				// dispatch the event with required data
				var ce:MediaEvent = new MediaEvent(MediaEvent.UPDATE_MEDIA, _entry as KalturaMediaEntry);
				ce.data = {conversionProfileId:cnvrtProfId, resource:mediaResource};
				controller.dispatch(ce);
			}
			
			
			/**
			 * update / add a single flavor 
			 * @param ufv	vo that represents the flavor being updated / added
			 * */
			protected function handleSingleFlavour(ufv:UploadFileVo):void {
				var resource:KalturaUrlResource;
				var dffe:MediaEvent;
				// create resource
				if (_windowAction == AddFlavorAssetsWindow.ACTION_IMPORT) {
					resource = new KalturaUrlResource();
				}
				else if (_windowAction == AddFlavorAssetsWindow.ACTION_LINK) {
					resource = new KalturaRemoteStorageResource();
					(resource as KalturaRemoteStorageResource).storageProfileId = _selectedStorageProfile.id;
				}
				resource.url = ufv.fileName;
				// dispatch call
				if (ufv.flavorAssetId != null) {
					dffe = new MediaEvent(MediaEvent.UPDATE_SINGLE_FLAVOR, _entry as KalturaMediaEntry);
					dffe.data = {flavorAssetId: ufv.flavorAssetId, resource:resource};
					controller.dispatch(dffe);
				}
				else {
					// if no flavorAssetId this is new flavour
					dffe = new MediaEvent(MediaEvent.ADD_SINGLE_FLAVOR, _entry as KalturaMediaEntry);
					dffe.data = {flavorParamsId: ufv.flavorParamId, resource:resource};
					controller.dispatch(dffe);
				}
			}
			
			
			/**
			 * add the relevant files to FileUploadManager.
			 * */
			protected function submitUpload():void {
				var n:int = filesList.length;
				var uploader:FileUploadManager = FileUploadManager.getInstance();
				var ufv:UploadFileVo;
				// conversion profile id
				var cnvrtProfId:String = (cnvrtProfCb.selectedItem as ConversionProfileWithFlavorParamsVo).profile.id.toString();
				
				// add uploads to the FileUploadManager
				if (windowState == AddFlavorAssetsWindow.MULTI_FILES_STATE) {
					var files:Array = new Array();
					for (var i:int = 0; i<n; i++) {
						ufv = filesList[i] as UploadFileVo;
						files.push(uploader.createFuv(_entry.id, (_entry as KalturaMediaEntry).mediaType, ufv.fileData, ufv.flavorParamId, ufv.flavorAssetId, cnvrtProfId));
					}
					// decide the correct action (add / update)
					uploader.updateEntryContent(_entry.id, files);
				}
				else {
					// only one file
					ufv = filesList[0] as UploadFileVo;
					uploader.updateEntryFlavor(_entry.id, uploader.createFuv(_entry.id, (_entry as KalturaMediaEntry).mediaType, ufv.fileData, ufv.flavorParamId, ufv.flavorAssetId, cnvrtProfId), ufv.flavorAssetId == null);
				}
			}
			
			
			
			protected function cnvrtPrfLbl(itemObj:ConversionProfileWithFlavorParamsVo):String{
				return itemObj.profile.name;
			}

			
			/**
			 * remove the popup
			 * */
			protected function closeHandler(event:CloseEvent = null):void {
				dispatchEvent(new Event(CLOSE_WINDOW));
			}
			
			/**
			 * open the file browser 
			 * */
			protected function addMoreFiles():void {
				_fileReferenceList = new FileReferenceList();
				_fileReferenceList.addEventListener(Event.SELECT, onFlavorsSelected);
				var mediaType:int = parseInt(_entry.type);
				if (mediaType == KalturaMediaType.VIDEO) 
					_fileReferenceList.browse(new Array(getTypeFilter('video',FileTypes.VIDEO_TYPES)));
				else if (mediaType == KalturaMediaType.AUDIO)
					_fileReferenceList.browse(new Array(getTypeFilter('audio',FileTypes.AUDIO_TYPES)));
			}
			
			/**
			 * add the selected files to the files list
			 * */
			private function onFlavorsSelected(event:Event):void {
				_fileReferenceList.removeEventListener(Event.SELECT, onFlavorsSelected);
				var files:Array = (event.target as FileReferenceList).fileList;
				for each (var fileReference:FileReference in files) {
					var uploadFile:UploadFileVo = new UploadFileVo();
					uploadFile.fileName = fileReference.name;
					uploadFile.fileData = fileReference;
					filesList.addItem(uploadFile);
				}
				// trigger the binding to get the rest of the fileVo attributes set
				filesTable.dataProvider = filesList;
			}
			
			/**
			 * will return fileFilter according to given name and file types
			 * */
			private function getTypeFilter(localeKey:String, types:String):FileFilter {
				return new FileFilter(resourceManager.getString('drilldown', localeKey) +  "(" + types+ ")" , types );
			}


			protected function titlewindow1_creationCompleteHandler(event:FlexEvent):void {
				this.mx_internal::closeButton.buttonMode = true;
				var bFound:Boolean;		// found entry ingestion profile?
				var defInd:int = -1;	// index of partner default ingestion profile
				var vo:ConversionProfileWithFlavorParamsVo;
				if (_entry && conversionProfiles) {
					// select the conversion profile that matches the entry's default
					for (var i:int = 0; i<conversionProfiles.length; i++) {
						vo = conversionProfiles[i] as ConversionProfileWithFlavorParamsVo; 
						if (vo.profile.id == _entry.conversionProfileId) {
							cnvrtProfCb.selectedIndex = i;
							bFound = true;
							break;
						} 
						if (vo.profile.isDefault) {
							defInd = i;
						}
					}
					// if not found, use partner default.
					if (!bFound) {
						cnvrtProfCb.selectedIndex = defInd;
						bFound = true;
					}
				}
				if (bFound) {
					cnvrtProfCb.dispatchEvent(new ListEvent(ListEvent.CHANGE));
				}
				
				// set appearance according to action
				showOrClose(_windowAction);
			}
			
			
			/**
			 * set texts according to selected action
			 * @param action	one of the AddFlavorAssetsWindow.ACTION_XX consts
			 * */
			private function showOrClose(action:String) :void {
				if (!cnvrtProfCb) {
					// not creationComplete yet
					return;
				} 
				if (!visible){
					// for link action in single state only show panel if 
					// entry's conversion profile has storageProfileId  
					if (action == AddFlavorAssetsWindow.ACTION_LINK && windowState == AddFlavorAssetsWindow.SINGLE_FILE_STATE) {
						if ((cnvrtProfCb.selectedItem as ConversionProfileWithFlavorParamsVo).profile.storageProfileId != int.MIN_VALUE) {
							setSubmitText(action);
							visible = true;
						}
						else {
							// Remote Storage is not set in Entry's Conversion Profile
							Alert.show(ResourceManager.getInstance().getString('cms', 'noRemoteStorageForEntry'), 
								ResourceManager.getInstance().getString('cms', 'error'));
							closeHandler();
						}	
					}
					else {
						setSubmitText(action);
						visible = true;
					}
						
				}
					
			}
			
			private function setSubmitText(action:String):void {
				switch (action){
					case AddFlavorAssetsWindow.ACTION_LINK:
						submitBtn.label = ResourceManager.getInstance().getString('cms', 'submitLinkLabel');
						break;
					case AddFlavorAssetsWindow.ACTION_IMPORT:
						submitBtn.label = ResourceManager.getInstance().getString('cms', 'submitImportLabel');
						break;
					case AddFlavorAssetsWindow.ACTION_UPLOAD:
						submitBtn.label = ResourceManager.getInstance().getString('cms', 'submitUploadLabel');
						break;
						
				}
			}
			
			protected function showStorageProfileDetails(event:ListEvent):void {
				if (storageProfiles) {
					for each (var sp:KalturaStorageProfile in storageProfiles) {
						if (sp.id == (cnvrtProfCb.selectedItem as ConversionProfileWithFlavorParamsVo).profile.storageProfileId) {
							_selectedStorageProfile = sp;
							return;
						}
					}
					_selectedStorageProfile = null;
				}
			}
			
			
			protected function getFileHeaderText(action:String):String {
				switch (action) {
					case AddFlavorAssetsWindow.ACTION_IMPORT:
						return resourceManager.getString('cms', 'afa_import_header');
						break;
					case AddFlavorAssetsWindow.ACTION_LINK:
						return resourceManager.getString('cms', 'afa_link_header');
						break;
					case AddFlavorAssetsWindow.ACTION_UPLOAD:
						return resourceManager.getString('cms', 'afa_upload_header');
						break;
				}
				return '';
			}
			
			
			/**
			 * windowAction represents the action that will be taken upon 
			 * "submit" click. applicable values are either ACTION_UPLOAD, ACTION_IMPORT
			 * or ACTION_LINK.
			 * */
			public function get windowAction():String {
				return _windowAction;
			}
			
			/**
			 * @private
			 */
			public function set windowAction(value:String):void {
				_windowAction = value;
				showOrClose(value);
			}

			/**
			 * the entry being edited
			 * */
			public function get entry():KalturaBaseEntry {
				return _entry;
			}

			/**
			 * @private
			 */
			public function set entry(value:KalturaBaseEntry):void {
				_entry = value;
				var mediaType:String = '';
				if ((value as KalturaMediaEntry).mediaType == KalturaMediaType.AUDIO) {
					mediaType = ResourceManager.getInstance().getString('cms', 'audio');
				} else if ((value as KalturaMediaEntry).mediaType == KalturaMediaType.VIDEO){
					mediaType = ResourceManager.getInstance().getString('cms', 'video');
				}
				if (value.status == KalturaEntryStatus.NO_CONTENT) {
					title = ResourceManager.getInstance().getString('cms', 'windowTitleAdd', [mediaType]);
				}
				else {
					title = ResourceManager.getInstance().getString('cms', 'windowTitleUpdate', [mediaType]);
				}
				// when updating single flavour, say which one
				if (windowState == AddFlavorAssetsWindow.SINGLE_FILE_STATE) {
					title += " - " + flavorAssetName;
				}
			}
			
			



			protected function helpHandler(event:Event):void
			{
				var anchor:String;
				switch (_windowAction) {
					case AddFlavorAssetsWindow.ACTION_UPLOAD:
						anchor = 'section_flavor_upload';
						break;
					case AddFlavorAssetsWindow.ACTION_IMPORT:
						anchor = 'section_flavor_import';
						break;
					case AddFlavorAssetsWindow.ACTION_LINK:
						anchor = 'section_flavor_link';
						break;
				}
				var e:GeneralNonCairngormEvent = new GeneralNonCairngormEvent(EntryDetailsWin.HELP_REQUEST, true);
				e.data = anchor;
				dispatchEvent(e);
			}

		]]>
	</mx:Script>
	<!--<mx:RegExpValidator id="regExpV" expression="{strRegex}"  />
	<validators:URLValidator id="urlValidator" required="true" property="text"/>-->
	
	<mx:HBox verticalAlign="middle" visible="{windowState == AddFlavorAssetsWindow.MULTI_FILES_STATE}" 
			 includeInLayout="{windowState == AddFlavorAssetsWindow.MULTI_FILES_STATE}">
		<mx:Label text="{ResourceManager.getInstance().getString('cms', 'convProfLbl')}:" 
				  styleName="simpleBoldText"/>
		<mx:ComboBox id="cnvrtProfCb" labelFunction="cnvrtPrfLbl" change="showStorageProfileDetails(event)"
					 dataProvider="{conversionProfiles}" selectedIndex="-1"/>
	</mx:HBox>
	<mx:Spacer height="4" />
	<mx:VBox id="storageProfileBox" styleName="flavorsReplacementVBox" width="{filesTable.width}"
			 horizontalScrollPolicy="off" paddingTop="4" paddingBottom="4"
			 visible="{_windowAction == AddFlavorAssetsWindow.ACTION_LINK}"
			 includeInLayout="{_windowAction == AddFlavorAssetsWindow.ACTION_LINK}">
		<mx:HBox verticalAlign="middle" styleName="noPadding">
			<mx:Label text="{resourceManager.getString('cms', 'remoteStorageName')}" fontWeight="bold"/>
			<mx:Label text="{_selectedStorageProfile.name}" />
			<mx:VRule height="12"/>
			<mx:Label text="{resourceManager.getString('cms', 'idHeader')}:" fontWeight="bold"/>
			<mx:Label text="{_selectedStorageProfile.id}" />
		</mx:HBox>
		<mx:HBox verticalAlign="middle" horizontalScrollPolicy="off" styleName="noPadding">
			<mx:Label text="{resourceManager.getString('cms', 'storageUrl')}" fontWeight="bold" />
			<mx:Label text="{_selectedStorageProfile.storageUrl}" toolTip="{_selectedStorageProfile.storageUrl}" 
					  />
			<mx:VRule height="8"/>
			<mx:Label text="{resourceManager.getString('cms', 'storageBaseDir')}" fontWeight="bold" />
			<mx:Label text="{_selectedStorageProfile.storageBaseDir}" toolTip="{_selectedStorageProfile.storageBaseDir}" 
					  />
		</mx:HBox>
	</mx:VBox>
	<mx:Spacer height="4" />
	<flavors1:FilesTable id="filesTable" width="100%" flavors="{cnvrtProfCb.selectedItem.flavors}"
						dataProvider="{filesList}" allowAddFiles="{allowAddFiles}" fileHeaderText="{getFileHeaderText(_windowAction)}"
						addFiles="addMoreFiles()" showSize="{_windowAction == AddFlavorAssetsWindow.ACTION_UPLOAD}" 
						nameEditable="{_windowAction != AddFlavorAssetsWindow.ACTION_UPLOAD}"/>
	<mx:Text width="100%"
			 htmlText="{resourceManager.getString('cms', 'importSourceForLink')}" 
			 visible="{_windowAction == AddFlavorAssetsWindow.ACTION_LINK}"
			 includeInLayout="{_windowAction == AddFlavorAssetsWindow.ACTION_LINK}"/>
	<mx:ControlBar>
		<mx:Button id="submitBtn" click="initSubmitSequence(event)" buttonMode="true" enabled="{filesList.length > 0}"/>
	</mx:ControlBar>
</containers:HelpTitleWindow>
