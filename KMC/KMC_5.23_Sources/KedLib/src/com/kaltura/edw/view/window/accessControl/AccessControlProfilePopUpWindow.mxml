<?xml version="1.0" encoding="utf-8"?>
<!---
	 This popup window is used to add or edit an Access Control Profile VO.
	 Use the 'newProfileState' state for the 'Add New..' action
-->
<containers:HelpTitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:containers="com.kaltura.containers.*"
							xmlns:controllers="com.adobe.controllers.*" xmlns:controls="com.kaltura.controls.*"
							xmlns:acp="com.kaltura.edw.view.window.accessControl.*"
							title="{rm.getString('windows', 'editAccessControlTitle')}" showCloseButton="true"
							close="closeWindow(event)" layout="vertical" creationComplete="onCreationComplete(event)"
							verticalScrollPolicy="off" help="onHelp(event)">
	<containers:states>
		<mx:State name="newProfileState">
			<mx:SetProperty name="title" value="{rm.getString('windows', 'newAccessControlTitle')}"/>
			<mx:SetProperty target="{submitBtn}" name="label" value="{rm.getString('windows', 'submitNewBtn')}"/>
			<mx:SetProperty target="{profileNameTi}" name="text"/>
			<mx:SetProperty target="{descriptionTa}" name="text"/>
		</mx:State>
	</containers:states>

	<mx:Script>
		<![CDATA[
			import com.kaltura.edw.business.permissions.PermissionManager;
			import com.kaltura.edw.events.GeneralNonCairngormEvent;
			import com.kaltura.edw.view.EntryDetailsWin;
			import com.kaltura.types.KalturaNullableBoolean;
			import com.kaltura.types.KalturaSiteRestrictionType;
			import com.kaltura.utils.KArrayUtil;
			import com.kaltura.vo.AccessControlProfileVO;
			import com.kaltura.vo.KalturaAccessControl;
			import com.kaltura.vo.KalturaBaseRestriction;
			import com.kaltura.vo.KalturaSiteRestriction;
			import com.kaltura.windows.popUpWindows.AddNewDomainPopUpWindow;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.LinkButton;
			import mx.controls.List;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;
			import mx.resources.IResourceManager;
			import mx.resources.ResourceBundle;
			import mx.resources.ResourceManager;

			[ResourceBundle("windows")]
			private static var rb:ResourceBundle;


			// events const
			public static const SAVE_UPDATED_PROFILE:String = "saveUpdatedProfile";
			public static const SAVE_NEW_PROFILE:String = "saveNewProfile";


			[Bindable]
			private var rm:IResourceManager = ResourceManager.getInstance();

			/**
			 * @copy #editable
			 * */
			private var _editable:Boolean;


			/**
			 * is data in the popup editable
			 * */
			public function get editable():Boolean {
				return _editable;
			}


			/**
			 * @private
			 */
			public function set editable(value:Boolean):void {
				_editable = value;
				
				profileNameTi.enabled = false;
				descriptionTa.enabled = false;
				domains.editable = false;
				ips.editable = false;
				countries.editable = false;
				advanced.editable = false
				submitBtn.visible = false;
			}



			/**
			 *  the accessControlProfile(acp) to add ot edit
			 */
			[Bindable]
			private var _accessControlProfile:AccessControlProfileVO;


			/**
			 * get the accessControlProfile(acp)
			 */
			[Bindable]
			public function get accessControlProfile():AccessControlProfileVO {
				return _accessControlProfile;
			}


			/**
			 * set the accessControlProfile(acp)
			 */
			public function set accessControlProfile(accessControlProfile:AccessControlProfileVO):void {
				_accessControlProfile = accessControlProfile;
			}


			/**
			 * creation complete of the main window, for edit we clone 
			 * the acp. For add new one we create a new acp
			 */
			private function onCreationComplete(event:Event):void {
				if (currentState == "newProfileState") {
					_accessControlProfile = new AccessControlProfileVO();
					_accessControlProfile.profile = new KalturaAccessControl();
					PermissionManager.getInstance().applyAllAttributes(this, "acDrilldown_add");
				}
				else {
					_accessControlProfile = _accessControlProfile.clone();
					setAccessControlProfileData();
					PermissionManager.getInstance().applyAllAttributes(this, "acDrilldown_edit");
				}
				validateInput();
			}


			/**
			 * seting all the data when editing an acp
			 */
			private function setAccessControlProfileData():void {
				setDefaultProfileSettings();
				domains.setSiteRestrictions();
				ips.setIPRestrictions();
				countries.setCountriesRestrictions();
				advanced.setSessionRestriction();
				advanced.setPreviewRestrictions();
			}


			public var rootUrl:String;


			private function setDefaultProfileSettings():void {
				profileNameTi.enabled = !(_accessControlProfile.profile.isDefault == KalturaNullableBoolean.TRUE_VALUE);
			}

			


			/**
			 * close window event - when pressing the X button, cancel button or after saving the data
			 */
			private function closeWindow(event:Event = null):void {
				PopUpManager.removePopUp(this);
			}


			private function saveProfile(event:Event):void {
				// update
				updateProperties();
				// validate
				if (countries.isOk && domains.isOk && ips.isOk) {
					// save
					saveAndClose();
				}
				else {
					var msg:String = '';
					msg += domains.isOk ? msg : rm.getString('windows', 'noSitesWereSelected');
					msg = countries.isOk ? msg : msg + "\n" + rm.getString('windows', 'noCountriesWereSelected');
					msg = ips.isOk ? msg : msg + "\n" + rm.getString('windows', 'noIPsWereSelected');

					msg = msg + "\n\n\t" + rm.getString('windows', 'noSelectionQuestion');
					Alert.show(msg, rm.getString('windows', 'alertTitle'), Alert.YES | Alert.NO, null, alertResponseHandler);
				}

			}


			private function alertResponseHandler(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					saveAndClose();
				}
			}


			private function saveAndClose():void {
				if (this.currentState == null) {
					saveUpdatedProfileFunc();
				}
				else {
					saveNewProfileFunc();
				}

				closeWindow();
			}


			private function updateProperties():void {
				updateName();
				updateDescription();
				clearRestrictions();
				domains.updateSiteRestrictions();
				ips.updateIPsRestrictions();
				countries.updateCountriesRestrictions();
				advanced.updateSessionRestrictions();
				advanced.UpdatePreviewRestrictions();
			}


			private function updateName():void {
				_accessControlProfile.profile.name = profileNameTi.text;
			}


			private function updateDescription():void {
				_accessControlProfile.profile.description = descriptionTa.text;
			}


			private function clearRestrictions():void {
				_accessControlProfile.profile.restrictions = new Array();
			}




			/**
			 * ask to save the updated profile
			 */
			private function saveUpdatedProfileFunc():void {
				dispatchEvent(new Event(SAVE_UPDATED_PROFILE));
			}


			private function saveNewProfileFunc():void {
				dispatchEvent(new Event(SAVE_NEW_PROFILE));
			}


			private function validateInput(event:Event = null):void {
				var isValid:Boolean = true
				var name:String = profileNameTi.text;
				name = name.replace(new RegExp(' ', 'g'), '');
				isValid = (name != '');

				submitBtn.enabled = isValid;
			}

			protected function onHelp(event:Event):void {
				var e:GeneralNonCairngormEvent = new GeneralNonCairngormEvent(EntryDetailsWin.HELP_REQUEST, true);
				e.data = 'section_access_control_profile';
				dispatchEvent(e);
			}

		]]>
	</mx:Script>

	<mx:Metadata>
		[Event(name="saveUpdatedProfile", type="mx.events.Event")]
		[Event(name="saveNewProfile", type="mx.events.Event")]
	</mx:Metadata>

	<mx:StringValidator source="{profileNameTi}" property="text" trigger="{profileNameTi}" triggerEvent="change"
						required="true" requiredFieldError="{rm.getString('windows', 'profileNameErrorMsg')}"/>


	<mx:VBox verticalScrollPolicy="on" horizontalScrollPolicy="off" height="450" width="100%"
			 styleName="acpPopUpMainVBox">
		
		<!-- profile name and description -->
		<mx:VBox width="100%" styleName="acpPopUpSectionBox">
			<mx:VBox width="100%" >
				<mx:Label text="{rm.getString('windows', 'profileTitle')}" styleName="acpPopUpTitleLabel"/>
			</mx:VBox>
			<mx:Form width="100%" textAlign="left" paddingLeft="0">
				<mx:FormItem label="{rm.getString('windows', 'nameLabel')}" width="100%">
					<mx:TextInput id='profileNameTi' width="100%" change='validateInput(event)'
								  text="{accessControlProfile.profile.name}"/>
				</mx:FormItem>
				<mx:FormItem label="{rm.getString('windows', 'descriptionLabel')}" width="100%">
					<mx:TextArea id='descriptionTa' width="100%" text="{accessControlProfile.profile.description}"/>
				</mx:FormItem>
			</mx:Form>
		</mx:VBox>
		
		<!-- domain restriction -->
		<acp:DomainRestrictions id="domains" profile="{_accessControlProfile.profile}" />
		
		<!-- country restriction -->
		<acp:CountryRestrictions id="countries" profile="{_accessControlProfile.profile}" />
		
		<!-- IP restriction -->
		<acp:IPRestrictions id="ips" profile="{_accessControlProfile.profile}" />

		<!-- advanced -->
		<acp:Advanced id="advanced" profile="{_accessControlProfile.profile}"/>
	</mx:VBox>
	
	
	<mx:ControlBar width="100%" horizontalAlign="center" paddingBottom="2" paddingLeft="2" paddingRight="2"
				   paddingTop="2">
		<mx:Button label="Save Changes" useHandCursor="true" buttonMode="true" click="saveProfile(event)" id="submitBtn"/>
	</mx:ControlBar>
</containers:HelpTitleWindow>
