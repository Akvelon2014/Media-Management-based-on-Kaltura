<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" styleName="acpPopUpSectionBox">
	<mx:Script>
		<![CDATA[
			import com.kaltura.types.KalturaSiteRestrictionType;
			import com.kaltura.utils.KArrayUtil;
			import com.kaltura.vo.KalturaAccessControl;
			import com.kaltura.vo.KalturaBaseRestriction;
			import com.kaltura.vo.KalturaSiteRestriction;
			import com.kaltura.windows.popUpWindows.AddNewDomainPopUpWindow;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.managers.PopUpManager;


			/**
			 * the access control object being edited
			 * */
			public var profile:KalturaAccessControl;

			[Bindable]
			/**
			 * are controls in the panel editable
			 * */
			public var editable:Boolean = true;
			
			[Bindable]
			private var allowedSitesArr:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			private var notAllowedSitesArr:ArrayCollection = new ArrayCollection();
			
			public var isOk:Boolean = true;
			
			/**
			 * saved list to be used after user responds 
			 * to delete domains approval request
			 * */
			private var _selectedList:List;
			
			public function setSiteRestrictions():void {
				var restrictionFound:Boolean = false;
				for each (var restriction:KalturaBaseRestriction in profile.restrictions) {
					if (restriction is KalturaSiteRestriction) {
						restrictionFound = true;
						var arr:ArrayCollection;
						if ((restriction as KalturaSiteRestriction).siteRestrictionType == KalturaSiteRestrictionType.ALLOW_SITE_LIST) {
							approvedSitesRadioBtn.selected = true;
							arr = allowedSitesArr;
						}
						else {
							notApprovedSitesRadioBtn.selected = true;
							arr = notAllowedSitesArr;
						}
						
						setSitesFromString(arr, (restriction as KalturaSiteRestriction).siteList);
						break;
					}
				}
				
				anySiteRaddioBtn.selected = !restrictionFound;
			}
		
			
			public function updateSiteRestrictions():void {
				if (anySiteRaddioBtn.selected != true) {
					var siteRestriction:KalturaSiteRestriction = new KalturaSiteRestriction();
					siteRestriction.siteRestrictionType = approvedSitesRadioBtn.selected ? KalturaSiteRestrictionType.ALLOW_SITE_LIST : KalturaSiteRestrictionType.RESTRICT_SITE_LIST;
					
					var list:List = (approvedSitesRadioBtn.selected == true) ? approvedDomainsList : notApprovedDomainsList;
					siteRestriction.siteList = getSitesList(list.dataProvider as ArrayCollection);
					
					if ((list.dataProvider as ArrayCollection).length > 0) {
						isOk = true;
						profile.restrictions.push(siteRestriction);
					}
					else {
						isOk = false;
					}
				}
				else {
					isOk = true;
				}
			}
			
			
			private function getSitesList(ac:ArrayCollection):String {
				var sitesList:String = "";
				for each (var item:String in ac) {
					sitesList += item + ',';
				}
				if (sitesList.length > 0) {
					sitesList = sitesList.substr(0, sitesList.length - 1)
				}
				return sitesList;
			}
			
			private function setSitesFromString(ac:ArrayCollection, itemStr:String):void {
				var arr:Array = itemStr.split(',');
				for each (var item:String in arr) {
					ac.addItem(item);
				}
			}
			
			
			
			/**
			 * show an alert asking the user's approval to remove the selected domains
			 * @param list the list from which we want to remove selected items
			 */
			private function approveRemoveDomains(list:List):void {
				if (list.selectedItems.length == 0) {
					Alert.show(resourceManager.getString('windows', 'noSelectedDomainToDelete'));
				}
				else {
					_selectedList = list;
					var domainsStrings:String = '';
					for each (var domain:String in list.selectedItems) {
						domainsStrings += '\t\t' + domain + '\n';
					}
					Alert.show(resourceManager.getString('windows', 'areYouSureToRemoveDomains') + domainsStrings, 
						resourceManager.getString('windows', 'removeDomainTitle'), Alert.YES | Alert.NO, 
						this, alertHandler, null, Alert.NO);
				}
			}
			
			
			/**
			 * remove the selected items from the saved list
			 * */
			private function alertHandler(event:CloseEvent):void {
				if (event.detail == Alert.YES) {
					for each (var domain:String in _selectedList.selectedItems) {
						KArrayUtil.removeItemFromArray(domain, _selectedList.dataProvider.source);
					}
					_selectedList.dataProvider.refresh();
				}
			}
			
			
			private function showNewDomainWindow(event:Event, list:List):void {
				var addNewDomainPopUp:AddNewDomainPopUpWindow = new AddNewDomainPopUpWindow();
				addNewDomainPopUp.domainsListData = list.dataProvider as ArrayCollection;
				PopUpManager.addPopUp(addNewDomainPopUp, this, true);
				PopUpManager.centerPopUp(addNewDomainPopUp);
			}
		]]>
	</mx:Script>
	<mx:Label text="{resourceManager.getString('windows', 'authoSiteBigLabel')}" styleName="acpPopUpTitleLabel"/>
	<mx:Spacer height="10"/>
	<mx:RadioButtonGroup id='authoSitesGroup'/>
	<mx:Form width="100%" paddingTop="0">
		<mx:Label text="{resourceManager.getString('windows', 'authoSiteSmallLabel')}" styleName="acpPopUpSmallTitleLabel"/>
		<!-- domain restriction : any domain -->
		<mx:FormItem>
			<mx:RadioButton label="{resourceManager.getString('windows', 'anySiteRadioBtn')}" groupName="authoSitesGroup"
							id="anySiteRaddioBtn" selected="true" enabled="{editable}" styleName="acpRadioButton"/>
		</mx:FormItem>
		<!-- domain restriction : allowed domains -->
		<mx:FormItem width="100%">
			<mx:VBox width="100%" height="100%">
				<mx:RadioButton label="{resourceManager.getString('windows', 'authoSitesRaddioBtn')}" groupName="authoSitesGroup"
								id="approvedSitesRadioBtn" enabled="{editable}" styleName="acpRadioButton"/>
				<mx:HBox width="100%">
					<mx:Label text="{resourceManager.getString('windows', 'domains')}" enabled="{approvedSitesRadioBtn.selected}"/>
					<mx:List width="100%" id="approvedDomainsList" enabled="{approvedSitesRadioBtn.selected}"
							 allowMultipleSelection="true" rowCount="5" dataProvider="{allowedSitesArr}"/>
				</mx:HBox>
			</mx:VBox>
			<mx:HBox>
				<mx:LinkButton label="{resourceManager.getString('windows', 'addDomainBtn')}"
							   enabled="{approvedSitesRadioBtn.selected &amp;&amp; editable}"
							   click='showNewDomainWindow(event, approvedDomainsList)' id="addAuthorisedBtn"
							   styleName="acpLinkButton"/>
				<mx:LinkButton label="{resourceManager.getString('windows', 'removeDomainBtn')}"
							   enabled="{approvedSitesRadioBtn.selected &amp;&amp; editable}"
							   click='approveRemoveDomains(approvedDomainsList)' id="removeAuthorisedBtn"
							   styleName="acpLinkButton"/>
			</mx:HBox>
		</mx:FormItem>
		<!-- domain restriction : restricted domains -->
		<mx:FormItem width="100%">
			<mx:VBox width="100%" height="100%">
				<mx:RadioButton label="{resourceManager.getString('windows', 'noAuthoSitesRadioBtn')}" groupName="authoSitesGroup"
								id="notApprovedSitesRadioBtn" enabled="{editable}" styleName="acpRadioButton"/>
				<mx:HBox width="100%">
					<mx:Label text="{resourceManager.getString('windows', 'domains')}" enabled="{notApprovedSitesRadioBtn.selected}"/>
					<mx:List width="100%" id="notApprovedDomainsList" enabled="{notApprovedSitesRadioBtn.selected}"
							 rowCount="5" dataProvider="{notAllowedSitesArr}" allowMultipleSelection="true"/>
				</mx:HBox>
			</mx:VBox>
			<mx:HBox>
				<mx:LinkButton label="{resourceManager.getString('windows', 'addDomainBtn')}"
							   enabled="{notApprovedSitesRadioBtn.selected &amp;&amp; editable}"
							   click='showNewDomainWindow(event, notApprovedDomainsList)' id="addUnauthorisedBtn"
							   styleName="acpLinkButton"/>
				<mx:LinkButton label="{resourceManager.getString('windows', 'removeDomainBtn')}"
							   enabled="{notApprovedSitesRadioBtn.selected &amp;&amp; editable}"
							   click='approveRemoveDomains(notApprovedDomainsList)' id="removeUnauthorisedBtn"
							   styleName="acpLinkButton"/>
			</mx:HBox>
		</mx:FormItem>
	</mx:Form>
</mx:VBox>
