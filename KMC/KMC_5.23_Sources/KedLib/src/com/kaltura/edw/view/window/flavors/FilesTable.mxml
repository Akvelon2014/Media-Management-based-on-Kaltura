<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="creationCompleteHandler(event)">
	<mx:Script>
		<![CDATA[
			import com.kaltura.edw.view.window.flavors.ir.EditableNameRenderer;
			import com.kaltura.edw.view.window.flavors.ir.FlavorRenderer;
			import com.kaltura.edw.vo.UploadFileVo;
			import com.kaltura.types.KalturaMediaType;
			import com.kaltura.vo.KalturaFlavorParams;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.resources.ResourceManager;

			public static const FLAVOR_SELECTED:String = "flavor_selected";
			public static const NAME_CHANGED:String = "name_changed";
			public static const DELETE_FILE:String = "delete_file";
			public static const ADD_FILES:String = "addFiles";

			[Bindable]
			[ArrayElementType("com.kaltura.kmc.modules.content.vo.UploadFileVo")]
			protected var _dataProvider:ArrayCollection;

			[Bindable]
			/**
			 * show the "add files" button
			 * */
			public var allowAddFiles:Boolean;
			
			[Bindable]
			/**
			 * headerText for "fileName" column
			 * */
			public var fileHeaderText:String;

			private var _nameEditable:Boolean;
			private var _showSize:Boolean;

			[ArrayElementType("KalturaFlavorParams")]
			/**
			 * flavorparamsids list
			 * */
			protected var _flavors:ArrayCollection;


			/**
			 * allow adding more files, depending on nameEditable status
			 * */
			protected function addMoreFiles(event:MouseEvent):void {
				if (_nameEditable) {
					// create a new VO and add it to the DP
					var ufv:UploadFileVo = new UploadFileVo();
					ufv.flavors = _flavors;
					_dataProvider.addItem(ufv);
				}
				else {
					// have to open file browser, etc
					dispatchEvent(new Event(FilesTable.ADD_FILES));
				}
			}


			/**
			 * add listeners to itemrenderers events
			 * */
			protected function creationCompleteHandler(event:FlexEvent):void {
				addEventListener(FilesTable.FLAVOR_SELECTED, flavorSelected);
				addEventListener(FilesTable.NAME_CHANGED, nameChanged);
				addEventListener(FilesTable.DELETE_FILE, deleteFile);
			}


			/**
			 * remove relevant VO (the IR's data) from DP
			 * */
			protected function deleteFile(e:Event):void {
				// 
				var ar:Array = dataProvider.source;
				for (var i:int = 0; i < ar.length; i++) {
					if (ar[i] == e.target.data) {
						ar.splice(i, 1);
					}
				}
				dataProvider.refresh();
			}


			/**
			 * set the event target's selected item data to the relevent VO (the IR's data)
			 * */
			protected function flavorSelected(e:Event):void {
				var uf:UploadFileVo = e.target.data as UploadFileVo;
				uf.flavorParamId = (e.target as FlavorRenderer).selectedFlavor.assetParamsId.toString();
			}


			/**
			 * set the event target's selected item data to the relevent VO (the IR's data)
			 * */
			protected function nameChanged(e:Event):void {
				var uf:UploadFileVo = e.target.data as UploadFileVo;
				uf.fileName = (e.target as EditableNameRenderer).text;
			}


			/**
			 * the flavors that will be displayed in the dropdown
			 * */
			public function set flavors(value:ArrayCollection):void {
				_flavors = value;
				if (_dataProvider) {
					for each (var ufv:UploadFileVo in _dataProvider) {
						ufv.flavors = value;
					}
				}
			}


			public function get dataProvider():ArrayCollection {
				return _dataProvider;
			}


			public function set dataProvider(value:ArrayCollection):void {
				_dataProvider = value;
				if (_flavors) {
					flavors = _flavors;
				}
			}


			/**
			 * is file name editable or fixed
			 * */
			public function get nameEditable():Boolean {
				return _nameEditable;
			}


			/**
			 * @private
			 * */
			public function set nameEditable(value:Boolean):void {
				_nameEditable = value;
				if (value) {
					fileName.itemRenderer = new ClassFactory(com.kaltura.edw.view.window.flavors.ir.EditableNameRenderer);
				}
				else {
					fileName.itemRenderer = new ClassFactory(com.kaltura.edw.view.window.flavors.ir.NameRenderer);
				}
			}


			public function get showSize():Boolean {
				return _showSize;
			}


			public function set showSize(value:Boolean):void {
				_showSize = value;
				var temp:ArrayCollection = new ArrayCollection(filesList.columns);
				if (value) {
					if (!temp.contains(fileSize)) {
						temp.addItemAt(fileSize, 2);
						filesList.columns = temp.source;
					}
				}
				else {
					if (temp.contains(fileSize)) {
						temp.removeItemAt(2);
						filesList.columns = temp.source;
					}
				}
			}
		]]>
	</mx:Script>
	<mx:Metadata>
		[Event(name="addFiles", type="flash.events.Event")] 
	</mx:Metadata>

	<mx:DataGrid id="filesList" width="100%" dataProvider="{_dataProvider}">
		<mx:columns>
			<mx:DataGridColumn id="fileName" paddingLeft="4" paddingRight="4" 
							   headerText="{fileHeaderText}"
							   itemRenderer="com.kaltura.edw.view.window.flavors.ir.NameRenderer"
							   width="{140}"/>
			<mx:DataGridColumn id="flavor" visible="{allowAddFiles}" paddingLeft="4" paddingRight="4"
							   headerText="{ResourceManager.getInstance().getString('cms', 'convFlavorHeader')}"
							   width="{200}"
							   itemRenderer="com.kaltura.edw.view.window.flavors.ir.FlavorRenderer"/>
			<mx:DataGridColumn id="fileSize" width="{60}" paddingLeft="4" paddingRight="4"
							   headerText="{ResourceManager.getInstance().getString('cms', 'fileSizeHeader')}"
							   itemRenderer="com.kaltura.edw.view.window.flavors.ir.SizeRenderer"/>
			<mx:DataGridColumn id="actions" width="{60}" visible="{allowAddFiles}" paddingLeft="4" paddingRight="4"
							   headerText="{ResourceManager.getInstance().getString('cms', 'actionsHeader')}"
							   itemRenderer="com.kaltura.edw.view.window.flavors.ir.ActionsRenderer"/>
		</mx:columns>
	</mx:DataGrid>
	<mx:LinkButton id="addBtn" click="addMoreFiles(event)" styleName="plusIcon"
				   label="{ResourceManager.getInstance().getString('cms', 'addFiles')}" visible="{allowAddFiles}"
				   includeInLayout="{allowAddFiles}"/>
</mx:VBox>
