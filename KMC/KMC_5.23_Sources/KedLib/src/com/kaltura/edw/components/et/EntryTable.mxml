<?xml version="1.0" encoding="utf-8"?>
<mx:DataGrid xmlns:mx="http://www.adobe.com/2006/mxml" height="100%" verticalScrollPolicy="auto" rowHeight="60"
			 selectable="false" headerRelease="{headerReleaseHandler(event)}"
			 creationComplete="creationCompleteHandler(event)" implements="com.kaltura.controls.table.ISelectionTable">
	<mx:Metadata>
		
		[ResourceBundle("entrytable")]
		
		[Event(name="orderByChanged", type="flash.events.Event")] 
		[Event(name="openEntry", type="flash.events.Event")] 
		[Event(name="selectionChanged", type="com.kaltura.edw.components.et.events.EntryTableEvent")] 
		[Event(name="showDetails", type="com.kaltura.edw.components.et.events.EntryTableEvent")] 
		[Event(name="openPreview", type="com.kaltura.edw.components.et.events.EntryTableEvent")] 
		[Event(name="deleteEntry", type="com.kaltura.edw.components.et.events.EntryTableEvent")] 
		[Event(name="approveEntry", type="com.kaltura.edw.components.et.events.EntryTableEvent")] 
		[Event(name="rejectEntry", type="com.kaltura.edw.components.et.events.EntryTableEvent")] 
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import com.kaltura.controls.table.ISelectionTable;
			import com.kaltura.controls.table.SelectionRenderer;
			import com.kaltura.dataStructures.HashMap;
			import com.kaltura.edw.components.et.business.EntryTableActions;
			import com.kaltura.edw.components.et.events.EntryTableEvent;
			import com.kaltura.edw.components.et.ir.ActionsRenderer;
			import com.kaltura.edw.components.et.ir.NameRenderer;
			import com.kaltura.edw.control.commands.UpdateSingleEntry;
			import com.kaltura.edw.control.events.KedEntryEvent;
			import com.kaltura.kmvc.control.KMvCController;
			import com.kaltura.types.KalturaMediaEntryOrderBy;
			import com.kaltura.vo.KalturaBaseEntry;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.controls.Alert;
			import mx.controls.CheckBox;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.resources.ResourceManager;

			public static const ASCENDING:String = "ASC";
			public static const DESCENDING:String = "DESC";


			// events
			// ==================
			/**
			 * defines the value of the type property for the <code>orderByChanged</code> event.
			 * */
			public static const ORDER_BY_CHANGED:String = "orderByChanged";

			/**
			 * defines the value of the type property for the <code>openEntry</code> event.
			 * */
			public static const OPEN_ENTRY:String = "openEntry";


			/**
			 * container variable for the selectionAttribute variable
			 * */
			private var _selectionAttribute:String = "tableSelected";


			public function set selectionAttribute(value:String):void {
				_selectionAttribute = value;
			}


			public function get selectionAttribute():String {
				return _selectionAttribute;
			}

			/**
			 * controller for communication with application model
			 * */
			public var controller:KMvCController;


			[Bindable]
			[Inspectable(enumeration = "true,false")]
			/**
			 * show the thumbnails column
			 * */
			public var showThumbnails:Boolean = false;


			[Bindable]
			[Inspectable(enumeration = "true,false")]
			/**
			 * show the selection column
			 * */
			public var showSelection:Boolean = true;


			/**
			 * show the delete action in the actions renderer
			 * */
			public function get showDelete():Boolean {
				var actions:Array = ActionsRenderer.allActions;
				var found:Boolean;
				for (var i:int = 0; i < actions.length; i++) {
					if (actions[i] == EntryTableActions.DELETE) {
						found = true;
						break;
					}
				}
				return found;
			}


			public function set showDelete(value:Boolean):void {
				var actions:Array = ActionsRenderer.allActions;
				var i:int;
				if (value) {
					var found:Boolean;
					for (i = 0; i < actions.length; i++) {
						if (actions[i] == EntryTableActions.DELETE) {
							found = true;
							break;
						}
					}
					if (!found) {
						actions.push(EntryTableActions.DELETE);
					}

				}
				else {
					for (i = 0; i < actions.length; i++) {
						if (actions[i] == EntryTableActions.DELETE) {
							actions.splice(i, 1);
							break;
						}
					}
				}
			}



			[Bindable]
			/**
			 * the text to show under "publish" column.
			 * (public because it is used in the item renderer)
			 * */
			public var previewLabel:String = ResourceManager.getInstance().getString('entrytable', 'previewAndEmbed');
			
			
			[Inspectable(enumeration = "true,false")]
			/**
			 * show only actions relevant to moderation screen
			 * @internal
			 * used by actions IR
			 * */
			public var showModerationActions:Boolean;


			public var kalturaSorting:Boolean = true;

			/**
			 * show/hide the links for the entries names
			 * */
			public var showLinks:Boolean = true;

			/**
			 *  @private
			 *  Storage for the singleSelection property.
			 */
			private var _singleSelection:Boolean = false;


			/**
			 * @internal
			 * multiple selection is not traditional,
			 * as far as the DataGrid is concerned it is always set to false
			 * though the default applicative value is true.
			 * */
			override public function set allowMultipleSelection(value:Boolean):void {
				super.allowMultipleSelection = false;

			}


			/**
			 * allow only a single item to be selected at each time. <br>
			 * this attribute replaces ListBase.allowMultipleSelection
			 * */
			public function set singleSelection(value:Boolean):void {
				if (_singleSelection && !value) {
					setSelectedItems(null);
				}
				_singleSelection = value;

			}


			public function get singleSelection():Boolean {
				return _singleSelection;
			}


			override public function set selectedItem(item:Object):void {
				setSelectedItems([item]);
			}


			override public function set selectedItems(items:Array):void {
				setSelectedItems(items);
			}



			/**
			 * set the SELECTION_ATTRIBUTE on the given objects to true,
			 * then set them as selected items
			 * */
			protected function setSelectedItems(items:Array):void {
				var entry:KalturaBaseEntry;
				var si:Array = super.selectedItems; // currently selected items
				// mark all currently selected items as not selected
				for (var i:int = si.length - 1; i >= 0; i--) {
					entry = si[i] as KalturaBaseEntry;
					entry[_selectionAttribute] = false;
					entry.dispatchEvent(PropertyChangeEvent.createUpdateEvent(entry, _selectionAttribute, true, false));
				}
				if (items == null) {
					super.selectedItems = null;
				}
				else {
					si = [];
					// find selectedItems in the DP and add them to the selected list
					for each (var nkbe:KalturaBaseEntry in items) {
						for each (entry in dataProvider) {
							if (nkbe === entry) {
								// add the item that was in the dataprovider to start with
								si.push(entry);
								entry[_selectionAttribute] = true;
								entry.dispatchEvent(PropertyChangeEvent.createUpdateEvent(entry, _selectionAttribute, false, true));
								break;
							}
						}
					}
					super.selectedItems = si;
				}
				setSelection();

			}

			/**
			 * @copy #orderBy
			 * */
			private var _orderBy:String = "";

			private var _columnsSortMap:HashMap = new HashMap();

			/**
			 * the current sort index
			 * */
			private var _sortIndex:int = 5;

			[Bindable]
			/**
			 * the current sort direction
			 * */
			private var _sortDirection:String = "DESC";


			private var _selectedEntry:KalturaBaseEntry;


			[Bindable]
			/**
			 * the latest selected entry in the table
			 * */
			public function get selectedEntry():KalturaBaseEntry {
				return _selectedEntry;
			}


			/**
			 * @private
			 */
			public function set selectedEntry(value:KalturaBaseEntry):void {
				_selectedEntry = value;
				markSelectedEntry(false);
			}


			[Bindable]
			override public function set dataProvider(value:Object):void {
				super.dataProvider = value;
				setSortIndicator();
				markSelectedEntry();
				mx_internal::columnRendererChanged(selectionColumn);
			}


			[Bindable]
			public function get sortDirection():String {
				return _sortDirection;
			}


			public function set sortDirection(sortDirection:String):void {
				_sortDirection = sortDirection;
			}


			public function updateDefaultSortColumn():void {
				var cols:Array = this.columns;
				var col:DataGridColumn;
				for (var i:int = 0; i < cols.length; i++) {
					if ((cols[i] as DataGridColumn).headerText == resourceManager.getString('entrytable', 'createAt')) {
						_sortIndex = i;
						break;
					}
				}

				setSortIndicator();
			}


			public function removeSort():void {
				_sortIndex = -1;
				sortDirection = '';
				(dataProvider as ICollectionView).sort = null;
				(dataProvider as ICollectionView).refresh();
//				setSortIndicator();
			}


			private function markSelectedEntry(dispatchSelectEvent:Boolean = true):void {
				if (selectedEntry != null) {
					// gotta find the correct entry by its id, because these are new objects.
					var n:int = dataProvider.length;
					var entries:Array = (dataProvider as ArrayCollection).source;
					var entry:KalturaBaseEntry;
					for (var i:int = 0; i < n; i++) {
						entry = entries[i] as KalturaBaseEntry;
						if (entry.id == selectedEntry.id) {
							selectedItems = [entry];
							break;
						}
					}
					// the selectedEntry is not relevant anymore - should remember the new one
					if (dispatchSelectEvent) {
						var ee:KedEntryEvent = new KedEntryEvent(KedEntryEvent.SET_SELECTED_ENTRY, entry);
						controller.dispatch(ee);
					}
				}
			}



			public function openEditEntry(e:Object):void {
				var entry:KalturaBaseEntry;

				if (!showLinks) {
					return;
				}

				if (e is KalturaBaseEntry) {
					entry = e as KalturaBaseEntry;
				}
				else if (e is Event) {
					entry = e.target.data as KalturaBaseEntry;
				}

				if (entry) {
					var ete:EntryTableEvent = new EntryTableEvent(EntryTableEvent.SHOW_DETAILS);
					ete.data = entry;
					dispatchEvent(ete);
					dispatchEvent(new Event(OPEN_ENTRY));
				}
				else {
					Alert.show(resourceManager.getString('entrytable', 'pleaseSelectEntriesFirst'));
				}
			}


			/**
			 * remove columns which are not in the list
			 * in case we don't want to show all of the entry table's columns,
			 * pass in a list of columns we want shown.
			 * @param columnsList	array with "ids" of columns to show
			 *
			 * @see EntryTableColumns
			 * */
			public function showColumns(columnKeys:Array):void {
				var arrCol:ArrayCollection = new ArrayCollection(this.columns);
				var columnsList:Array = []; // column names (headerText)
				for each (var str:String in columnKeys) {
					columnsList.push(resourceManager.getString('entrytable', str));
				}

				var found:Boolean;
				for (var i:int = arrCol.length - 1; i > 0; i--) { // arrcol[0] is the selection column
					found = false;
					for (var j:int = 0; j < columnsList.length; j++) {
						if (arrCol[i].headerText == columnsList[j]) {
							found = true;
							break;
						}
					}
					if (!found) {
						arrCol.getItemAt(i).visible = false;
					}
				}

				selectionColumn.width = 32;
			}



			/**
			 * selection or deselection was made
			 */
			private function setSelection():void {
				var e:EntryTableEvent = new EntryTableEvent(EntryTableEvent.SELECTION_CHANGED);
				e.data = selectedItems;
				dispatchEvent(e);
			}





			private function headerReleaseHandler(event:DataGridEvent):void {
				if (event.itemRenderer && event.itemRenderer.data == selectionColumn) {
					event.preventDefault();
					return;
				}
				event.preventDefault();
				
				if (event.itemRenderer && event.itemRenderer.data && event.itemRenderer.data.headerText) {
					var headerText:String = event.itemRenderer.data.headerText;
					if (!_columnsSortMap.containsKey(headerText)) {
						_columnsSortMap.put(headerText, false);
					}
				
					var sortDir:Boolean = _columnsSortMap.getValue(headerText) as Boolean;
					if (kalturaSorting) {
						switch (event.itemRenderer.data.headerText) {
							case resourceManager.getString('entrytable', 'createAt'):
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.CREATED_AT_ASC : KalturaMediaEntryOrderBy.CREATED_AT_DESC;
								break;
							case resourceManager.getString('entrytable', 'name'):
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.NAME_ASC : KalturaMediaEntryOrderBy.NAME_DESC;
								break;
							case resourceManager.getString('entrytable', 'playerLoads'):
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.VIEWS_ASC : KalturaMediaEntryOrderBy.VIEWS_DESC;
								break;
							case resourceManager.getString('entrytable', 'plays'):
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.PLAYS_ASC : KalturaMediaEntryOrderBy.PLAYS_DESC;
								break;
							case resourceManager.getString('entrytable', 'type'):
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.MEDIA_TYPE_ASC : KalturaMediaEntryOrderBy.MEDIA_TYPE_DESC;
								break;
							case resourceManager.getString('entrytable', 'flags'):
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.MODERATION_COUNT_ASC : KalturaMediaEntryOrderBy.MODERATION_COUNT_DESC;
								break;
							case resourceManager.getString('entrytable', 'rating'):
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.RANK_ASC : KalturaMediaEntryOrderBy.RANK_DESC;
								break;
							case resourceManager.getString('entrytable', 'duration'):
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.DURATION_ASC : KalturaMediaEntryOrderBy.DURATION_DESC;
								break;
							default:
								Alert.show(resourceManager.getString('entrytable', 'cannotOrderByIt', [event.itemRenderer.data.headerText]), resourceManager.getString('entrydetails', 'cannotOrderByItTitle'));
								return;
								break;
						}

						// remember the direction and change the sign
						_sortIndex = event.columnIndex;
						_sortDirection = sortDir ? ASCENDING : DESCENDING;
						_columnsSortMap.setValue(headerText, !sortDir);
						setSortIndicator();

						dispatchEvent(new Event(ORDER_BY_CHANGED));
					}
					else {
						// local sort, no server
						var src:Array = (dataProvider as ArrayCollection).source;
						var att:String;
						switch (event.itemRenderer.data.headerText) {
							case resourceManager.getString('entrytable', 'createAt'):
								att = "createdAt";
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.CREATED_AT_ASC : KalturaMediaEntryOrderBy.CREATED_AT_DESC;
								break;
							case resourceManager.getString('entrytable', 'name'):
								att = "name";
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.NAME_ASC : KalturaMediaEntryOrderBy.NAME_DESC;
								break;
							case resourceManager.getString('entrytable', 'playerLoads'):
								att = "views";
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.VIEWS_ASC : KalturaMediaEntryOrderBy.VIEWS_DESC;
								break;
							case resourceManager.getString('entrytable', 'plays'):
								att = "plays";
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.PLAYS_ASC : KalturaMediaEntryOrderBy.PLAYS_DESC;
								break;
							case resourceManager.getString('entrytable', 'type'):
								att = "mediaType";
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.MEDIA_TYPE_ASC : KalturaMediaEntryOrderBy.MEDIA_TYPE_DESC;
								break;
							case resourceManager.getString('entrytable', 'flags'):
								att = "moderationCount";
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.MODERATION_COUNT_ASC : KalturaMediaEntryOrderBy.MODERATION_COUNT_DESC;
								break;
							case resourceManager.getString('entrytable', 'rating'):
								att = "rank";
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.RANK_ASC : KalturaMediaEntryOrderBy.RANK_DESC;
								break;
							case resourceManager.getString('entrytable', 'duration'):
								att = "duration";
								_orderBy = sortDir ? KalturaMediaEntryOrderBy.DURATION_ASC : KalturaMediaEntryOrderBy.DURATION_DESC;
								break;
							default:
								Alert.show(resourceManager.getString('entrytable', 'cannotOrderByIt', [event.itemRenderer.data.headerText]), resourceManager.getString('entrydetails', 'cannotOrderByItTitle'));
								return;
								break;
						}
						
						// remember the direction and change the sign
						_sortDirection = sortDir ? ASCENDING : DESCENDING;
						_sortIndex = event.columnIndex;
						_columnsSortMap.setValue(headerText, !sortDir);
						if (sortDir) {
							src.sortOn(att, Array.CASEINSENSITIVE);
						}
						else {
							src.sortOn(att, Array.CASEINSENSITIVE | Array.DESCENDING);
						}
						(dataProvider as ICollectionView).refresh();
						setSortIndicator();
					}
				}
			}


			private function setSortIndicator():void {
				this.mx_internal::sortIndex = _sortIndex;
				this.mx_internal::sortDirection = _sortDirection;
			}


			/**
			 * dispatch an approveEntry event
			 * */
			private function approveEntry(event:Event):void {
				var e:EntryTableEvent = new EntryTableEvent(EntryTableEvent.APPROVE_ENTRY);
				e.data = event.target.data as KalturaBaseEntry;
				dispatchEvent(e);
			}
			
			/**
			 * dispatch a rejectEntry event
			 * */
			private function rejectEntry(event:Event):void {
				var e:EntryTableEvent = new EntryTableEvent(EntryTableEvent.REJECT_ENTRY);
				e.data = event.target.data as KalturaBaseEntry;
				dispatchEvent(e);
			}

			/**
			 * dispatch a deleteEntry event
			 * */
			private function deleteEntry(event:Event):void {
				var e:EntryTableEvent = new EntryTableEvent(EntryTableEvent.DELETE_ENTRY);
				e.data = event.target.data as KalturaBaseEntry;
				dispatchEvent(e);
			}


			/**
			 * request opening preview & embed popup for an entry.
			 * @param item	either a KalturaBaseEntry or an event whose target.data is a KalturaBaseEntry.
			 *
			 * @internal
			 * the event is probably from the preview IR of the table and the other option is left for backwards compat.
			 * */
			public function preview(item:Object):void {
				var entry:KalturaBaseEntry;
				if (item is Event) {
					entry = item.target.data as KalturaBaseEntry;
				}
				else {
					entry = item as KalturaBaseEntry;
				}

				var e:EntryTableEvent = new EntryTableEvent(EntryTableEvent.OPEN_PREVIEW);
				e.data = entry;
				dispatchEvent(e);
			}


			public function deselectAll(event:Event = null):void {
				selectedItems = [];
			}


			public function selectAll(event:Event = null):void {
				selectedItems = (dataProvider as ArrayCollection).source;
			}


			protected function creationCompleteHandler(event:FlexEvent):void {
				// add IR listernes
				addEventListener(SelectionRenderer.SELECTION_CHANGED, handleSelectionChanged, false, 0, true);
				addEventListener(NameRenderer.NAME_CLICKED, openEditEntry, false, 0, true);
				// actions
				addEventListener(EntryTableActions.EMBED, preview, false, 0, true);
				addEventListener(EntryTableActions.EDIT, openEditEntry, false, 0, true);
				addEventListener(EntryTableActions.DELETE, deleteEntry, false, 0, true);
				addEventListener(EntryTableActions.APPROVE, approveEntry, false, 0, true);
				addEventListener(EntryTableActions.REJECT, rejectEntry, false, 0, true);

				updateDefaultSortColumn();
			}


			/**
			 * if e.target.data is datagridcolumn:
			 * select / deselect all
			 *
			 * if e.target.data is entry:
			 * set new selection value to the vo
			 * add/remove the vo to the selected items
			 * */
			protected function handleSelectionChanged(e:Event):void {
				// set value on data
				var entry:KalturaBaseEntry = e.target.data as KalturaBaseEntry;
				if (entry) {
					// the click was inside the table
					var oldVal:Boolean = entry[_selectionAttribute];
					entry[_selectionAttribute] = !oldVal;
					entry.dispatchEvent(PropertyChangeEvent.createUpdateEvent(entry, _selectionAttribute, oldVal, !oldVal));
					// set value on selectedItems array
					var si:Array = selectedItems;
					if (oldVal) {
						// the entry was in the selectedItems array, remove it
						for (var i:int = 0; i < si.length; i++) {
							if ((si[i] as KalturaBaseEntry) === entry) {
								si.splice(i, 1);
								break;
							}
						}
					}
					else {
						// add the entry to the selectedItems array
						if (!_singleSelection) {
							si.push(entry);
						}
						else {
							// remember given entry
							si = [entry];
						}
					}
					selectedItems = si;
				}
				else if (e.target.data is DataGridColumn) {
					// the click was on the headerRenderer
					if (_singleSelection) {
						(e.target.cb as CheckBox).selected = false;
						return;
					}
					if (selectedItems.length) {
						deselectAll();
						e.target.cb.selected = false;
					}
					else {
						selectAll();
						e.target.cb.selected = true;
					}
					setSelection();
				}
			}



			/**
			 * table ordering, optional values listed in <code>KalturaMediaEntryOrderBy</code>
			 * */
			public function get orderBy():String {
				return _orderBy;
			}

			/**
			 * For RnP, we need to seperate the preview and the previewAndEmbed cases
			 */
			private var _showEmbed:Boolean = true;


			[Bindable]
			/**
			 * @copy #_showEmbed
			 */
			public function set showEmbed(value:Boolean):void {
				if (value)
					previewLabel = resourceManager.getString('entrytable', 'previewAndEmbed');
				else {
					previewLabel = resourceManager.getString('entrytable', 'previewOnly');
				}
				_showEmbed = value;
			}


			public function get showEmbed():Boolean {
				return _showEmbed;
			}
		]]>
	</mx:Script>



	<mx:columns>
		<mx:DataGridColumn width="32" minWidth="32" id="selectionColumn" visible="{showSelection}"
						   headerRenderer="com.kaltura.controls.table.SelectionRenderer"
						   itemRenderer="com.kaltura.controls.table.SelectionRenderer"/>

		<mx:DataGridColumn headerText="{resourceManager.getString('entrytable', 'thumbnail')}" width="72" minWidth="54"
						   itemRenderer="com.kaltura.edw.components.et.ir.ThumbnailRenderer" visible="{showThumbnails}"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" dataField="id" width="90"
						   headerText="{resourceManager.getString('entrytable', 'idHeader')}"
						   itemRenderer="com.kaltura.edw.components.et.ir.GeneralRenderer"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" dataField="name"
						   headerText="{resourceManager.getString('entrytable', 'name')}"
						   itemRenderer="com.kaltura.edw.components.et.ir.NameRenderer"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" width="80"
						   headerText="{resourceManager.getString('entrytable', 'playlistType')}"
						   labelFunction="{EntryTableLabelFunctions.getPlaylistMediaTypes}"
						   itemRenderer="com.kaltura.edw.components.et.ir.GeneralRenderer"/>

		<mx:DataGridColumn width="40" headerText="{resourceManager.getString('entrytable', 'type')}"
						   itemRenderer="com.kaltura.edw.components.et.ir.MediaTypeRenderer"
						   headerStyleName="centerTableColumnHeader"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" dataField="views" width="80"
						   headerText="{resourceManager.getString('entrytable', 'playerLoads')}"
						   itemRenderer="com.kaltura.edw.components.et.ir.DataGridColumnLabel"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" dataField="plays" width="55"
						   headerText="{resourceManager.getString('entrytable', 'plays')}"
						   itemRenderer="com.kaltura.edw.components.et.ir.DataGridColumnLabel"
						   headerStyleName="centerTableColumnHeader"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" dataField="rank" width="50"
						   headerText="{resourceManager.getString('entrytable', 'rating')}"
						   itemRenderer="com.kaltura.edw.components.et.ir.DataGridColumnLabel"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" dataField="userId" width="90"
						   headerText="{resourceManager.getString('entrytable', 'creator')}" showDataTips="true"
						   itemRenderer="com.kaltura.edw.components.et.ir.DataGridColumnLabel"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" width="110"
						   headerText="{resourceManager.getString('entrytable', 'createAt')}"
						   labelFunction="{EntryTableLabelFunctions.formatDate}"
						   itemRenderer="com.kaltura.edw.components.et.ir.GeneralRenderer"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" width="75"
						   headerText="{resourceManager.getString('entrytable', 'intime')}"
						   labelFunction="{EntryTableLabelFunctions.formatDate}"
						   itemRenderer="com.kaltura.edw.components.et.ir.GeneralRenderer"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" width="75"
						   headerText="{resourceManager.getString('entrytable', 'duration')}"
						   labelFunction="{EntryTableLabelFunctions.getTimeFormat}"
						   itemRenderer="com.kaltura.edw.components.et.ir.GeneralRenderer"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" dataField="moderationCount" width="40"
						   headerText="{resourceManager.getString('entrytable', 'flags')}"
						   itemRenderer="com.kaltura.edw.components.et.ir.DataGridColumnLabel"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" width="110"
						   headerText="{resourceManager.getString('entrytable', 'status')}"
						   labelFunction="{EntryTableLabelFunctions.getStatus}"
						   itemRenderer="com.kaltura.edw.components.et.ir.GeneralRenderer"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" width="110"
						   headerText="{resourceManager.getString('entrytable', 'moderationStatus')}"
						   labelFunction="{EntryTableLabelFunctions.getStatusForModeration}"
						   itemRenderer="com.kaltura.edw.components.et.ir.GeneralRenderer"/>

		<mx:DataGridColumn paddingLeft="4" paddingRight="4" width="140"
						   headerText="{resourceManager.getString('entrytable', 'actions')}"
						   itemRenderer="com.kaltura.edw.components.et.ir.ActionsRenderer"/>

	</mx:columns>
</mx:DataGrid>
