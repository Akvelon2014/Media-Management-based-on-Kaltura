Following is a summary of the available flashvars

Kaltura API:
------------

	partnerId
		Partner Id sending API requests
	
	subpId
		Sub partner sending API requests
	
	ks
		Kaltura Session for authenticating API requests

	clientTag
		The client tag is added to the KDP version and sent to Kaltura in all API requests

	referer DEPRECATED - if passed copied to referrer variable 
		referrer to be sent on to Kaltura (should be generated by kaltura /kwidget url)
		   
	refrerer 
		referrer to be sent on to Kaltura (should be generated by kaltura /kwidget url)   

	srvUrl = /api_v3/index.php
		Base url for accessing Kaltura api requests.
		

Kaltura widget environment
--------------------------
	
	host = www.kaltura.com
		Host for sending API calls
	
	cdnHost = www.kaltura.com
		Host for requesting content, media and plugins
	 
	widgetId
		Widget id on the kaltura system
	
	uiConfId
		UI configuration id of the current player (defaults to the uiConfId assigned to the widget)


Media selection
---------------

	sourceType = entryId [entryId,url]
		Media source type to be played which can be either a Kaltura EntryId or URL
	
	entryId
		The actual default media to be played - either a kaltura EntryId or a URL
		
	referenceId
		Reference Id of an entry to be played (instead of entryId). the player gets  
		a list of entries with matching referenceId and plays the first in the list. 	

Media delivery
--------------

	streamerType = http [http,rtmp,live,auto]
		Defines the delivery method of the content, either http, rtmp or live
	
	streamerUrl = 
		The FMS application url (e.g. rtmp://rtmpakmi.kaltura.com/ondemand)
		
	streamFormat = [undefined,mp4]
		For mp4 streams the FMS requires the stream name to be prefixed with mp4:  
	
	streamUrlTemplate
		Allows the building of a formatted url to access the actual media. The string may include several placeholders:
		
		{entryId} - the entryId
		{flavorId} - the flavorId
		
		The placeholders are replaced with the actual values.
		
		e.g.: /ns/sample/{entryId}_{flavorId} 
		

	rtmpFlavors = [undefined,1]
		Instructs KDP to use adaptive bitrate dynamic streaming and use available media flavors 
		
	mediaProtocol = [rtmpt] (effective since KDP 3.4.6)
		Flashvar dtermining the protocol from which the KDP media is loaded. If no value is passed, assumes the value of the streamerType.
		
	reloadOnPlayLS = [true/false]
		When set to true, media will be reloaded when resuming live stream. (Was added to support Wowza pause/play live stream).
		
	ignoreStreamerTypeForSeek = [true/false]
		when set to true, the KDP will call OSMF player.seek, even when in http and appear to be intelliseek
		
	twoPhaseManifest = [true/false]
		when set to true, KDP will parse the manifest f4m itself, and create the resource from the returned media url. (Will be used to play HDS)

	flavorTags = [string]
		when this flashvar is set, KDP will add "tags" parameter to playmanifest call. PlayManifest will return only flavors tagged with the provided string. Currently only a signel flavo is supported.
		              
Miscellaneous
-------------

	kml = [undefined,local,inject]
		Defines how to load the configuration xml.
		undefined - By default the configuration is loaded from	Kaltura servers via the uiConf object.
		local - load 'config.xml' from local file system
		inject - used by AppStudio to preview the KDP by injecting an xml via the init( xml : XML ) function
		
	kmlPath = config.xml
		When the kml variable is set to local, this is the path from which the configuration xml will be loaded
		
	httpProtocol = [http,https]
		Used for building requests to api and media. By default the value is set to the same protocol used to fetch
		the KDP swf.
	
	externalInterfaceDisabled = 1 [0/false,1]
		Disabled any external interface access for cases where allowScriptAccess wasnt set to allow access
		
		
	jsInterfaceReadyFunc = null [string] 
		On certain browsers, the function registerKDPCallbacks is executed before the page loading the KDP is fully ready.
		In such cases this flashvar can be set to the name of the js function, and the following lines added to the <script> tag in the <head></head>
		tag of the page:
		 			//------------------------------------------------------------------------------
					// Privates
					 var jsReady = false;
					//------------------------------------------------------------------------------
					function onInit(){
						alert('Container Loaded!');
						jsReady=true;
					}
					function [jsInterfaceReadyFunc](){
						return jsReady;
					}
		in the <body> tag, set the onload property to "onInit()". This is in accordance with Adobe's best practice for integrating 
		Flash/Flex applications in html pages:
		http://livedocs.adobe.com/flex/3/html/help.html?content=19_External_Interface_09.html
		
	jsCallbackReadyFunc = null [string]
		The jsCallbackReady func specifies the name of the js function to call when the kdp indicates to the js interface that it is loaded and ready
		to be interacted with. By default it is null and the KDP sets it to be "jsCallbackReady".
		
	flavorId
		 A specific flavorId to be played

	pluginDomain = plugins/
		Url for loading KDP plugins. used mainly for debugging (e.g. when running in file system mode, loading the plugins
		from path other than the KDP host). 

	debugMode = false [true/false]
		Used for internal traces
		
	debugLevel = 0 [0/1/2]
		Used to determine what traces to include according to the given level (0=low, 1=medium, 2=high). See DebugLevel class.

	fileSystemMode = false [false, true]
		Used to load skin and locale from predefined path when working from file system

	disableAlerts = false [false, true]
		Disable all users alerts                                  
		
	autoPlay = false [false, true]
		Auto play entry (not playlist entry) to auto load playlist entries check at the section below under set components & plugins attributes.

	autoRewind = false [false, true]
		Control how the last frame will look like when the player reached the end (if it will be the last frame or the first)

	autoMute = false [false, true]
		Automatic mute
		
	loop = false [false, true]
		Indicates whether the media should be played again after playback has completed
	
	playerBgColor = 0xff0000
		Player background color (behind the video)
		
	playerBgAlpha=0.5
		Player background alpha (behind the video)
		
	strings.{string name}
		Override KDP message strings (listed in strings.txt).  
		
	disableOnScreenClick [null, true, false]
		This flashvar configures whether the on-screen click in kdp pauses/resumes playback.
		
	storageId [null, string]
		This flashvar contains the storageId from which we wish to load the entry (assuming there is such storage. If there isn't there is no reason to pass this flashvar).

    requiredMetadataFields = [true,false]
    	This flashvar is a flag signifying whether the player should deliver custom metadata related to the current playing entry.
    
    metadataProfileId = [null, string]
    	This flashvar contains a specific custom metadata profile id to deliver. If it is not passed, the KDP delivers the latest custom metadata profile.
    
    getCuePointsData = [true/false]
    	This flashvar is a flag indicating whether the player should deliver cue-point data related to the current playing entry. Its value is "true" by default.
    	
    disableBitrateCookie = [true/false]
    	Flag indicating whether the KDP should take the bitrate from the Flash cookie.
    
    loadThumbnailWithKs = [true/false]
    	Flag indicating whether the KDP should append the KS to the thumbnail request. Default value "false" to take advantage of caching.
    	
     loadThumbnailWithReferrer = [true/false]
    	Flag indicating whether the KDP should append the referrer to the thumbnail request. Default value "false".
    	
    noThumbnail = [true/false]
    	Flag indicating whether the KDP should forgo loading the thumbnail.
    	
    disableReferrerOverride = [true/false]
    	Flag indicating whether to take the referrer from the page (if true) or from the referrer flashvar (if false)
    	
    useRtmptFallback = [true/false]
    	Flag indicating whether to try to connect to rtmpt/rtmpte too (if mediaProtocol is rtmp/rtmpe. Default value is "true".
    
    jsTraces = [true/false]
    	Flag indicating whether to print traces to a box in the page. Usefull when there's no flash debugger version. Default value is "false".
    	
    centerPreloader = [true/false]
    	Flag indicating whether to center the preloader swf. Should be true in case the preloader registration point is not at its center. Default value is "false".
    	
    usePreloaderBufferAnimation = [true/false]
    	Flag indicating whether we should use the preloader swf animation as the buffering animation. Default value is "false". if "false": buffering animation will be taken from "kspin" class in kdp skin.
    	
    preloaderPath = preloader swf location. If this flashvar is not passed, the default preloader will be used.
    
    disableCuePointsMidroll = [true/ flase]
    	If set to true, "ad_opportunity" notifications won't be sent from the KDP for midrolls
    	
    metadataNamespace[i] = String
    	This flashvar can be used to add metadata on the created resource, before the player created the media element. The matching metadata values for this namespace will be
    	passed in a different flashvar : metadataValues[i] (the i number should match this flashvar i value). 
    
    metadataValues[i] = String
    	This flashvar can be used to add metadata on the created resource, before the player created the media element. The metadata namespace
    	is passed on metadataNamespace[i].
    	The syntax of this flashvar is comma seperated key=value strings. each key=value string represents a new metadata value.
    	for example: first=one,second=two,third=three
    
    enableStageVideo = [true / false]
    	when set to true, OSMF stage video will be enabled (false by default, relevant from KDP v3.6 and up)
    	
    allowCookies = [true / false]
    	determines whetehr to allow KDP to save flash cookies. Default value is true
    
    alertForCookies = [true / false]
    	if set to true, "allow cookies" alert will be displayed if user hasn't allowed cookies in a previous session. Default value is false.
    	
    adsOnReplay = [true / false]
    	if set to true, ads will be shown on replay. Default is false.
    	                                
Components & Plug-ins attributes
--------------------------------

Every component attribute can be overriden using flashvars.
For example, in order to make the playlist load automaticlly the following variable should be set:
	General case: {The id of the playlistAPI in the configuration xml}.{Attribute name} = {value}
	Sample: playlistAPI.autoPlay=true (where playlistAPI is the id of the plugin in the configuration xml)

Another example is changing the skin path url:
	{Layout tag id}.skinPath
	full.skinPath=blablabla/bla.swf

Loading of plugins can be done in a similar way: 
	{Plugin name}.plugin = true - Triggers the loading of the plugin. This will be the id of the plugin if and id wont be specified
	{Plugin name}.path = path - The path from where to load the plugin, if not given the plugin will be loaded from Kaltura's plugin path
	{Plugin name}.relativeTo = id - Component id within the layout to position relative to
	{Plugin name}.position = [before,after,firstChild,lastChild] - position relative to given component id 
	{Plugin name}.pluginName = class name - in case the same plugin swf contains multiple plugins
	{Plugin name}.asyncInit = ["true"/"false"] - in case the initializePlugin function of the plugin calls an INTEGRAL a-sync load which completes the init process.
	{Plugin name}.loadingPolicy = {[wait,onDemand,noWait,preInitialize]} - instruct when to load the plugin.
									wait - Do not enable GUI until the plugin is loaded.
									onDemand - plugin must only be loaded if a specific component in the KDP demands it.
									noWait- plugin is loaded in a non-synchronized way, the GUI becomes enabled even if the plugin has not yet loaded.
									preInitialize - plugin is loaded before GUI is created.
	{Plugin name}.asyncInit = [true/false] - flag indicating whether the plugin initialization process involves a-synchronous processes. If == true -> the plugin is required to report
											that its initialization is complete (or failed) by firing the KPluginEvent.ASYNC_INIT_COMPLETE (KPluginEvent.ASYNC_INIT_FAILED).
	{Plugin name}.{any additional attribute} = {value} - setting any additional attribute specific to the plugin

Built-in components (non plugins) can be loaded as well using flashvars the same way plugins are loaded with the following addition:
{name of the component}.className = Button


MediaProxy variables
--------------------
 
	mediaProxy.selectedFlavorId
		the currently selected flavor
		
	mediaProxy.preferedFlavorBR
		a prefered bitrate for selecting the flavor to be played. in case of an rtmp adaptive mbr a -1 value
		will force an auto switching as opposed to manual one 
		
	mediaProxy.imageDefaultDuration = 3
		When the media is Image and played in a playlist we will set the defualt 
		time of the image to the next value unless override from flashvars
		
	mediaProxy.supportImageDuration [true,false]
		Some types of media need to behave defrently in a listed ui (playlist,related list) like
		Image that need to play with duration if a list is loaded it need to set this attribute to true
		if you want to play image in a non listed way even if you load a list set this flag to false again
		
	mediaProxy.initialBufferTime = 2
		set initial buffer time for quick starting the playing of a stream
					
	mediaProxy.expandedBufferTime = 10
		set the maximum buffer time to be set once the video started playing in order to minimize further buffering events
	
	mediaProxy.expandedLiveBufferTime = 0.75
		sets the maximum buffer time to be set for a live entry - once the video has started playing and we want to minimize further buffering events.
	
	mediaProxy.initialLiveBufferTime = 0.75
		sets the initial buffer time for a live entry in order to start the playback quickly.
		
	mediaProxy.entryMetadata
		Retrieve the object on the MediaVO class which contains the custom entry metadata information.
	
	mediaProxy.entryCuePoints
		Retrieve the object on the MediaVO class which contains the cue point information related to the current entry.
	
	mediaProxy.mediaPlayFrom = 20
		Set the video start-time to be something other than 0.
	
	mediaProxy.mediaPlayTo = 45
		Setting this parameter indicates to the player to pause the main content at the indicated time.


Commonly requested parameters
------------------------------

	video.player.currentTime  
		the current time of the video.
		
	video.player.duration
		the duration of the video currently playing in the KDP.
	
	kalturaLogo.visible=false
		sets the visibility of the logo to false
	
	kalturaLogo.includeInLayout=false
		removed the placeholder of the logo from the UI.
	
	{UI element ID}.allowDisable=false
		parameter reconfigures the UI element, so that when the rest of the UI is disabled, this particualr element remains
		enabled.
	
	


